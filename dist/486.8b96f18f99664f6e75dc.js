"use strict";(self.webpackChunkapp_react=self.webpackChunkapp_react||[]).push([[486],{6398:function(e,r,n){n.d(r,{Z:function(){return v}});var t=n(6010),i=n(5697),a=n.n(i),o=n(3942),s=n(5893),c=function(e){var r=e.className,n=e.width,t=e.height;return(0,s.jsxs)("svg",{className:r,width:n,height:t,xmlns:"http://www.w3.org/2000/svg",xmlnsXlink:"http://www.w3.org/1999/xlink",children:[(0,s.jsx)("symbol",{id:"icon-bookmark",viewBox:"0 0 17 18",children:(0,s.jsx)("path",{d:"M3.993 2.185l.017-.092V2c0-.554.449-1 .99-1h10c.522 0 .957.41.997.923l-2.736 14.59-4.814-2.407-.39-.195-.408.153L1.31 16.44 3.993 2.185z"})}),(0,s.jsx)("use",{href:"#icon-bookmark"})]})};c.propTypes={className:a().string,width:a().number,height:a().number};var u=c,f=n(2336),l=n(5506),d=n(3886),p=n(8404),h=function(e){var r,n,i,a=e.offerId,c=e.bookmarkType,d=(0,o.v9)(f.G4),h=(0,o.v9)(l.Od),v=(0,o.I0)(),m=!!d.length&&d.includes(a),y=m?p.O9.IN_BOOKMARKS:p.O9.TO_BOOKMARKS,b=h?p.Bx.NONE:p.Bx.LOGIN;return(0,s.jsxs)("button",{className:(0,t.Z)("bookmark-button",p.ot[c].btn,(r={},n=p.ot[c].btnActive,i=h&&m,n in r?Object.defineProperty(r,n,{value:i,enumerable:!0,configurable:!0,writable:!0}):r[n]=i,r)),"data-modal":b,title:y,type:"button",onClick:function(){h&&v((0,f.VO)(a))},children:[(0,s.jsx)(u,{className:p.ot[c].icon,width:p.lS[c].width,height:p.lS[c].height}),(0,s.jsx)("span",{className:"visually-hidden",children:y})]})};h.propTypes={offerId:d.x6,bookmarkType:a().string.isRequired};var v=h},5236:function(e,r,n){n.d(r,{Z:function(){return O}});var t=n(7294),i=n(5697),a=n.n(i),o=n(6010),s=n(9711),c=n(3942),u=n(8404),f=n(5893),l=function(e){var r=e.offerImage,n=e.offerLink,t=e.offerType;return(0,f.jsx)(s.OL,{className:"d-flex justify-content-center align-items-center text-center",to:n,children:(0,f.jsx)("img",{className:"rounded",alt:u.HH.PLACE_IMAGE,width:u.YS[t].width,height:u.YS[t].height,src:r,loading:"lazy"})})};l.propTypes={offerImage:a().string.isRequired,offerLink:a().string.isRequired,offerType:a().string.isRequired};var d=l,p=n(6398),h=n(4453),v=n(1265),m=n(3886),y=function(e){var r=e.offer,n=e.offerType,t=e.handleOfferCardMouseEnter,i=void 0===t?function(){return!1}:t,a=e.handleOfferCardMouseLeave,l=void 0===a?function(){return!1}:a,m=r.id,y="".concat(u.$w.OFFER,"?id=").concat(m),b=(0,c.v9)(v.k4);return(0,f.jsx)("li",{className:(0,o.Z)("".concat(u.pp[n].li," pb-3 app-hover-opacity"),{"app-opacity":b===m}),onMouseEnter:i,onMouseLeave:l,children:(0,f.jsx)("article",{className:"card border-light text-start",children:(0,f.jsxs)("div",{className:"".concat(u.pp[n].container," d-flex"),children:[(0,f.jsx)("div",{children:(0,f.jsxs)("div",{className:"position-relative bg-light rounded",children:[r.wifi&&(0,f.jsx)("span",{className:"position-absolute top-0 start-0 badge bg-primary app-skewed-neg-15 offer-card-badge",children:(0,f.jsx)("span",{children:u.HH.FREE_WI_FI})}),(0,f.jsx)(d,{offerImage:r.image,offerLink:y,offerType:n})]})}),(0,f.jsxs)("div",{className:"".concat(u.pp[n].info," card-body py-1"),children:[(0,f.jsxs)("div",{className:"d-flex align-items-center card-text mb-1",children:[(0,f.jsxs)("b",{className:"fs-5-4",children:[u.wA," ",r.price]}),(0,f.jsxs)("span",{className:"fs-6-3",children:[" ",u.aZ]}),(0,f.jsx)(p.Z,{offerId:m,bookmarkType:u.R_.MAIN})]}),(0,f.jsx)("div",{className:"card-text mb-1",children:(0,f.jsx)(h.Z,{rating:r.rating,ratingType:u.bH.CARD})}),(0,f.jsx)("h6",{className:"card-title mb-1",children:(0,f.jsx)(s.OL,{className:"text-dark text-decoration-none app-hover-opacity app-trasition app-subtitle fs-5-3",to:y,children:r.title})}),(0,f.jsx)("p",{className:"card-text",children:(0,f.jsx)("small",{className:"text-muted fs-6-2",children:r.type})})]})]})})})};y.propTypes={offer:m.ce,offerType:a().string.isRequired,handleOfferCardMouseEnter:a().func,handleOfferCardMouseLeave:a().func};var b=y,g=(0,t.forwardRef)((function(e,r){var n=e.offers,t=e.offerType,i=e.handleOfferCardMouseEnter,a=void 0===i?function(){return!1}:i,o=e.handleOfferCardMouseLeave,s=void 0===o?function(){return!1}:o;return(0,f.jsx)("ul",{ref:r,className:"row row-cols-1 g-0 justify-content-around list-unstyled",children:n.map((function(e){return(0,f.jsx)(b,{offer:e,offerType:t,handleOfferCardMouseEnter:function(){return a(e)},handleOfferCardMouseLeave:s},e.id)}))})}));g.propTypes={offers:m.N0,offerType:a().string.isRequired,handleOfferCardMouseEnter:a().func,handleOfferCardMouseLeave:a().func};var O=g},336:function(e,r,n){n.d(r,{Z:function(){return w}});var t=n(5243),i=n.n(t),a=n(8367),o=n.n(a),s=n(8446),c=n.n(s),u=n(7294),f=n(3942),l=n(1052),d=n(8154),p=n(2900),h=n(1265),v=n(8404),m=n(3886),y=n(6948);function b(e,r){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=function(e,r){if(e){if("string"==typeof e)return g(e,r);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?g(e,r):void 0}}(e))||r&&e&&"number"==typeof e.length){n&&(e=n);var t=0,i=function(){};return{s:i,n:function(){return t>=e.length?{done:!0}:{done:!1,value:e[t++]}},e:function(e){throw e},f:i}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,o=!0,s=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return o=e.done,e},e:function(e){s=!0,a=e},f:function(){try{o||null==n.return||n.return()}finally{if(s)throw a}}}}function g(e,r){(null==r||r>e.length)&&(r=e.length);for(var n=0,t=new Array(r);n<r;n++)t[n]=e[n];return t}var O=n(5893);function R(e,r){return function(e){if(Array.isArray(e))return e}(e)||function(e,r){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var t,i,a=[],o=!0,s=!1;try{for(n=n.call(e);!(o=(t=n.next()).done)&&(a.push(t.value),!r||a.length!==r);o=!0);}catch(e){s=!0,i=e}finally{try{o||null==n.return||n.return()}finally{if(s)throw i}}return a}}(e,r)||function(e,r){if(e){if("string"==typeof e)return T(e,r);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?T(e,r):void 0}}(e,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function T(e,r){(null==r||r>e.length)&&(r=e.length);for(var n=0,t=new Array(r);n<r;n++)t[n]=e[n];return t}var j=i().icon(v.O8),k=i().icon(v.Zb),x=i().icon(v.WT),q=function(e){var r=e.offers,n=e.currentOffer,t=(0,d.Z)(),a=(0,l.Z)(r),s=(0,l.Z)(n),m=(0,f.v9)(p.zE,c()),g=(0,l.Z)(m),T=(0,f.v9)(h.Q3,c()),q=(0,l.Z)(T),w=(0,f.v9)(h.k4),I=(0,f.I0)(),A=function(e){var r=v.Mm,n=v.pY;return o()(e)||(r=[e.coordinates[0]-.2,e.coordinates[1]-.2],n=e.zoom),{center:r,zoom:n}}(m),E=A.center,N=A.zoom,L=(0,u.useRef)(null),S=(0,u.useRef)([]),D=R((0,u.useState)(E),2),C=D[0],M=D[1],Z=R((0,u.useState)(N),2),_=Z[0],P=Z[1];return(0,u.useEffect)((function(){return L.current=i().map(v.EG,{center:v.Mm,zoom:v.pY,marker:!0}),i().tileLayer(v.cZ,{attribution:v.Vq}).addTo(L.current),function(){S.current.length&&(S.current.forEach((function(e){e.off("click"),e.off("mouseover"),e.off("mouseout"),e.removeFrom(L.current)})),S.current=[])}}),[]),(0,u.useEffect)((function(){L.current.flyTo(C,_)}),[C,_]),(0,u.useEffect)((function(){o()(m)||c()(g,m)||(M(m.coordinates),P(m.zoom))}),[m,g]),(0,u.useEffect)((function(){c()(a,r)&&c()(s,n)||function(e){var r,n,t=e.map,a=e.markers,s=e.offers,c=e.currentOffer,u=e.activeOffer,f=e.icon,l=e.activeIcon,d=e.currentIcon,p=e.activePinId,m=e.setActivePinId,b=e.redirectToRoute,g=e.dispatch,O=function(e,r){return e&&e===r||p===r?l:f};a.current.length&&(a.current.forEach((function(e){e.off("click"),e.off("mouseover"),e.off("mouseout"),e.removeFrom(t.current)})),a.current=[]),s.length&&(r=!o()(u)&&u.id,s.forEach((function(e){var n,o,s,c,u,d=e.coordinates,p=e.id,R=i().marker(d,{icon:O(r,p)}).addTo(t.current).bindTooltip((o=(n=e).price,s=n.rating,c=n.title,u=n.type,"\n    <b>".concat(c,"</b><br />\n    <span>\n      ").concat(v.wA," ").concat(o," ").concat(v.aZ,"\n    </span>,\n    <span>").concat(u,'</span><br />\n    <span class="offer-card-rating rating justify-content-center">\n      <span class="offer-card-stars rating-stars">\n        <span style="width: ').concat((0,y.zU)(s),'%;" />\n        <span className="visually-hidden">\n          ').concat(v.gI.RATING,"\n        </span>\n      </span>\n    </span>\n  ")),v.YG);R._offerId=p,R.on("click",(function(){b("".concat(v.$w.OFFER,"?id=").concat(p))})),R.on("mouseover",(function(){R.setIcon(l).openTooltip(),g(m(p))})),R.on("mouseout",(function(){R.setIcon(f),g(m(h.Ns.PIN_ID))})),a.current.push(R)}))),o()(c)||(n=i().marker(c.coordinates,{icon:d}).addTo(t.current),a.current.push(n))}({map:L,markers:S,offers:r,currentOffer:n,activeOffer:T,icon:j,activeIcon:k,currentIcon:x,activePinId:w,setActivePinId:h.Y3,redirectToRoute:t,dispatch:I})}),[S,r,a,n,s,T,w,I,t]),(0,u.useEffect)((function(){!c()(q,T)&&S.current.length&&function(e){var r=e.icon,n=e.activeIcon,t=e.markers,i=e.activeOffer,a=e.prevActiveOffer;if(!o()(a)){var s,c=b(t.current);try{for(c.s();!(s=c.n()).done;){var u=s.value;if(u._offerId===a.id){u.setIcon(r),u._isActive=!1;break}}}catch(e){c.e(e)}finally{c.f()}}if(o()(i)){var f,l=b(t.current);try{for(l.s();!(f=l.n()).done;){var d=f.value;if(!0===d._isActive){d.setIcon(r),d._isActive=!1;break}}}catch(e){l.e(e)}finally{l.f()}}else{var p,h=b(t.current);try{for(h.s();!(p=h.n()).done;){var v=p.value;if(v._offerId===i.id){v.setIcon(n),v._isActive=!0;break}}}catch(e){h.e(e)}finally{h.f()}}}({icon:j,activeIcon:k,markers:S,activeOffer:T,prevActiveOffer:q})}),[S,T,q]),(0,O.jsx)("div",{id:v.EG,className:"d-flex bg-light text-center w-100 h-100"})};q.propTypes={offers:m.F9,currentOffer:(0,m.sN)(m.ce)};var w=q},4453:function(e,r,n){var t=n(5697),i=n.n(t),a=n(8404),o=n(6948),s=n(5893),c=function(e){var r=e.rating,n=e.ratingType,t=e.showValue,i=void 0!==t&&t;return(0,s.jsxs)("div",{className:"".concat(a.oQ[n].rating," rating"),children:[(0,s.jsxs)("div",{className:"".concat(a.oQ[n].stars," rating-stars"),children:[(0,s.jsx)("span",{style:{width:"".concat((0,o.zU)(r),"%")}}),(0,s.jsx)("span",{className:"visually-hidden",children:a.gI.RATING})]}),i&&(0,s.jsxs)("span",{className:"".concat(a.oQ[n].value),children:[" ",r]})]})};c.propTypes={rating:i().number.isRequired,ratingType:i().string.isRequired,showValue:i().bool},r.Z=c},4843:function(e,r,n){var t=n(7294),i=n(5697),a=n.n(i),o=n(8490),s=n.n(o),c=n(8195),u=n(8404),f=n(6948);function l(e,r){(null==r||r>e.length)&&(r=e.length);for(var n=0,t=new Array(r);n<r;n++)t[n]=e[n];return t}function d(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function p(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?d(Object(n),!0).forEach((function(r){h(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):d(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function h(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}r.Z=function(e){var r="useFetch",n={url:a().string,onRequest:a().func,onSuccess:a().func,onError:a().func};a().checkPropTypes(n,e,"prop",r);var i,o,d=e.url,h=e.onRequest,v=void 0===h?function(){return!1}:h,m=e.onSuccess,y=void 0===m?function(){return!1}:m,b=e.onError,g=void 0===b?function(){return!1}:b,O={url:d,data:[],headerLink:{},totalCount:"",status:u.Dk.IDLE},R=(0,t.useReducer)((function(e,n){switch(n.type){case u.T7.IDLE:return p({},O);case u.T7.START:return p(p({},O),{},{status:u.Dk.START,url:n.payload});case u.T7.LOADING:return p(p({},e),{},{status:u.Dk.LOADING});case u.T7.LOADED:return p(p({},e),{},{status:u.Dk.LOADED,data:n.payload.data,headerLink:n.payload.headerLink,totalCount:n.payload.totalCount});case u.T7.ERROR:return p(p({},e),{},{status:u.Dk.ERROR});default:(0,f.fe)(r)}}),O),T=(o=2,function(e){if(Array.isArray(e))return e}(i=R)||function(e,r){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var t,i,a=[],o=!0,s=!1;try{for(n=n.call(e);!(o=(t=n.next()).done)&&(a.push(t.value),!r||a.length!==r);o=!0);}catch(e){s=!0,i=e}finally{try{o||null==n.return||n.return()}finally{if(s)throw i}}return a}}(i,o)||function(e,r){if(e){if("string"==typeof e)return l(e,r);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?l(e,r):void 0}}(i,o)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),j=T[0],k=T[1],x=(0,t.useCallback)((function(e){k({type:u.T7.START,payload:e})}),[]);return(0,t.useEffect)((function(){j.url&&j.url.length&&(j.status===u.Dk.IDLE||j.status===u.Dk.START)&&(v(),k({type:u.T7.LOADING}),(0,c.wG)({onSuccess:function(e){var r=e.data,n=e.headers,t={data:r,headerLink:s()(n.link),totalCount:n[u.WM.X_TOTAL_COUNT]};y(t),k({type:u.T7.LOADED,payload:t})},onError:function(e){throw g(e),k({type:u.T7.ERROR,payload:e}),new Error(e)},requestTitle:r,url:j.url}))}),[d,j,v,y,g]),{state:j,fetchData:x,isError:j.status===u.Dk.ERROR,isLoaded:j.status===u.Dk.LOADED,isLoading:j.status===u.Dk.LOADING}}},7031:function(e,r,n){var t=n(7294),i=n(3942),a=n(1265);r.Z=function(){var e=(0,i.I0)();return{handleOfferCardMouseEnter:(0,t.useCallback)((function(r){e((0,a.QL)(r))}),[e]),handleOfferCardMouseLeave:(0,t.useCallback)((function(){e((0,a.QL)(a.Ns.ACTIVE_OFFER))}),[e])}}},1052:function(e,r,n){var t=n(7294);r.Z=function(e){var r=(0,t.useRef)();return(0,t.useEffect)((function(){r.current=e}),[e]),r.current}},8154:function(e,r,n){var t=n(7294),i=n(6974);r.Z=function(){var e=(0,i.s0)();return(0,t.useCallback)((function(r){e(r)}),[e])}},3886:function(e,r,n){n.d(r,{Y1:function(){return f},zP:function(){return u},Hp:function(){return a},sN:function(){return o},x6:function(){return l},ce:function(){return d},g_:function(){return h},F9:function(){return m},N0:function(){return p},SA:function(){return s},qd:function(){return g},zK:function(){return O}});var t=n(5697),i=n.n(t),a=i().arrayOf(i().oneOf([void 0])).isRequired,o=function(e){return i().oneOfType([e,i().oneOf([null]).isRequired])},s=i().oneOfType([i().func.isRequired,i().shape({current:i().any}).isRequired]),c=i().oneOfType([i().shape({}).isRequired,i().shape({coordinates:i().arrayOf(i().number).isRequired,id:i().string.isRequired,name:i().string.isRequired,zoom:i().number.isRequired}).isRequired]),u=i().arrayOf(c).isRequired,f={handleClose:i().func,isOpen:i().bool},l=i().number.isRequired,d=i().shape({bedrooms:i().number.isRequired,city:i().shape({id:i().string.isRequired,name:i().string.isRequired}).isRequired,coordinates:i().arrayOf(i().number).isRequired,id:l,image:i().string.isRequired,photos:i().arrayOf(i().string).isRequired,price:i().number.isRequired,rating:i().number.isRequired,title:i().string.isRequired,type:i().string.isRequired,wifi:i().bool.isRequired,zoom:i().number.isRequired}).isRequired,p=i().arrayOf(d).isRequired,h=o(i().instanceOf(Map).isRequired),v=i().shape({city:i().shape({id:i().string.isRequired}).isRequired,coordinates:i().arrayOf(i().number).isRequired,id:l,price:i().number.isRequired,rating:i().number.isRequired,title:i().string.isRequired,type:i().string.isRequired}).isRequired,m=i().arrayOf(v).isRequired,y=n(9599),b=n(2902),g=i().shape({avatar:i().string.isRequired,comment:i().string.isRequired,date:function(e,r,n){return(0,y.Z)((0,b.Z)(e[r]))?null:new Error("Invalid prop `".concat(r,"` supplied to `").concat(n,"`. Validation failed."))},id:i().number.isRequired,name:i().string.isRequired,offerId:i().number.isRequired,rating:i().number.isRequired,userId:i().number.isRequired}).isRequired,O=i().arrayOf(g).isRequired}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,