(self.webpackChunkapp_react=self.webpackChunkapp_react||[]).push([[250],{2389:function(e,r,t){"use strict";t.d(r,{Z:function(){return f}});var n=t(5697),o=t.n(n),a=t(8404),i=t(5893),s=function(e){var r=e.offerType;return(0,i.jsx)("li",{className:"".concat(a.pp[r].li," mb-3"),children:(0,i.jsx)("article",{className:"card border-light text-start",children:(0,i.jsxs)("div",{className:"".concat(a.pp[r].container," d-flex"),children:[(0,i.jsx)("div",{children:(0,i.jsx)("div",{className:"bg-secondary rounded placeholder",style:{width:"".concat(a.YS[r].width,"px"),height:"".concat(a.YS[r].height,"px")}})}),(0,i.jsxs)("div",{className:"".concat(a.pp[r].info," card-body py-1"),children:[(0,i.jsx)("div",{className:"card-text mb-1 placeholder-glow",children:(0,i.jsx)("span",{className:"col-5 bg-secondary fs-5-4 placeholder"})}),(0,i.jsx)("div",{className:"card-text mb-1 placeholder-glow",children:(0,i.jsx)("span",{className:"col-4 bg-secondary fs-5-4 placeholder"})}),(0,i.jsx)("h6",{className:"card-title mb-1 placeholder-glow",children:(0,i.jsx)("span",{className:"col-8 bg-secondary placeholder fs-5-3"})}),(0,i.jsx)("p",{className:"card-text placeholder-glow",children:(0,i.jsx)("small",{className:"col-4 bg-secondary fs-6-2 placeholder"})})]})]})})})};s.propTypes={offerType:o().string.isRequired};var c=s,u=t(3886),l=function(e){var r=e.offers,t=e.offerType;return(0,i.jsx)("ul",{className:"row row-cols-1 g-0 pt-1 px-3 justify-content-around list-unstyled","aria-hidden":"true",children:r.map((function(e,r){return(0,i.jsx)(c,{offerType:t},r)}))})};l.propTypes={offers:u.Hp,offerType:o().string.isRequired};var f=l},5211:function(e,r,t){"use strict";t.r(r),t.d(r,{default:function(){return be}});var n=t(7294),o=t(5697),a=t.n(o),i=t(6010),s=t(3942),c=t(2900),u=t(3886),l=t(6948),f=t(5893),d=function(e){var r=e.cities,t=(0,s.v9)(c.Gq),n=(0,s.v9)(c.AH),o=(0,s.I0)();return(0,f.jsx)("nav",{className:"py-3 border-bottom",children:(0,f.jsx)("ul",{className:"d-flex flex-wrap justify-content-evenly px-0 mb-0 list-unstyled",children:r.map((function(e){return(0,f.jsx)("li",{children:(0,f.jsx)("a",{className:(0,i.Z)("btn app-skewed-neg-15 fs-5-3",{"btn-primary":n===e.name},{"app-hover-opacity":n!==e.name}),href:(0,l.bZ)(e.id),onClick:function(r){return function(e,r){e.preventDefault(),r.id!==t&&o((0,c.WU)(r))}(r,e)},children:(0,f.jsx)("span",{children:e.name})})},e.id)}))})})};d.propTypes={cities:u.zP};var p=(0,n.memo)(d),v=t(8404),y=function(){var e=(0,l.x0)(v.QD);return(0,f.jsx)("nav",{className:"py-3 border-bottom","aria-hidden":"true",children:(0,f.jsx)("ul",{className:"d-flex flex-wrap justify-content-evenly px-0 mb-0 list-unstyled",children:e.map((function(e,r){return(0,f.jsx)("li",{className:"placeholder-glow",children:(0,f.jsx)("a",{className:(0,i.Z)("col-6 btn disabled placeholder fs-5-3\n                app-skewed-neg-15 cities-list-empty-btn",{"btn-primary":0===r,"btn-secondary":0!==r}),tabIndex:"-1"})},r)}))})})},h=function(e){var r=e.cities,t=e.isCitiesError,n=e.isCitiesLoaded;if(t)(0,l.V0)();else if(!n)return(0,f.jsx)(y,{});return(0,f.jsx)(p,{cities:r})};h.propTypes={cities:u.zP,isCitiesError:a().bool.isRequired,isCitiesLoaded:a().bool.isRequired};var m=(0,n.memo)(h),b=t(8367),g=t.n(b),x=t(336),O=t(1052),j=t(8490),L=t.n(j),T=t(8195);function w(e,r){(null==r||r>e.length)&&(r=e.length);for(var t=0,n=new Array(r);t<r;t++)n[t]=e[t];return n}function C(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function E(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?C(Object(t),!0).forEach((function(r){S(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):C(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function S(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}var N=function(e){var r="useFetchCached",t={url:a().string,onRequest:a().func,onSuccess:a().func,onError:a().func};a().checkPropTypes(t,e,"prop",r);var o,i,s=e.url,c=e.onRequest,u=void 0===c?function(){return!1}:c,f=e.onSuccess,d=void 0===f?function(){return!1}:f,p=e.onError,y=void 0===p?function(){return!1}:p,h=(0,n.useRef)({}),m={url:s,data:[],headerLink:{},totalCount:"",status:v.Dk.IDLE},b=(0,n.useReducer)((function(e,t){switch(t.type){case v.T7.IDLE:return E({},m);case v.T7.START:return E(E({},m),{},{status:v.Dk.START,url:t.payload});case v.T7.LOADING:return E(E({},e),{},{status:v.Dk.LOADING});case v.T7.LOADED:return E(E({},e),{},{status:v.Dk.LOADED,data:t.payload.data,headerLink:t.payload.headerLink,totalCount:t.payload.totalCount});case v.T7.ERROR:return E(E({},e),{},{status:v.Dk.ERROR});default:(0,l.fe)(r)}}),m),g=(i=2,function(e){if(Array.isArray(e))return e}(o=b)||function(e,r){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var n,o,a=[],i=!0,s=!1;try{for(t=t.call(e);!(i=(n=t.next()).done)&&(a.push(n.value),!r||a.length!==r);i=!0);}catch(e){s=!0,o=e}finally{try{i||null==t.return||t.return()}finally{if(s)throw o}}return a}}(o,i)||function(e,r){if(e){if("string"==typeof e)return w(e,r);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?w(e,r):void 0}}(o,i)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),x=g[0],O=g[1],j=(0,n.useCallback)((function(e){O({type:v.T7.START,payload:e})}),[]);return(0,n.useEffect)((function(){var e=function(e){var r=e.data,t=e.headers,n={data:r,headerLink:L()(t.link),totalCount:t[v.WM.X_TOTAL_COUNT]};d(n),h.current[x.url]=n,O({type:v.T7.LOADED,payload:n})},t=function(e){throw y(e),O({type:v.T7.ERROR,payload:e}),new Error(e)};x.url&&x.url.length&&(x.status===v.Dk.IDLE||x.status===v.Dk.START)&&function(){if(u(),O({type:v.T7.LOADING}),h.current[x.url]){var n=h.current[x.url];d(n),O({type:v.T7.LOADED,payload:n})}else(0,T.wG)({onSuccess:e,onError:t,requestTitle:r,url:x.url})}()}),[s,x,u,d,y]),{cache:h,state:x,fetchData:j,isError:x.status===v.Dk.ERROR,isLoaded:x.status===v.Dk.LOADED,isLoading:x.status===v.Dk.LOADING}},R=t(620);function A(e,r){(null==r||r>e.length)&&(r=e.length);for(var t=0,n=new Array(r);t<r;t++)n[t]=e[t];return n}var D=function(){var e,r,t=(0,s.v9)(c.Gq),o=(e=(0,n.useState)([]),r=2,function(e){if(Array.isArray(e))return e}(e)||function(e,r){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var n,o,a=[],i=!0,s=!1;try{for(t=t.call(e);!(i=(n=t.next()).done)&&(a.push(n.value),!r||a.length!==r);i=!0);}catch(e){s=!0,o=e}finally{try{i||null==t.return||t.return()}finally{if(s)throw o}}return a}}(e,r)||function(e,r){if(e){if("string"==typeof e)return A(e,r);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?A(e,r):void 0}}(e,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),i=o[0],u=o[1],d=(0,l.FR)(t),p=(0,O.Z)(d),v=function(e){var r={offersMapURL:a().string.isRequired,setOffersMap:a().func.isRequired};a().checkPropTypes(r,e,"prop","useFetchOffersMap");var t=e.offersMapURL,n=e.setOffersMap,o=N({url:t,onSuccess:function(e){n(e.data.map((function(e){return(0,R.w)(e)})))}});return{cacheoffersMap:o.cache,isOffersMapLoaded:o.isLoaded,fetchMapOffers:o.fetchData}}({offersMapURL:d,setOffersMap:u}),y=v.cacheoffersMap,h=v.isOffersMapLoaded,m=v.fetchMapOffers;return(0,n.useEffect)((function(){if(h&&p!==d){var e=y.current[d];g()(e)?m(d):u(e.data)}}),[y,m,h,d,p]),(0,f.jsx)(x.Z,{offers:i})},k=t(5236),I=t(1296),P=t.n(I);var q=t(4843),M=t(3212),_=function(e){var r,t,o,c,u,l,d,p,v,y,h=e.Content,m=e.containerClass,b=e.headerLinkNext,g=function(e){var r={setScrolledItems:a().func.isRequired};a().checkPropTypes(r,e,"prop","useFetchList");var t=e.setScrolledItems,n=(0,s.I0)();return{fetchData:(0,q.Z)({onRequest:function(){n((0,M.wt)(!0))},onSuccess:function(e){e.data=e.data.map((function(e){return(0,R.w)(e)})),t(e),n((0,M.wt)(!1))},onError:function(){n((0,M.wt)(!1))}}).fetchData}}({setScrolledItems:e.setScrolledItems}).fetchData,x=(r=(0,n.useCallback)((function(){b.length&&g(b)}),[b,g]),o=(0,n.useMemo)((function(){var e,r,n,o;return{offset:null!=(e=null==t?void 0:t.offset)?e:0,debounce:null!=(r=null==t?void 0:t.debounce)?r:200,debounceOptions:null!=(n=null==t?void 0:t.debounceOptions)?n:{leading:!0},triggerOnNoScroll:null!=(o=null==t?void 0:t.triggerOnNoScroll)&&o}}),[null==t?void 0:t.offset,null==t?void 0:t.debounce,null==t?void 0:t.debounceOptions,null==t?void 0:t.triggerOnNoScroll]),c=o.offset,u=o.triggerOnNoScroll,l=o.debounce,d=o.debounceOptions,p=(0,n.useMemo)((function(){return function(e,r,t){return e?P()(r,e,t):r}(l,r,d)}),[l,r]),v=(0,n.useRef)(null),y=(0,n.useCallback)((function(){if(null!=v.current){var e=v.current,r=Math.round(e.scrollTop+e.clientHeight);Math.round(e.scrollHeight-c)<=r&&p()}else{var t=document.scrollingElement||document.documentElement,n=Math.round(t.scrollTop+window.innerHeight);Math.round(t.scrollHeight-c)<=n&&p()}}),[c,r,v.current]),(0,n.useEffect)((function(){var e=v.current;return null!=e?e.addEventListener("scroll",y):window.addEventListener("scroll",y),u&&y(),function(){null!=e?e.removeEventListener("scroll",y):window.removeEventListener("scroll",y)}}),[y,l]),v);return(0,f.jsx)("div",{className:(0,i.Z)("overflow-auto",m),ref:x,children:(0,f.jsx)(h,{})})};_.propTypes={Content:a().elementType.isRequired,containerClass:a().string,headerLinkNext:a().string.isRequired,setScrolledItems:a().func.isRequired};var Z=_,F=t(7031),U=t(2279),H=t(5269),$=function(){var e=(0,s.v9)(c.Z6),r=v.wB[e],t=(0,s.I0)();return(0,f.jsxs)("div",{className:"d-flex",children:[(0,f.jsx)("b",{children:v.pr}),(0,f.jsx)(U.Z,{bsPrefix:"d-flex align-items-center mx-2 px-0 py-0 nav-link link-dark app-dropdown-toggle-sm app-hover-opacity app-trasition",id:"sorting-options-dropdown",title:(0,f.jsx)(f.Fragment,{children:r}),children:Object.keys(v.wB).map((function(r){return(0,f.jsx)(U.Z.Item,{as:H.Z,active:e===r,onClick:function(){var n;e!==(n=r)&&t((0,c.Wi)(n))},children:(0,f.jsx)(f.Fragment,{children:v.wB[r]})},r)}))})]})},G=function(e){var r=e.scrollContainer,t=(0,s.v9)(c.u1),n=(0,s.I0)();return(0,f.jsx)("div",{className:"ms-auto btn-group","aria-label":v.DQ,role:"group",children:Object.values(v.$H).map((function(e){return(0,f.jsx)("button",{className:(0,i.Z)("btn btn-light places-list-btn places-list-btn-".concat(e),{active:t===e}),type:"button",title:e,onClick:function(){var o;t!==(o=e)&&((0,l.D8)(r),n((0,c.aq)(o)))}},e)}))})};G.propTypes={scrollContainer:u.SA};var W=G,Y=function(e){var r=e.scrollContainer;return(0,f.jsxs)("form",{className:"d-flex pb-1 fs-6-3",children:[(0,f.jsx)($,{}),(0,f.jsx)(W,{scrollContainer:r})]})};Y.propTypes={scrollContainer:u.SA};var B=Y,z=function(e){var r=e.offersListType,t=(0,n.useContext)(ce),o=(0,n.useContext)(ue),a=(0,n.useContext)(le),i=(0,F.Z)(),s=i.handleOfferCardMouseEnter,c=i.handleOfferCardMouseLeave,u=(0,l.LF)(t.headerLink),d=t.activeCityName,p=t.totalCount,y=t.data,h=(0,n.useCallback)((function(e){a({type:v.T7.SET_SCROLLED_DATA,payload:{data:t.data.concat(e.data),headerLink:e.headerLink}})}),[t.data,a]);return(0,f.jsxs)(f.Fragment,{children:[(0,f.jsx)("h2",{className:"px-5 my-3 app-subtitle",children:y.length?"".concat(p).concat(v.HH.PLACES_TO_STAY_IN).concat(d):"".concat(v.HH.NO_PLACES_TO_STAY_IN).concat(d)}),y.length?(0,f.jsxs)(f.Fragment,{children:[(0,f.jsx)("div",{className:"mb-2 px-3",children:(0,f.jsx)(B,{scrollContainer:o})}),(0,f.jsx)(Z,{Content:function(){return(0,f.jsx)(k.Z,{ref:o,offers:y,offerType:v.fo[r],handleOfferCardMouseEnter:s,handleOfferCardMouseLeave:c})},containerClass:"pt-2 ps-2",headerLinkNext:u,setScrolledItems:h})]}):null]})};z.propTypes={offersListType:a().string.isRequired};var Q=z,V=t(2389),X=function(e){var r=e.offersListType,t=(0,l.x0)(v.tn);return(0,f.jsxs)("div",{className:"mt-1 text-center placeholder-glow","aria-hidden":"true",children:[(0,f.jsx)("h2",{className:"col-6 my-3 bg-secondary app-subtitle placeholder"}),(0,f.jsx)("div",{className:"col-11 mt-1 mb-3 bg-secondary fs-5-2 app-subtitle placeholder"}),(0,f.jsx)(V.Z,{offers:t,offerType:v.fo[r]})]})};X.propTypes={offersListType:a().string.isRequired};var J=X,K=function(e){var r=e.isOffersError,t=e.isOffersLoaded,n=(0,s.v9)(c.u1)||c.Ns.OFFERS_LIST_TYPE;if(r)(0,l.V0)();else if(!t)return(0,f.jsx)(J,{offersListType:n});return(0,f.jsx)(Q,{offersListType:n})};K.propTypes={isOffersError:a().bool.isRequired,isOffersLoaded:a().bool.isRequired};var ee=K,re=function(e){var r=e.isOffersError,t=e.isOffersLoaded;return(0,f.jsx)(f.Fragment,{children:(0,f.jsxs)("div",{className:"row mx-0",children:[(0,f.jsx)("h1",{className:"visually-hidden",children:v.X8.MAIN_PAGE_PLACES}),(0,f.jsx)("section",{className:"col-6 g-0 d-flex flex-column text-center main-places-container",children:(0,f.jsx)(ee,{isOffersError:r,isOffersLoaded:t})}),(0,f.jsx)("section",{className:"col-6 g-0 main-map-container",children:(0,f.jsx)(D,{})})]})})};re.propTypes={isOffersError:a().bool.isRequired,isOffersLoaded:a().bool.isRequired};var te=(0,n.memo)(re);function ne(e,r){(null==r||r>e.length)&&(r=e.length);for(var t=0,n=new Array(r);t<r;t++)n[t]=e[t];return n}function oe(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function ae(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?oe(Object(t),!0).forEach((function(r){ie(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):oe(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function ie(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}var se=function(){var e,r,t=(0,s.v9)(c.AH),o=(e=(0,n.useReducer)((function(e,r){switch(r.type){case v.T7.SET_DATA:return ae(ae({},e),{},{activeCityName:r.payload.activeCityName,data:r.payload.data,headerLink:r.payload.headerLink,totalCount:r.payload.totalCount});case v.T7.SET_SCROLLED_DATA:return ae(ae({},e),{},{data:r.payload.data,headerLink:r.payload.headerLink});default:(0,l.fe)("useOffersReducer")}}),{activeCityName:"",data:[],headerLink:{},totalCount:""}),r=2,function(e){if(Array.isArray(e))return e}(e)||function(e,r){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var n,o,a=[],i=!0,s=!1;try{for(t=t.call(e);!(i=(n=t.next()).done)&&(a.push(n.value),!r||a.length!==r);i=!0);}catch(e){s=!0,o=e}finally{try{i||null==t.return||t.return()}finally{if(s)throw o}}return a}}(e,r)||function(e,r){if(e){if("string"==typeof e)return ne(e,r);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?ne(e,r):void 0}}(e,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),a=o[0],i=o[1],u=(0,n.useCallback)((function(e){i({type:v.T7.SET_DATA,payload:{activeCityName:t,data:e.data,headerLink:e.headerLink,totalCount:e.totalCount}})}),[t]);return{dispatch:i,offersReducer:a,setOffersData:u}},ce=(0,n.createContext)(null),ue=(0,n.createContext)(null),le=(0,n.createContext)(null),fe=function(e){var r=e.setIsLoading,t=(0,s.v9)(c.Gq),o=(0,s.v9)(c.Z6),i=(0,n.useRef)(null),u=(0,l.MZ)(t,o),d=(0,O.Z)(u),p=se(),v=p.dispatch,y=p.offersReducer,h=p.setOffersData,m=function(e){var r={offersURL:a().string.isRequired,setOffersData:a().func.isRequired,setIsLoading:a().func.isRequired};a().checkPropTypes(r,e,"prop","useFetchOffers");var t=e.offersURL,n=e.setOffersData,o=e.setIsLoading,i=N({url:t,onSuccess:function(e){e.data=e.data.map((function(e){return(0,R.w)(e)})),n(e),o(!1)},onError:function(){o(!1)}});return{cacheoffers:i.cache,isOffersError:i.isError,isOffersLoaded:i.isLoaded,fetchOffers:i.fetchData}}({offersURL:u,setOffersData:h,setIsLoading:r}),b=m.cacheoffers,x=m.isOffersError,j=m.isOffersLoaded,L=m.fetchOffers;return(0,n.useEffect)((function(){if(j&&d!==u){(0,l.D8)(i);var e=b.current[u];g()(e)?(r(!0),L(u)):h(e)}}),[b,L,h,j,u,d,r]),(0,f.jsx)(ce.Provider,{value:y,children:(0,f.jsx)(ue.Provider,{value:i,children:(0,f.jsx)(le.Provider,{value:v,children:(0,f.jsx)(te,{isOffersError:x,isOffersLoaded:j})})})})};fe.propTypes={setIsLoading:a().func.isRequired};var de=fe,pe=t(3311),ve=t.n(pe),ye=t(6974);function he(e,r){(null==r||r>e.length)&&(r=e.length);for(var t=0,n=new Array(r);t<r;t++)n[t]=e[t];return n}var me=function(e){var r,t,o=e.setIsLoading,i=(r=(0,n.useState)([]),t=2,function(e){if(Array.isArray(e))return e}(r)||function(e,r){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var n,o,a=[],i=!0,s=!1;try{for(t=t.call(e);!(i=(n=t.next()).done)&&(a.push(n.value),!r||a.length!==r);i=!0);}catch(e){s=!0,o=e}finally{try{i||null==t.return||t.return()}finally{if(s)throw o}}return a}}(r,t)||function(e,r){if(e){if("string"==typeof e)return he(e,r);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?he(e,r):void 0}}(r,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),u=i[0],l=function(e){var r={setCities:a().func.isRequired,setIsLoading:a().func.isRequired};a().checkPropTypes(r,e,"prop","useFetchCities");var t=e.setCities,n=e.setIsLoading,o=(0,s.I0)(),i=(0,ye.TH)(),u=new URLSearchParams(i.search).get("city.id"),l=(0,s.v9)(c.Gq),f=(0,q.Z)({url:"".concat(v.s6.BASE_URL).concat(v.s6.CITIES),onRequest:function(){n(!0)},onSuccess:function(e){var r=e.data;t(r);var n=u?ve()(r,["id",u])||r[0]:ve()(r,["id",l])||r[0];o((0,c.WU)(n))},onError:function(){n(!1)}});return{isCitiesError:f.isError,isCitiesLoaded:f.isLoaded}}({setCities:i[1],setIsLoading:o}),d=l.isCitiesError,p=l.isCitiesLoaded;return(0,f.jsxs)(f.Fragment,{children:[(0,f.jsx)(m,{cities:u,isCitiesError:d,isCitiesLoaded:p}),p&&(0,f.jsx)(de,{setIsLoading:o})]})};me.propTypes={setIsLoading:a().func.isRequired};var be=me},1296:function(e,r,t){var n=/^\s+|\s+$/g,o=/^[-+]0x[0-9a-f]+$/i,a=/^0b[01]+$/i,i=/^0o[0-7]+$/i,s=parseInt,c="object"==typeof t.g&&t.g&&t.g.Object===Object&&t.g,u="object"==typeof self&&self&&self.Object===Object&&self,l=c||u||Function("return this")(),f=Object.prototype.toString,d=Math.max,p=Math.min,v=function(){return l.Date.now()};function y(e){var r=typeof e;return!!e&&("object"==r||"function"==r)}function h(e){if("number"==typeof e)return e;if(function(e){return"symbol"==typeof e||function(e){return!!e&&"object"==typeof e}(e)&&"[object Symbol]"==f.call(e)}(e))return NaN;if(y(e)){var r="function"==typeof e.valueOf?e.valueOf():e;e=y(r)?r+"":r}if("string"!=typeof e)return 0===e?e:+e;e=e.replace(n,"");var t=a.test(e);return t||i.test(e)?s(e.slice(2),t?2:8):o.test(e)?NaN:+e}e.exports=function(e,r,t){var n,o,a,i,s,c,u=0,l=!1,f=!1,m=!0;if("function"!=typeof e)throw new TypeError("Expected a function");function b(r){var t=n,a=o;return n=o=void 0,u=r,i=e.apply(a,t)}function g(e){return u=e,s=setTimeout(O,r),l?b(e):i}function x(e){var t=e-c;return void 0===c||t>=r||t<0||f&&e-u>=a}function O(){var e=v();if(x(e))return j(e);s=setTimeout(O,function(e){var t=r-(e-c);return f?p(t,a-(e-u)):t}(e))}function j(e){return s=void 0,m&&n?b(e):(n=o=void 0,i)}function L(){var e=v(),t=x(e);if(n=arguments,o=this,c=e,t){if(void 0===s)return g(c);if(f)return s=setTimeout(O,r),b(c)}return void 0===s&&(s=setTimeout(O,r)),i}return r=h(r)||0,y(t)&&(l=!!t.leading,a=(f="maxWait"in t)?d(h(t.maxWait)||0,r):a,m="trailing"in t?!!t.trailing:m),L.cancel=function(){void 0!==s&&clearTimeout(s),u=0,n=c=o=s=void 0},L.flush=function(){return void 0===s?i:j(v())},L}},1848:function(e){e.exports=function(e,r,t,n){for(var o=e.length,a=t+(n?1:-1);n?a--:++a<o;)if(r(e[a],a,e))return a;return-1}},4107:function(e,r,t){var n=t(7990),o=/^\s+/;e.exports=function(e){return e?e.slice(0,n(e)+1).replace(o,""):e}},7740:function(e,r,t){var n=t(7206),o=t(8612),a=t(3674);e.exports=function(e){return function(r,t,i){var s=Object(r);if(!o(r)){var c=n(t,3);r=a(r),t=function(e){return c(s[e],e,s)}}var u=e(r,t,i);return u>-1?s[c?r[u]:u]:void 0}}},7990:function(e){var r=/\s/;e.exports=function(e){for(var t=e.length;t--&&r.test(e.charAt(t)););return t}},3311:function(e,r,t){var n=t(7740)(t(998));e.exports=n},998:function(e,r,t){var n=t(1848),o=t(7206),a=t(554),i=Math.max;e.exports=function(e,r,t){var s=null==e?0:e.length;if(!s)return-1;var c=null==t?0:a(t);return c<0&&(c=i(s+c,0)),n(e,o(r,3),c)}},8601:function(e,r,t){var n=t(4841);e.exports=function(e){return e?Infinity===(e=n(e))||e===-1/0?17976931348623157e292*(e<0?-1:1):e==e?e:0:0===e?e:0}},554:function(e,r,t){var n=t(8601);e.exports=function(e){var r=n(e),t=r%1;return r==r?t?r-t:r:0}},4841:function(e,r,t){var n=t(4107),o=t(3218),a=t(3448),i=/^[-+]0x[0-9a-f]+$/i,s=/^0b[01]+$/i,c=/^0o[0-7]+$/i,u=parseInt;e.exports=function(e){if("number"==typeof e)return e;if(a(e))return NaN;if(o(e)){var r="function"==typeof e.valueOf?e.valueOf():e;e=o(r)?r+"":r}if("string"!=typeof e)return 0===e?e:+e;e=n(e);var t=s.test(e);return t||c.test(e)?u(e.slice(2),t?2:8):i.test(e)?NaN:+e}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,