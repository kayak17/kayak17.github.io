"use strict";(self.webpackChunkapp_react=self.webpackChunkapp_react||[]).push([[456],{5004:function(e,r,t){var n=t(6010),s=t(5697),a=t.n(s),i=t(6968),o=t(5893),l=function(e){var r=e.additionalClass,t=e.isLoading,s=e.title;return(0,o.jsxs)("button",{className:(0,n.Z)("btn btn-primary",r),disabled:t,type:"submit",children:[t&&(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(i.Z,{as:"span",animation:"border",size:"sm",role:"status","aria-hidden":"true"})," "]}),s]})};l.propTypes={additionalClass:a().string.isRequired,isLoading:a().bool.isRequired,title:a().string.isRequired},r.Z=l},9139:function(e,r,t){var n=t(6010),s=t(5697),a=t.n(s),i=t(7951),o=t(8404),l=t(5893),c=function(e){var r=e.alertClass,t=e.errorMsg;return(0,l.jsx)(i.Z,{alertClass:(0,n.Z)(r),alertType:o.vB.DANGER,children:t})};c.propTypes={alertClass:a().string,errorMsg:a().string.isRequired},r.Z=c},7951:function(e,r,t){var n=t(5697),s=t.n(n),a=t(8404),i=t(5893),o=function(e){var r=e.alertClass,t=void 0===r?"":r,n=e.alertType,s=void 0===n?a.vB.INFO:n,o=e.children,l=void 0===o?null:o,c=e.containerClass,u=void 0===c?"":c;return(0,i.jsx)("div",{className:"app-form-group form-group ".concat(u),children:(0,i.jsx)("div",{className:"alert alert-".concat(s," text-center ").concat(t),role:"alert",children:l})})};o.propTypes={alertClass:s().string,alertType:s().string,children:s().oneOfType([s().element,s().string]),containerClass:s().string},r.Z=o},1302:function(e,r,t){var n=t(5893);function s(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function a(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}r.Z=function(e){return(0,n.jsx)("div",function(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?s(Object(t),!0).forEach((function(r){a(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}({className:"app-form-control-error"},e))}},9792:function(e,r,t){var n=t(5697),s=t.n(n),a=t(4649),i=t(1302),o=t(5893),l=function(e){var r=e.autoComplete,t=void 0===r?"":r,n=e.children,s=void 0===n?null:n,l=e.component,c=void 0===l?"":l,u=e.containerClass,f=void 0===u?"":u,d=e.fieldClass,p=void 0===d?"":d,m=e.fieldId,h=e.fieldName,v=e.fieldType,y=e.labelTitle,b=e.onFocus,g=void 0===b?function(){return!1}:b,j=e.placeholder,x=void 0===j?"":j;return(0,o.jsxs)("div",{className:"app-form-group form-group ".concat(f),children:[(0,o.jsx)("label",{className:"visually-hidden",htmlFor:h,children:y}),(0,o.jsx)(a.gN,{className:"app-form-control form-control ".concat(p),autoComplete:t,component:c,id:m,name:h,placeholder:x,type:v,onFocus:g,children:s}),(0,o.jsx)(a.Bc,{name:h,component:i.Z})]})};l.propTypes={autoComplete:s().string,children:s().element,component:s().oneOfType([s().elementType,s().string]),containerClass:s().string,fieldClass:s().string,fieldId:s().string.isRequired,fieldName:s().string.isRequired,fieldType:s().string.isRequired,labelTitle:s().string.isRequired,onFocus:s().func,placeholder:s().string},r.Z=l},9698:function(e,r,t){t.r(r),t.d(r,{default:function(){return Ee}});var n=t(8367),s=t.n(n),a=t(7294),i=t(6974),o=t(5697),l=t.n(o),c=t(336),u=t(8404),f=t(6948),d=t(5893),p=function(e){var r=e.features,t=r.bedrooms,n=r.type;return(0,d.jsxs)("ul",{className:"d-flex align-items-center justify-content-center list-unstyled property-features",children:[(0,d.jsx)("li",{className:"property-feature property-feature-entire",children:(0,f.fm)(n)}),(0,d.jsx)("li",{className:"property-feature property-feature-bedrooms",children:"".concat(t," ").concat(u.HH.BEDROOMS)})]})};p.propTypes=l().shape({bedrooms:l().number.isRequired,type:l().string.isRequired}).isRequired;var m=p,h=function(e){var r=e.offerPhotos,t=e.offerType;return(0,d.jsx)("div",{className:"d-flex flex-wrap justify-content-between mb-4 property-gallery",children:r.map((function(e){return(0,d.jsx)("div",{children:(0,d.jsx)("img",{className:"rounded",alt:u.HH.PLACE_IMAGE,width:u.YS[t].width,height:u.YS[t].height,src:e})},e)}))})};h.propTypes={offerPhotos:l().arrayOf(l().string).isRequired,offerType:l().string.isRequired};var v=h,y=t(6398),b=t(4453),g=t(3886),j=function(e){var r=e.offer,t=e.offerType;return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsx)(v,{offerPhotos:r.photos,offerType:t}),(0,d.jsxs)("div",{className:"mb-3",children:[(0,d.jsxs)("div",{className:"position-relative d-flex align-items-center justify-content-center mb-3",children:[(0,d.jsxs)("b",{className:"position-relative fs-2 fst-italic property-price-value",children:[u.wA," ",r.price," "]}),(0,d.jsxs)("span",{className:"fs-5 fst-italic",children:[" ",u.pB]}),(0,d.jsx)(y.Z,{offerId:r.id,bookmarkType:u.R_[t]})]}),(0,d.jsx)("h1",{className:"mb-3 fs-1 app-title",children:r.title}),(0,d.jsx)(b.Z,{rating:r.rating,ratingType:u.bH[t],showValue:!0}),(0,d.jsx)(m,{features:r.features}),r.wifi&&(0,d.jsx)("div",{className:"mb-3",children:(0,d.jsx)("span",{className:"badge bg-primary fs-5-4 fw-bold app-skewed-neg-15 property-mark",children:u.HH.FREE_WI_FI})})]})]})};j.propTypes={offer:g.ce,offerType:l().string.isRequired};var x=j,w=t(5236),R=t(7031),T=function(e){var r=e.offers,t=e.offerType,n=(0,R.Z)(),s=n.handleOfferCardMouseEnter,a=n.handleOfferCardMouseLeave;return(0,d.jsxs)("section",{children:[(0,d.jsx)("h2",{className:"mt-4 mb-4 text-center app-subtitle",children:u.s9.PLACES_NEARBY}),(0,d.jsx)("div",{className:"pt-2 ms-auto me-auto property-offers-nearby",children:(0,d.jsx)(w.Z,{offers:r,offerType:t,handleOfferCardMouseEnter:s,handleOfferCardMouseLeave:a})})]})};T.propTypes={offers:g.N0,offerType:l().string.isRequired};var N=T,O=function(e){var r=e.offer,t=e.offerType,n=e.offersNearby,s=e.isCurrentOfferLoaded,a=e.isOffersNearbyLoaded,i=e.PropertyReviewsWrapper,o=a&&Boolean(n.length);return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsxs)("section",{className:"mt-4 ms-auto me-auto mb-3 text-center property-container",children:[(0,d.jsx)(x,{offer:r,offerType:t}),(0,d.jsx)(i,{}),o&&(0,d.jsx)(N,{offers:n,offerType:t})]}),s&&o&&(0,d.jsx)("section",{className:"mb-5 property-map-container",children:(0,d.jsx)(c.Z,{currentOffer:r,offers:n})})]})};O.propTypes={offer:g.ce,offerType:l().string.isRequired,offersNearby:g.N0,isCurrentOfferLoaded:l().bool.isRequired,isOffersNearbyLoaded:l().bool.isRequired,PropertyReviewsWrapper:l().elementType.isRequired};var C=O,S=function(){return(0,d.jsxs)("ul",{className:"d-flex align-items-center justify-content-center list-unstyled property-features placeholder-glow",children:[(0,d.jsx)("li",{className:"col-1 property-feature placeholder"}),(0,d.jsx)("li",{className:"col-1 property-feature placeholder"})]})},I=function(e){var r=e.offerType,t=(0,f.x0)(u.lt);return(0,d.jsx)("div",{className:"d-flex flex-wrap justify-content-between mb-4 property-gallery",children:t.map((function(e,t){return(0,d.jsx)("div",{className:"rounded placeholder",style:{width:"".concat(u.YS[r].width,"px"),height:"".concat(u.YS[r].height,"px")}},t)}))})};I.propTypes={offerType:l().string.isRequired};var E=I,L=function(e){var r=e.ratingType,t=e.showValue,n=void 0!==t&&t;return(0,d.jsxs)("div",{className:"".concat(u.oQ[r].rating," rating"),children:[(0,d.jsx)("div",{className:"".concat(u.oQ[r].stars," rating-stars")}),n&&(0,d.jsx)("span",{className:"".concat(u.oQ[r].value," bg-light placeholder"),children:"      "})]})};L.propTypes={ratingType:l().string.isRequired,showValue:l().bool};var q=L,A=function(e){var r=e.offerType;return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsx)(E,{offerType:r}),(0,d.jsxs)("div",{className:"mt-4 mb-3 py-2",children:[(0,d.jsx)("div",{className:"d-flex align-items-center justify-content-center mb-3",children:(0,d.jsx)("b",{className:"col-2 fs-2 placeholder"})}),(0,d.jsx)("h1",{className:"col-8 mt-3 mb-3 fs-1 app-title placeholder"}),(0,d.jsx)(q,{ratingType:u.bH.ROOM,showValue:!0}),(0,d.jsx)("div",{className:"mt-3",children:(0,d.jsx)(S,{})}),(0,d.jsx)("div",{className:"mt-3 mb-3 py-1",children:(0,d.jsx)("span",{className:"col-3 btn bg-primary fs-5-4 fw-bold disabled app-skewed-neg-15 property-mark property-mark-placeholder placeholder"})})]})]})};A.propTypes={offerType:l().string.isRequired};var k=A,P=function(e){var r=e.offerType;return(0,d.jsx)("section",{className:"mt-4 ms-auto me-auto mb-3 text-center property-container placeholder-glow",children:(0,d.jsx)(k,{offerType:r})})};P.propTypes={offerType:l().string.isRequired};var _=P,D=function(e){var r=e.review;return(0,d.jsxs)("li",{className:"d-flex mb-3",children:[(0,d.jsxs)("div",{className:"d-flex flex-column",children:[(0,d.jsx)("div",{children:(0,d.jsx)("img",{src:r.avatar,width:u.Mv.AVATAR.width,height:u.Mv.AVATAR.height,alt:u.jn})}),(0,d.jsx)("span",{className:"mt-1 fs-6-1",children:r.name})]}),(0,d.jsxs)("div",{className:"px-4 text-start",children:[(0,d.jsx)("div",{className:"mb-2",children:(0,d.jsx)(b.Z,{rating:r.rating,ratingType:u.bH.REVIEW})}),(0,d.jsx)("p",{className:"mb-2 lh-md",children:r.comment}),(0,d.jsx)("time",{className:"d-block text-muted fs-6-2",dateTime:r.date,children:(0,f.nr)(r.date)})]})]})};D.propTypes={review:g.qd};var F=D,M=function(e){var r=e.reviews;return(0,d.jsx)("ul",{className:"list-unstyled",children:r.map((function(e){return(0,d.jsx)(F,{review:e},e.id)}))})};M.propTypes={reviews:g.zK};var V=M,Z=function(e){var r=e.reviews,t=e.reviewsTotalCount,n=e.fetchReviews,s=r.length<parseInt(t,10);return r.length?(0,d.jsxs)(d.Fragment,{children:[(0,d.jsxs)("h2",{className:"app-subtitle mb-4",children:[u.yP.REVIEWS," · ",(0,d.jsx)("span",{children:t})]}),(0,d.jsx)(V,{reviews:r}),s&&(0,d.jsx)("div",{className:"mb-3",children:(0,d.jsx)("button",{className:"btn btn-primary",type:"button",onClick:function(){s&&n()},children:u.yP.LOAD_MORE})})]}):(0,d.jsx)("h2",{className:"mb-3 fs-3 app-subtitle",children:u.s9.NO_REVIEWS})};Z.propTypes={reviews:g.zK,reviewsTotalCount:l().string.isRequired,fetchReviews:l().func.isRequired};var U=Z,B=function(){return(0,d.jsx)("div",{className:"property-reviews-placeholder"})},H=t(3942),W=t(4384),z=t(4649),Y=t(9139),$=t(9792),G=function(e){var r=e.onFocus,t=void 0===r?function(){return!1}:r;return(0,d.jsx)($.Z,{component:"textarea",fieldClass:"mt-3 mb-2 px-3 py-3 form-rating-textarea",fieldId:"comment",fieldName:"comment",fieldType:"textarea",onFocus:t,labelTitle:u.XA.REVIEW,placeholder:u.s9.REVIEW_PLACEHOLDER})};G.propTypes={onFocus:l().func};var K=G,Q=t(1302),X=function(e){var r=e.className,t=e.width,n=e.height;return(0,d.jsxs)("svg",{className:r,width:t,height:n,xmlns:"http://www.w3.org/2000/svg",xmlnsXlink:"http://www.w3.org/1999/xlink",children:[(0,d.jsx)("symbol",{id:"icon-star",viewBox:"0 0 13 12",children:(0,d.jsx)("path",{fillRule:"evenodd",clipRule:"evenodd",d:"M6.5 9.644L10.517 12 9.451 7.56 13 4.573l-4.674-.386L6.5 0 4.673 4.187 0 4.573 3.549 7.56 2.483 12 6.5 9.644z"})}),(0,d.jsx)("use",{href:"#icon-star"})]})};X.propTypes={className:l().string,width:l().number,height:l().number};var J=X,ee=function(e){var r=e.rating;return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsx)("div",{className:"position-relative d-flex flex-row-reverse justify-content-end align-items-center mb-1",role:"group",children:u.rz.map((function(e){var t=e.mark,n=e.title;return(0,d.jsxs)(a.Fragment,{children:[(0,d.jsx)(z.gN,{className:"form-rating-input visually-hidden",checked:t===r,id:n,name:"rating",type:"radio",value:t}),(0,d.jsx)("label",{className:"form-rating-label me-1",htmlFor:n,title:n,children:(0,d.jsx)(J,{className:"form-rating-star-image",width:u.Mv.FORM_STAR.width,height:u.Mv.FORM_STAR.height})})]},n)}))}),(0,d.jsx)(z.Bc,{name:"rating",component:Q.Z})]})};ee.propTypes={rating:l().string.isRequired};var re=ee,te=t(5004),ne=function(e){var r=e.isSubmitting;return(0,d.jsxs)("div",{className:"d-flex align-items-start justify-content-between",children:[(0,d.jsxs)("p",{className:"mt-1 fs-6-5",children:[u.s9.TO_SUBMIT_REVIEW,(0,d.jsxs)("span",{className:"d-inline align-text-bottom form-rating-star-help",children:[(0,d.jsx)(J,{className:"form-rating-star-image",width:u.Mv.HELP_STAR.width,height:u.Mv.HELP_STAR.height}),(0,d.jsx)("span",{className:"visually-hidden",children:"star"})]}),u.s9.DESCRIBE_YOUR_STAY,(0,d.jsx)("b",{children:u.s9.TEXT_AMOUNT})]}),(0,d.jsx)(te.Z,{additionalClass:"form-rating-submit form-submit",isLoading:r,title:u.yP.SUBMIT})]})};ne.propTypes={isSubmitting:l().bool.isRequired};var se=ne,ae=t(7951),ie=function(e){var r=e.handleCloseBtnClick;return(0,d.jsx)(ae.Z,{alertClass:"d-flex mt-3",alertType:u.vB.SUCCESS,children:(0,d.jsxs)(d.Fragment,{children:[(0,d.jsx)("span",{className:"ms-auto",children:u.h7.REVIEW_POSTING_SUCCESS}),(0,d.jsx)("button",{className:"ms-auto btn-close","aria-label":"Close",type:"button",onClick:r})]})})};ie.propTypes={handleCloseBtnClick:l().func.isRequired};var oe=ie,le=t(5506),ce=(t(8195),t(7561)),ue=Array.from(u.rz,(function(e){return e.mark})),fe=ce.object().shape({rating:f.aV.oneOf(ue,u.m$.RATING_STARS_INVALID).required(u.m$.RATING_STARS_REQUIRED),comment:f.aV.min(u.JR,u.m$.COMMENT_LENGTH)});function de(e,r){return function(e){if(Array.isArray(e))return e}(e)||function(e,r){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var n,s,a=[],i=!0,o=!1;try{for(t=t.call(e);!(i=(n=t.next()).done)&&(a.push(n.value),!r||a.length!==r);i=!0);}catch(e){o=!0,s=e}finally{try{i||null==t.return||t.return()}finally{if(o)throw s}}return a}}(e,r)||function(e,r){if(e){if("string"==typeof e)return pe(e,r);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?pe(e,r):void 0}}(e,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function pe(e,r){(null==r||r>e.length)&&(r=e.length);for(var t=0,n=new Array(r);t<r;t++)n[t]=e[t];return n}var me=function(e){var r=e.offerId,t=e.fetchReviews,n=((0,H.v9)(le.bW),de((0,a.useState)(u.dc),2)),s=n[0],i=n[1],o=de((0,a.useState)(u._Y),2),l=o[0],c=o[1],p=(0,a.useCallback)((function(){i(u.dc)}),[]),m=(0,a.useCallback)((function(e){e.preventDefault(),c(u.dc),i(u.dc),t()}),[t]);return l?(0,d.jsx)(oe,{handleCloseBtnClick:m}):(0,d.jsx)(z.J9,{initialValues:{rating:"",comment:""},validationSchema:fe,onSubmit:function(e,t){t.resetForm;var n=t.setSubmitting,s=e.rating,a=e.comment,o=parseInt(r,10),l=parseInt(s,10);if(!(0,f.m$)(o))throw i(u.h7.INCORRECT_OFFERID),n(!1),new Error(u.h7.INCORRECT_OFFERID);alert("review post info\ncomment: ".concat(a,"\nofferId: ").concat(o,"\nrating: ").concat(l,"\n")),c(!0)},children:function(e){var r=e.isSubmitting,t=e.values;return(0,d.jsxs)(z.l0,{children:[(0,d.jsx)(re,{rating:t.rating}),(0,d.jsx)(K,{onFocus:p}),(0,d.jsx)(se,{isSubmitting:r}),s&&(0,d.jsx)(Y.Z,{alertClass:"mt-3",errorMsg:s})]})}})};me.propTypes={offerId:l().number.isRequired,fetchReviews:l().func.isRequired};var he=me,ve=function(e){var r=e.offerId,t=e.fetchReviews;return(0,H.v9)(le.Od)?(0,d.jsxs)(d.Fragment,{children:[(0,d.jsx)("p",{className:"text-start fw-bold fst-italic",children:u.s9.YOUR_REVIEW}),(0,d.jsx)(he,{offerId:r,fetchReviews:t})]}):(0,d.jsxs)("div",{className:"alert alert-primary",role:"alert",children:[u.s9.TO_WRITE_REVIEW,(0,d.jsx)(W.Z,{linkClass:"alert-link",isLowerCase:!0,propsConst:"LOGIN"})]})};ve.propTypes={offerId:l().number.isRequired,fetchReviews:l().func.isRequired};var ye=ve,be=t(4843);function ge(e,r){(null==r||r>e.length)&&(r=e.length);for(var t=0,n=new Array(r);t<r;t++)n[t]=e[t];return n}function je(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function xe(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?je(Object(t),!0).forEach((function(r){we(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):je(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function we(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}var Re=function(e){var r="useReviewsReducer",t={reviewsData:l().shape({data:(0,g.sN)(g.zK),headerLink:(0,g.sN)(l().object.isRequired),totalCount:(0,g.sN)(l().string.isRequired)}).isRequired};l().checkPropTypes(t,e,"prop",r);var n,s,i=e.reviewsData,o=(n=(0,a.useReducer)((function(e,t){switch(t.type){case u.T7.SET_DATA:return xe(xe({},e),{},{data:t.payload.data,headerLink:t.payload.headerLink,totalCount:t.payload.totalCount});case u.T7.SET_SCROLLED_DATA:return xe(xe({},e),{},{data:t.payload.data,headerLink:t.payload.headerLink});default:(0,f.fe)(r)}}),i),s=2,function(e){if(Array.isArray(e))return e}(n)||function(e,r){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var n,s,a=[],i=!0,o=!1;try{for(t=t.call(e);!(i=(n=t.next()).done)&&(a.push(n.value),!r||a.length!==r);i=!0);}catch(e){o=!0,s=e}finally{try{i||null==t.return||t.return()}finally{if(o)throw s}}return a}}(n,s)||function(e,r){if(e){if("string"==typeof e)return ge(e,r);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?ge(e,r):void 0}}(n,s)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}());return{reviews:o[0],dispatch:o[1]}},Te=function(e){var r=e.offerId,t=e.reviewsUrl,n=e.reviewsData,s=e.isReviewsLoaded,i=(0,a.useRef)(null),o=Re({reviewsData:n}),c=o.reviews,p=o.dispatch,m=function(e){var r={dispatch:l().func.isRequired,appScrollIntoView:l().func.isRequired,scrollContainer:g.SA};l().checkPropTypes(r,e,"prop","useReFetchReviews");var t=e.dispatch,n=e.appScrollIntoView,s=e.scrollContainer;return{reFetchReviews:(0,be.Z)({onSuccess:function(e){t({type:u.T7.SET_DATA,payload:{data:e.data,headerLink:e.headerLink,totalCount:e.totalCount}}),n(s)}}).fetchData}}({dispatch:p,appScrollIntoView:f.o6,scrollContainer:i}).reFetchReviews,h=function(e){var r={dispatch:l().func.isRequired,reviewsData:(0,g.sN)(g.zK),appScrollIntoView:l().func.isRequired,scrollContainer:g.SA};l().checkPropTypes(r,e,"prop","useFetchMoreReviews");var t=e.dispatch,n=e.reviewsData,s=e.appScrollIntoView,a=e.scrollContainer;return{fetchMoreReviews:(0,be.Z)({onSuccess:function(e){t({type:u.T7.SET_SCROLLED_DATA,payload:{data:n.concat(e.data),headerLink:e.headerLink}}),s(a)}}).fetchData}}({dispatch:p,reviewsData:c.data,appScrollIntoView:f.o6,scrollContainer:i}).fetchMoreReviews,v=(0,a.useCallback)((function(){m(t)}),[m,t]),y=(0,a.useCallback)((function(){var e=(0,f.LF)(c.headerLink);e.length&&h(e)}),[h,c.headerLink]);return s?(0,d.jsxs)("div",{ref:i,children:[(0,d.jsx)(U,{reviews:c.data,reviewsTotalCount:c.totalCount,fetchReviews:y}),(0,d.jsx)(ye,{offerId:r,fetchReviews:v})]}):(0,d.jsx)(B,{})};Te.propTypes={offerId:l().number.isRequired,reviewsUrl:l().string.isRequired,reviewsData:l().shape({data:(0,g.sN)(g.zK),headerLink:(0,g.sN)(l().object.isRequired),totalCount:(0,g.sN)(l().string.isRequired)}).isRequired,isReviewsLoaded:l().bool.isRequired};var Ne=Te,Oe=t(620);function Ce(e,r){return function(e){if(Array.isArray(e))return e}(e)||function(e,r){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var n,s,a=[],i=!0,o=!1;try{for(t=t.call(e);!(i=(n=t.next()).done)&&(a.push(n.value),!r||a.length!==r);i=!0);}catch(e){o=!0,s=e}finally{try{i||null==t.return||t.return()}finally{if(o)throw s}}return a}}(e,r)||function(e,r){if(e){if("string"==typeof e)return Se(e,r);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Se(e,r):void 0}}(e,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Se(e,r){(null==r||r>e.length)&&(r=e.length);for(var t=0,n=new Array(r);t<r;t++)n[t]=e[t];return n}var Ie=function(e){var r=e.setIsLoading,t=(0,i.TH)(),n=new URLSearchParams(t.search).get("id"),o=parseInt(n,10);(0,f.m$)(o)||(0,f.V0)(u.h7.INCORRECT_OFFERID);var c=u.Hg.ROOM,p=(0,f.I_)(o,c),m=Ce((0,a.useState)({}),2),h=m[0],v=m[1],y=Ce((0,a.useState)([]),2),b=y[0],g=y[1],j=Ce((0,a.useState)({}),2),x=j[0],w=j[1],R=function(e){var r={offerId:l().number.isRequired,setOffer:l().func.isRequired,setIsLoading:l().func.isRequired};l().checkPropTypes(r,e,"prop","useFetchOffer");var t=e.offerId,n=e.setOffer,s=e.setIsLoading,a=(0,be.Z)({url:(0,f.IV)(t),onRequest:function(){s(!0)},onSuccess:function(e){var r=(0,Oe.w)(e.data.slice()[0]);n(r),s(!1)},onError:function(){s(!1)}});return{isOfferError:a.isError,isOfferLoaded:a.isLoaded}}({offerId:o,setOffer:v,setIsLoading:r}),T=R.isOfferError,N=R.isOfferLoaded,O=function(e){var r={reviewsUrl:l().string.isRequired,setReviewsData:l().func.isRequired};l().checkPropTypes(r,e,"prop","useFetchReviews");var t=e.reviewsUrl,n=e.setReviewsData;return{isReviewsLoaded:(0,be.Z)({url:t,onSuccess:function(e){n(e)}}).isLoaded}}({reviewsUrl:p,setReviewsData:w}).isReviewsLoaded,S=function(e){var r={offerId:l().number.isRequired,setOffersNearby:l().func.isRequired};l().checkPropTypes(r,e,"prop","useFetchOffersNearby");var t=e.offerId,n=e.setOffersNearby;return{isOffersNearbyLoaded:(0,be.Z)({url:(0,f.t6)(t),onSuccess:function(e){n(e.data.map((function(e){return(0,Oe.w)(e)})))}}).isLoaded}}({offerId:o,setOffersNearby:g}).isOffersNearbyLoaded;if(T||N&&s()(h))(0,f.V0)();else if(!N)return(0,d.jsx)(_,{offerType:c});return(0,d.jsx)(C,{offer:h,offerType:c,offersNearby:b,isCurrentOfferLoaded:N,isOffersNearbyLoaded:S,PropertyReviewsWrapper:function(){return(0,d.jsx)(Ne,{offerId:o,reviewsUrl:p,reviewsData:x,isReviewsLoaded:O})}})};Ie.propTypes={setIsLoading:l().func.isRequired};var Ee=Ie}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDU2LmU2YWM5MTJjMGRiZWQ0OGE1NzI0LmpzIiwibWFwcGluZ3MiOiJnS0FJTUEsRUFBbUIsU0FBQyxHQUlwQixJQUhKQyxFQUdJLEVBSEpBLGdCQUNBQyxFQUVJLEVBRkpBLFVBQ0FDLEVBQ0ksRUFESkEsTUFFQSxPQUNFLG9CQUNFQyxXQUNFQyxFQUFBQSxFQUFBQSxHQUFLLGtCQUFtQkosR0FFMUJLLFNBQVVKLEVBQ1ZLLEtBQUssU0FMUCxVQU9HTCxJQUNDLGlDQUNFLFNBQUMsSUFBRCxDQUNFTSxHQUFHLE9BQ0hDLFVBQVUsU0FDVkMsS0FBSyxLQUNMQyxLQUFLLFNBQ0wsY0FBWSxTQU5oQixPQVdEUixJQUdOLEVBRURILEVBQWlCWSxVQUFZLENBQzNCWCxnQkFBaUJZLElBQUFBLE9BQUFBLFdBQ2pCWCxVQUFXVyxJQUFBQSxLQUFBQSxXQUNYVixNQUFPVSxJQUFBQSxPQUFBQSxZQUdULEssc0ZDbkNNQyxFQUFhLFNBQUMsR0FBNkIsSUFBM0JDLEVBQTJCLEVBQTNCQSxXQUFZQyxFQUFlLEVBQWZBLFNBQ2hDLE9BQ0UsU0FBQyxJQUFELENBQ0VELFlBQVlWLEVBQUFBLEVBQUFBLEdBQUtVLEdBQ2pCRSxVQUFXQyxFQUFBQSxHQUFBQSxPQUZiLFNBSUdGLEdBR04sRUFFREYsRUFBV0YsVUFBWSxDQUNyQkcsV0FBWUYsSUFBQUEsT0FDWkcsU0FBVUgsSUFBQUEsT0FBQUEsWUFHWixLLGtFQ2xCTU0sRUFBYyxTQUFDLEdBQUQsUUFDbEJKLFdBQUFBLE9BRGtCLE1BQ0wsR0FESyxNQUVsQkUsVUFBQUEsT0FGa0IsTUFFTkMsRUFBQUEsR0FBQUEsS0FGTSxNQUdsQkUsU0FBQUEsT0FIa0IsTUFHUCxLQUhPLE1BSWxCQyxlQUFBQSxPQUprQixNQUlELEdBSkMsU0FNbEIsZ0JBQUtqQixVQUFTLG9DQUErQmlCLEdBQTdDLFVBQ0UsZ0JBQ0VqQixVQUFTLHNCQUFpQmEsRUFBakIsd0JBQTBDRixHQUNuREosS0FBSyxRQUZQLFNBSUdTLEtBWGEsRUFnQnBCRCxFQUFZUCxVQUFZLENBQ3RCRyxXQUFZRixJQUFBQSxPQUNaSSxVQUFXSixJQUFBQSxPQUNYTyxTQUFVUCxJQUFBQSxVQUFvQixDQUM1QkEsSUFBQUEsUUFDQUEsSUFBQUEsU0FFRlEsZUFBZ0JSLElBQUFBLFFBR2xCLEssMlhDekJBLElBSm9CLFNBQUNTLEdBQUQsT0FDbEIsZSwrVkFBQSxFQUFLbEIsVUFBVSwwQkFBNkJrQixHQUQxQixDLDRFQ0lkQyxFQUFjLFNBQUMsR0FBRCxRQUNsQkMsYUFBQUEsT0FEa0IsTUFDSCxHQURHLE1BRWxCSixTQUFBQSxPQUZrQixNQUVQLEtBRk8sTUFHbEJLLFVBQUFBLE9BSGtCLE1BR04sR0FITSxNQUlsQkosZUFBQUEsT0FKa0IsTUFJRCxHQUpDLE1BS2xCSyxXQUFBQSxPQUxrQixNQUtMLEdBTEssRUFNbEJDLEVBTmtCLEVBTWxCQSxRQUNBQyxFQVBrQixFQU9sQkEsVUFDQUMsRUFSa0IsRUFRbEJBLFVBQ0FDLEVBVGtCLEVBU2xCQSxXQVRrQixJQVVsQkMsUUFBQUEsT0FWa0IsTUFVUixrQkFBTSxDQUFOLEVBVlEsTUFXbEJDLFlBQUFBLE9BWGtCLE1BV0osR0FYSSxTQWFsQixpQkFBSzVCLFVBQVMsb0NBQStCaUIsR0FBN0MsV0FDRSxrQkFDRWpCLFVBQVUsa0JBQ1Y2QixRQUFTTCxFQUZYLFNBSUdFLEtBRUgsU0FBQyxLQUFELENBQ0UxQixVQUFTLHdDQUFtQ3NCLEdBQzVDRixhQUFjQSxFQUNkQyxVQUFXQSxFQUNYUyxHQUFJUCxFQUNKUSxLQUFNUCxFQUNOSSxZQUFhQSxFQUNiekIsS0FBTXNCLEVBQ05FLFFBQVNBLEVBUlgsU0FVR1gsS0FFSCxTQUFDLEtBQUQsQ0FDRWUsS0FBTVAsRUFDTkgsVUFBV1csRUFBQUEsTUFsQ0csRUF1Q3BCYixFQUFZWCxVQUFZLENBQ3RCWSxhQUFjWCxJQUFBQSxPQUNkTyxTQUFVUCxJQUFBQSxRQUNWWSxVQUFXWixJQUFBQSxVQUFvQixDQUM3QkEsSUFBQUEsWUFDQUEsSUFBQUEsU0FFRlEsZUFBZ0JSLElBQUFBLE9BQ2hCYSxXQUFZYixJQUFBQSxPQUNaYyxRQUFTZCxJQUFBQSxPQUFBQSxXQUNUZSxVQUFXZixJQUFBQSxPQUFBQSxXQUNYZ0IsVUFBV2hCLElBQUFBLE9BQUFBLFdBQ1hpQixXQUFZakIsSUFBQUEsT0FBQUEsV0FDWmtCLFFBQVNsQixJQUFBQSxLQUNUbUIsWUFBYW5CLElBQUFBLFFBR2YsSywwS0N2RE13QixFQUFtQixTQUFDLEdBQWlCLElBQWZDLEVBQWUsRUFBZkEsU0FDbEJDLEVBQW1CRCxFQUFuQkMsU0FBVWhDLEVBQVMrQixFQUFUL0IsS0FFbEIsT0FDRSxnQkFBSUgsVUFBVSxtRkFBZCxXQUdFLGVBQUlBLFVBQVUsMkNBQWQsVUFDR29DLEVBQUFBLEVBQUFBLElBQXNCakMsTUFFekIsZUFBSUgsVUFBVSw2Q0FBZCxtQkFDTW1DLEVBRE4sWUFDa0JFLEVBQUFBLEdBQUFBLGNBSXZCLEVBRURKLEVBQWlCekIsVUFBWUMsSUFBQUEsTUFBZ0IsQ0FDM0MwQixTQUFVMUIsSUFBQUEsT0FBQUEsV0FDVk4sS0FBTU0sSUFBQUEsT0FBQUEsYUFDTDZCLFdBRUgsUUN2Qk1DLEVBQWtCLFNBQUMsR0FBK0IsSUFBN0JDLEVBQTZCLEVBQTdCQSxZQUFhQyxFQUFnQixFQUFoQkEsVUFDdEMsT0FDRSxnQkFBS3pDLFVBQVUsaUVBQWYsU0FHR3dDLEVBQVlFLEtBQUksU0FBQ0MsR0FBRCxPQUNmLDBCQUNFLGdCQUNFM0MsVUFBVSxVQUNWNEMsSUFBS1AsRUFBQUEsR0FBQUEsWUFDTFEsTUFBT0MsRUFBQUEsR0FBZUwsR0FBV0ksTUFDakNFLE9BQVFELEVBQUFBLEdBQWVMLEdBQVdNLE9BQ2xDQyxJQUFLTCxLQU5DQSxFQURLLEtBYXRCLEVBRURKLEVBQWdCL0IsVUFBWSxDQUMxQmdDLFlBQWEvQixJQUFBQSxRQUFrQkEsSUFBQUEsUUFBa0I2QixXQUNqREcsVUFBV2hDLElBQUFBLE9BQUFBLFlBR2IsUSw4QkNaTXdDLEVBQWtCLFNBQUMsR0FBeUIsSUFBdkJDLEVBQXVCLEVBQXZCQSxNQUFPVCxFQUFnQixFQUFoQkEsVUFDaEMsT0FDRSxpQ0FDRSxTQUFDLEVBQUQsQ0FDRUQsWUFBYVUsRUFBTUMsT0FDbkJWLFVBQVdBLEtBR2IsaUJBQUt6QyxVQUFVLE9BQWYsV0FDRSxpQkFBS0EsVUFBVSwwRUFBZixXQUdFLGVBQUdBLFVBQVUseURBQWIsVUFDR29ELEVBQUFBLEdBREgsSUFDeUJGLEVBQU1HLE1BRC9CLFFBR0Esa0JBQU1yRCxVQUFVLGtCQUFoQixjQUNTc0QsRUFBQUEsT0FFVCxTQUFDLElBQUQsQ0FDRUMsUUFBU0wsRUFBTXBCLEdBQ2YwQixhQUFjQyxFQUFBQSxHQUFpQmhCLFNBSW5DLGVBQUl6QyxVQUFVLHNCQUFkLFNBQ0drRCxFQUFNbkQsU0FHVCxTQUFDLElBQUQsQ0FDRTJELE9BQVFSLEVBQU1RLE9BQ2RDLFdBQVlDLEVBQUFBLEdBQVluQixHQUN4Qm9CLFdBQVcsS0FHYixTQUFDLEVBQUQsQ0FBa0IzQixTQUFVZ0IsRUFBTWhCLFdBRWpDZ0IsRUFBTVksT0FDTCxnQkFBSzlELFVBQVUsT0FBZixVQUNFLGlCQUFNQSxVQUFVLGtFQUFoQixTQUdHcUMsRUFBQUEsR0FBQUEsb0JBT2QsRUFFRFksRUFBZ0J6QyxVQUFZLENBQzFCMEMsTUFBT2EsRUFBQUEsR0FDUHRCLFVBQVdoQyxJQUFBQSxPQUFBQSxZQUdiLFEsb0JDakVNdUQsRUFBaUIsU0FBQyxHQUEwQixJQUF4QkMsRUFBd0IsRUFBeEJBLE9BQVF4QixFQUFnQixFQUFoQkEsVUFDaEMsR0FHSXlCLEVBQUFBLEVBQUFBLEtBRkZDLEVBREYsRUFDRUEsMEJBQ0FDLEVBRkYsRUFFRUEsMEJBR0YsT0FDRSxnQ0FDRSxlQUFJcEUsVUFBVSxxQ0FBZCxTQUNHcUUsRUFBQUEsR0FBQUEsaUJBRUgsZ0JBQUtyRSxVQUFVLDhDQUFmLFVBQ0UsU0FBQyxJQUFELENBQ0VpRSxPQUFRQSxFQUNSeEIsVUFBV0EsRUFDWDBCLDBCQUEyQkEsRUFDM0JDLDBCQUEyQkEsUUFLcEMsRUFFREosRUFBZXhELFVBQVksQ0FDekJ5RCxPQUFRSyxFQUFBQSxHQUNSN0IsVUFBV2hDLElBQUFBLE9BQUFBLFlBR2IsUUM1Qk04RCxFQUFrQixTQUFDLEdBT25CLElBTkpyQixFQU1JLEVBTkpBLE1BQ0FULEVBS0ksRUFMSkEsVUFDQStCLEVBSUksRUFKSkEsYUFDQUMsRUFHSSxFQUhKQSxxQkFDQUMsRUFFSSxFQUZKQSxxQkFDQUMsRUFDSSxFQURKQSx1QkFFTUMsRUFBc0JGLEdBQzFCRyxRQUFRTCxFQUFhTSxRQUV2QixPQUNFLGlDQUNFLHFCQUFTOUUsVUFBVSwyREFBbkIsV0FHRSxTQUFDLEVBQUQsQ0FDRWtELE1BQU9BLEVBQ1BULFVBQVdBLEtBR2IsU0FBQ2tDLEVBQUQsSUFFQ0MsSUFDQyxTQUFDLEVBQUQsQ0FDRVgsT0FBUU8sRUFDUi9CLFVBQVdBLE9BS2hCZ0MsR0FBd0JHLElBQ3ZCLG9CQUFTNUUsVUFBVSw4QkFBbkIsVUFDRSxTQUFDLElBQUQsQ0FDRStFLGFBQWM3QixFQUNkZSxPQUFRTyxRQU1uQixFQUVERCxFQUFnQi9ELFVBQVksQ0FDMUIwQyxNQUFPYSxFQUFBQSxHQUNQdEIsVUFBV2hDLElBQUFBLE9BQUFBLFdBQ1grRCxhQUFjRixFQUFBQSxHQUNkRyxxQkFBc0JoRSxJQUFBQSxLQUFBQSxXQUN0QmlFLHFCQUFzQmpFLElBQUFBLEtBQUFBLFdBQ3RCa0UsdUJBQXdCbEUsSUFBQUEsWUFBQUEsWUFHMUIsUUM5Q0EsRUFYb0MsV0FDbEMsT0FDRSxnQkFBSVQsVUFBVSxvR0FBZCxXQUdFLGVBQUlBLFVBQVUsd0NBQ2QsZUFBSUEsVUFBVSx5Q0FHbkIsRUNOS2dGLEVBQTZCLFNBQUMsR0FBa0IsSUFBaEJ2QyxFQUFnQixFQUFoQkEsVUFDOUJ3QyxHQUFZQyxFQUFBQSxFQUFBQSxJQUFxQkMsRUFBQUEsSUFFdkMsT0FDRSxnQkFBS25GLFVBQVUsaUVBQWYsU0FHR2lGLEVBQVV2QyxLQUFJLFNBQUMwQyxFQUFHQyxHQUFKLE9BQ2IsZ0JBRUVyRixVQUFVLHNCQUNWc0YsTUFBTyxDQUNMekMsTUFBTyxHQUFGLE9BQUtDLEVBQUFBLEdBQWVMLEdBQVdJLE1BQS9CLE1BQ0xFLE9BQVEsR0FBRixPQUFLRCxFQUFBQSxHQUFlTCxHQUFXTSxPQUEvQixRQUpIc0MsRUFGTSxLQWNwQixFQUVETCxFQUEyQnhFLFVBQVksQ0FDckNpQyxVQUFXaEMsSUFBQUEsT0FBQUEsWUFHYixRQzVCTThFLEVBQXlCLFNBQUMsR0FBc0MsSUFBcEM1QixFQUFvQyxFQUFwQ0EsV0FBb0MsSUFBeEJFLFVBQUFBLE9BQXdCLFNBQ3BFLE9BQ0UsaUJBQUs3RCxVQUFTLFVBQUt3RixFQUFBQSxHQUFjN0IsR0FBZCxPQUFMLFdBQWQsV0FDRSxnQkFBSzNELFVBQVMsVUFBS3dGLEVBQUFBLEdBQWM3QixHQUFkLE1BQUwsbUJBQ2JFLElBQ0MsaUJBQ0U3RCxVQUFTLFVBQUt3RixFQUFBQSxHQUFjN0IsR0FBZCxNQUFMLHlCQURYLHNCQU1QLEVBRUQ0QixFQUF1Qi9FLFVBQVksQ0FDakNtRCxXQUFZbEQsSUFBQUEsT0FBQUEsV0FDWm9ELFVBQVdwRCxJQUFBQSxNQUdiLFFDaEJNZ0YsRUFBNkIsU0FBQyxHQUFrQixJQUFoQmhELEVBQWdCLEVBQWhCQSxVQUNwQyxPQUNFLGlDQUNFLFNBQUMsRUFBRCxDQUE0QkEsVUFBV0EsS0FFdkMsaUJBQUt6QyxVQUFVLGlCQUFmLFdBQ0UsZ0JBQUtBLFVBQVUsd0RBQWYsVUFDRSxjQUFHQSxVQUFVLDhCQUdmLGVBQUlBLFVBQVUsZ0RBRWQsU0FBQyxFQUFELENBQ0UyRCxXQUFZQyxFQUFBQSxHQUFBQSxLQUNaQyxXQUFXLEtBR2IsZ0JBQUs3RCxVQUFVLE9BQWYsVUFDRSxTQUFDLEVBQUQsT0FHRixnQkFBS0EsVUFBVSxpQkFBZixVQUNFLGlCQUFNQSxVQUFVLDhIQU96QixFQUVEeUYsRUFBMkJqRixVQUFZLENBQ3JDaUMsVUFBV2hDLElBQUFBLE9BQUFBLFlBR2IsUUNyQ01pRixFQUE2QixTQUFDLEdBQWtCLElBQWhCakQsRUFBZ0IsRUFBaEJBLFVBQ3BDLE9BQ0Usb0JBQVN6QyxVQUFVLDRFQUFuQixVQUdFLFNBQUMsRUFBRCxDQUE0QnlDLFVBQVdBLEtBRzVDLEVBRURpRCxFQUEyQmxGLFVBQVksQ0FDckNpQyxVQUFXaEMsSUFBQUEsT0FBQUEsWUFHYixRQ1RNa0YsRUFBYSxTQUFDLEdBQWUsSUFBYkMsRUFBYSxFQUFiQSxPQUNwQixPQUNFLGdCQUFJNUYsVUFBVSxjQUFkLFdBQ0UsaUJBQUtBLFVBQVUscUJBQWYsV0FDRSwwQkFDRSxnQkFDRWdELElBQUs0QyxFQUFPQyxPQUNaaEQsTUFBT2lELEVBQUFBLEdBQUFBLE9BQUFBLE1BQ1AvQyxPQUFRK0MsRUFBQUEsR0FBQUEsT0FBQUEsT0FDUmxELElBQUttRCxFQUFBQSxRQUdULGlCQUFNL0YsVUFBVSxjQUFoQixTQUErQjRGLEVBQU83RCxXQUV4QyxpQkFBSy9CLFVBQVUsa0JBQWYsV0FDRSxnQkFBS0EsVUFBVSxPQUFmLFVBQ0UsU0FBQyxJQUFELENBQ0UwRCxPQUFRa0MsRUFBT2xDLE9BQ2ZDLFdBQVlDLEVBQUFBLEdBQUFBLFlBR2hCLGNBQUc1RCxVQUFVLGFBQWIsU0FBMkI0RixFQUFPSSxXQUNsQyxpQkFDRWhHLFVBQVUsNEJBQ1ZpRyxTQUFVTCxFQUFPTSxLQUZuQixVQUlHQyxFQUFBQSxFQUFBQSxJQUFjUCxFQUFPTSxhQUsvQixFQUVEUCxFQUFXbkYsVUFBWSxDQUNyQm9GLE9BQVFRLEVBQUFBLElBR1YsUUMzQ01DLEVBQWMsU0FBQyxHQUFnQixJQUFkQyxFQUFjLEVBQWRBLFFBQ3JCLE9BQ0UsZUFBSXRHLFVBQVUsZ0JBQWQsU0FDR3NHLEVBQVE1RCxLQUFJLFNBQUNDLEdBQUQsT0FDWCxTQUFDLEVBQUQsQ0FFRWlELE9BQVFqRCxHQURIQSxFQUFLYixHQUZELEtBUWxCLEVBRUR1RSxFQUFZN0YsVUFBWSxDQUN0QjhGLFFBQVNDLEVBQUFBLElBR1gsUUNmTUMsRUFBa0IsU0FBQyxHQUluQixJQUhKRixFQUdJLEVBSEpBLFFBQ0FHLEVBRUksRUFGSkEsa0JBQ0FDLEVBQ0ksRUFESkEsYUFFTUMsRUFBcUJMLEVBQVF4QixPQUFTOEIsU0FBU0gsRUFBbUIsSUFReEUsT0FBSUgsRUFBUXhCLFFBRVIsaUNBQ0UsZ0JBQUk5RSxVQUFVLG9CQUFkLFVBQ0c2RyxFQUFBQSxHQUFBQSxRQURILE9BR0UsMEJBQU9KLFFBRVQsU0FBQyxFQUFELENBQWFILFFBQVNBLElBQ3JCSyxJQUNDLGdCQUFLM0csVUFBVSxPQUFmLFVBQ0UsbUJBQ0VBLFVBQVUsa0JBQ1ZHLEtBQUssU0FDTDJHLFFBcEJlLFdBQ3JCSCxHQUNGRCxHQUVILEVBYVMsU0FLR0csRUFBQUEsR0FBQUEsa0JBU1gsZUFBSTdHLFVBQVUseUJBQWQsU0FDR3FFLEVBQUFBLEdBQUFBLFlBR04sRUFFRG1DLEVBQWdCaEcsVUFBWSxDQUMxQjhGLFFBQVNDLEVBQUFBLEdBQ1RFLGtCQUFtQmhHLElBQUFBLE9BQUFBLFdBQ25CaUcsYUFBY2pHLElBQUFBLEtBQUFBLFlBR2hCLFFDL0NBLEVBTm1DLFdBQ2pDLE9BQ0UsZ0JBQUtULFVBQVUsZ0NBRWxCLEUsa0RDRksrRyxFQUFzQixTQUFDLEdBQUQsUUFDMUJwRixRQUFBQSxPQUQwQixNQUNoQixrQkFBTSxDQUFOLEVBRGdCLFNBRzFCLFNBQUMsSUFBRCxDQUNFTixVQUFVLFdBQ1ZDLFdBQVcsMkNBQ1hDLFFBQVEsVUFDUkMsVUFBVSxVQUNWQyxVQUFVLFdBQ1ZFLFFBQVNBLEVBQ1RELFdBQVlzRixFQUFBQSxHQUFBQSxPQUNacEYsWUFBYXlDLEVBQUFBLEdBQUFBLG9CQVhXLEVBZTVCMEMsRUFBb0J2RyxVQUFZLENBQzlCbUIsUUFBU2xCLElBQUFBLE1BR1gsUSxVQ3JCTXdHLEVBQVcsU0FBQyxHQUFpQyxJQUEvQmpILEVBQStCLEVBQS9CQSxVQUFXNkMsRUFBb0IsRUFBcEJBLE1BQU9FLEVBQWEsRUFBYkEsT0FDcEMsT0FDRSxpQkFDRS9DLFVBQVdBLEVBQ1g2QyxNQUFPQSxFQUNQRSxPQUFRQSxFQUNSbUUsTUFBTSw2QkFDTkMsV0FBVywrQkFMYixXQU9FLG1CQUFRckYsR0FBRyxZQUFZc0YsUUFBUSxZQUEvQixVQUNFLGlCQUFNQyxTQUFTLFVBQVVDLFNBQVMsVUFDaENDLEVBQUUscUhBR04sZ0JBQUtDLEtBQUssaUJBR2YsRUFFRFAsRUFBU3pHLFVBQVksQ0FDbkJSLFVBQVdTLElBQUFBLE9BQ1hvQyxNQUFPcEMsSUFBQUEsT0FDUHNDLE9BQVF0QyxJQUFBQSxRQUdWLFFDbkJNZ0gsR0FBbUIsU0FBQyxHQUFlLElBQWIvRCxFQUFhLEVBQWJBLE9BQzFCLE9BQ0UsaUNBQ0UsZ0JBQUsxRCxVQUFVLHdGQUNnQ08sS0FBSyxRQURwRCxTQUdHbUgsRUFBQUEsR0FBQUEsS0FBc0IsZ0JBQUdDLEVBQUgsRUFBR0EsS0FBTTVILEVBQVQsRUFBU0EsTUFBVCxPQUNyQixVQUFDLEVBQUE2SCxTQUFELFlBQ0UsU0FBQyxLQUFELENBQ0U1SCxVQUFVLG9DQUNWNkgsUUFBU0YsSUFBU2pFLEVBQ2xCNUIsR0FBSS9CLEVBQ0pnQyxLQUFLLFNBQ0w1QixLQUFLLFFBQ0wySCxNQUFPSCxLQUVULGtCQUNFM0gsVUFBVSx5QkFDVjZCLFFBQVM5QixFQUNUQSxNQUFPQSxFQUhULFVBS0UsU0FBQyxFQUFELENBQ0VDLFVBQVUseUJBQ1Y2QyxNQUFPaUQsRUFBQUEsR0FBQUEsVUFBQUEsTUFDUC9DLE9BQVErQyxFQUFBQSxHQUFBQSxVQUFBQSxhQWpCQy9GLEVBRE0sT0F3QnpCLFNBQUMsS0FBRCxDQUNFZ0MsS0FBSyxTQUNMVixVQUFXVyxFQUFBQSxNQUlsQixFQUVEeUYsR0FBaUJqSCxVQUFZLENBQzNCa0QsT0FBUWpELElBQUFBLE9BQUFBLFlBR1YsVSxXQzVDTXNILEdBQW1CLFNBQUMsR0FBcUIsSUFBbkJDLEVBQW1CLEVBQW5CQSxhQUMxQixPQUNFLGlCQUFLaEksVUFBVSxtREFBZixXQUNFLGVBQUdBLFVBQVUsY0FBYixVQUNHcUUsRUFBQUEsR0FBQUEsa0JBQ0Qsa0JBQU1yRSxVQUFVLG1EQUFoQixXQUNFLFNBQUMsRUFBRCxDQUNFQSxVQUFVLHlCQUNWNkMsTUFBT2lELEVBQUFBLEdBQUFBLFVBQUFBLE1BQ1AvQyxPQUFRK0MsRUFBQUEsR0FBQUEsVUFBQUEsVUFFVixpQkFBTTlGLFVBQVUsa0JBQWhCLHFCQUVEcUUsRUFBQUEsR0FBQUEsb0JBQ0QsdUJBQUlBLEVBQUFBLEdBQUFBLGtCQUVOLFNBQUMsS0FBRCxDQUNFeEUsZ0JBQWdCLGlDQUNoQkMsVUFBV2tJLEVBQ1hqSSxNQUFPOEcsRUFBQUEsR0FBQUEsV0FJZCxFQUVEa0IsR0FBaUJ2SCxVQUFZLENBQzNCd0gsYUFBY3ZILElBQUFBLEtBQUFBLFlBR2hCLFUsV0MvQk13SCxHQUFvQixTQUFDLEdBQTRCLElBQTFCQyxFQUEwQixFQUExQkEsb0JBQzNCLE9BQ0UsU0FBQyxLQUFELENBQ0V2SCxXQUFXLGNBQ1hFLFVBQVdDLEVBQUFBLEdBQUFBLFFBRmIsVUFJRSxpQ0FDRSxpQkFBTWQsVUFBVSxVQUFoQixTQUNHbUksRUFBQUEsR0FBQUEsMEJBRUgsbUJBQ0VuSSxVQUFVLG9CQUNWLGFBQVcsUUFDWEcsS0FBSyxTQUNMMkcsUUFBU29CLFFBS2xCLEVBRURELEdBQWtCekgsVUFBWSxDQUM1QjBILG9CQUFxQnpILElBQUFBLEtBQUFBLFlBR3ZCLFUsZ0NDckJNMkgsR0FBUUMsTUFBTUMsS0FBS1osRUFBQUEsSUFBbUIsU0FBQy9FLEdBQUQsT0FBVUEsRUFBS2dGLElBQWYsSUFFL0JZLEdBQWVDLEdBQUFBLFNBQWFDLE1BQU0sQ0FDN0MvRSxPQUFRZ0YsRUFBQUEsR0FBQUEsTUFDQ04sR0FBT08sRUFBQUEsR0FBQUEsc0JBQ2JDLFNBQVNELEVBQUFBLEdBQUFBLHVCQUNaM0MsUUFBUzBDLEVBQUFBLEdBQUFBLElBQ0ZHLEVBQUFBLEdBQXVCRixFQUFBQSxHQUFBQSxrQixrOEJDVWhDLElBQU1HLEdBQW9CLFNBQUMsR0FBOEIsSUFBNUJ2RixFQUE0QixFQUE1QkEsUUFBU21ELEVBQW1CLEVBQW5CQSxhQUVwQyxJQURrQnFDLEVBQUFBLEVBQUFBLElBQVlDLEdBQUFBLElBQzlCLElBQXNDQyxFQUFBQSxFQUFBQSxVQUFTQyxFQUFBQSxJQUEvQyxJQUFPQyxFQUFQLEtBQW9CQyxFQUFwQixLQUNBLE1BQTBDSCxFQUFBQSxFQUFBQSxVQUFTSSxFQUFBQSxJQUFuRCxHQUFPQyxFQUFQLEtBQXNCQyxFQUF0QixLQU9NQyxHQUFrQkMsRUFBQUEsRUFBQUEsY0FBWSxXQUNsQ0wsRUFBZUYsRUFBQUEsR0FDaEIsR0FBRSxJQUVHUSxHQUFrQkQsRUFBQUEsRUFBQUEsY0FBWSxTQUFDRSxHQUNuQ0EsRUFBSUMsaUJBRUpMLEVBQWlCTCxFQUFBQSxJQUNqQkUsRUFBZUYsRUFBQUEsSUFDZnhDLEdBQ0QsR0FBRSxDQUFDQSxJQWtDSixPQUFJNEMsR0FFQSxTQUFDLEdBQUQsQ0FBbUJwQixvQkFBcUJ3QixLQUsxQyxTQUFDLEtBQUQsQ0FDRUcsY0F6RGtCLENBQ3BCbkcsT0FBUSxHQUNSc0MsUUFBUyxJQXdEUDhELGlCQUFrQnZCLEdBQ2xCd0IsU0ExQ2EsU0FBQ0MsRUFBRCxHQUEwQyxFQUEvQkMsVUFBK0IsSUFBcEJDLEVBQW9CLEVBQXBCQSxjQUM3QnhHLEVBQW9Cc0csRUFBcEJ0RyxPQUFRc0MsRUFBWWdFLEVBQVpoRSxRQUNWbUUsRUFBZ0J2RCxTQUFTckQsRUFBUyxJQUNsQzZHLEVBQWV4RCxTQUFTbEQsRUFBUSxJQUV0QyxLQUFLMkcsRUFBQUEsRUFBQUEsSUFBZUYsR0FHbEIsTUFGQWYsRUFBZWpCLEVBQUFBLEdBQUFBLG1CQUNmK0IsR0FBYyxHQUNSLElBQUlJLE1BQU1uQyxFQUFBQSxHQUFBQSxtQkFHaEJvQyxNQUFNLDhCQUFELE9BQStCdkUsRUFBL0Isc0JBQW9EbUUsRUFBcEQscUJBQThFQyxFQUE5RSxPQUNMYixHQUFpQixFQWtCcEIsRUFTQyxTQUtHLGdCQUFHdkIsRUFBSCxFQUFHQSxhQUFjZ0MsRUFBakIsRUFBaUJBLE9BQWpCLE9BQ0MsVUFBQyxLQUFELFlBQ0UsU0FBQyxHQUFELENBQWtCdEcsT0FBUXNHLEVBQU90RyxVQUNqQyxTQUFDLEVBQUQsQ0FBcUIvQixRQUFTNkgsS0FDOUIsU0FBQyxHQUFELENBQWtCeEIsYUFBY0EsSUFDL0JtQixJQUNDLFNBQUMsSUFBRCxDQUFZeEksV0FBVyxPQUFPQyxTQUFVdUksTUFON0MsR0FZTixFQUVETCxHQUFrQnRJLFVBQVksQ0FDNUIrQyxRQUFTOUMsSUFBQUEsT0FBQUEsV0FDVGlHLGFBQWNqRyxJQUFBQSxLQUFBQSxZQUdoQixVQ3ZHTStKLEdBQXNCLFNBQUMsR0FBOEIsSUFBNUJqSCxFQUE0QixFQUE1QkEsUUFBU21ELEVBQW1CLEVBQW5CQSxhQUd0QyxPQUZlcUMsRUFBQUEsRUFBQUEsSUFBWTBCLEdBQUFBLEtBSXZCLGlDQUNFLGNBQUd6SyxVQUFVLGdDQUFiLFNBQ0dxRSxFQUFBQSxHQUFBQSxlQUVILFNBQUMsR0FBRCxDQUNFZCxRQUFTQSxFQUNUbUQsYUFBY0EsUUFPcEIsaUJBQUsxRyxVQUFVLHNCQUFzQk8sS0FBSyxRQUExQyxVQUNHOEQsRUFBQUEsR0FBQUEsaUJBQ0QsU0FBQyxJQUFELENBQ0VxRyxVQUFXLGFBQ1hDLGFBQWEsRUFDYkMsV0FBWSxZQUluQixFQUVESixHQUFvQmhLLFVBQVksQ0FDOUIrQyxRQUFTOUMsSUFBQUEsT0FBQUEsV0FDVGlHLGFBQWNqRyxJQUFBQSxLQUFBQSxZQUdoQixVLG16QkNuQ0EsSUF3Q0EsR0F4QzBCLFNBQUNTLEdBQ3pCLElBQU0ySixFQUFZLG9CQUVackssRUFBWSxDQUNoQnNLLFlBQWFySyxJQUFBQSxNQUFnQixDQUMzQnNLLE1BQU1DLEVBQUFBLEVBQUFBLElBQXVCekUsRUFBQUEsSUFDN0IwRSxZQUFZRCxFQUFBQSxFQUFBQSxJQUF1QnZLLElBQUFBLE9BQUFBLFlBQ25DeUssWUFBWUYsRUFBQUEsRUFBQUEsSUFBdUJ2SyxJQUFBQSxPQUFBQSxjQUNsQzZCLFlBR0w3QixJQUFBQSxlQUF5QkQsRUFBV1UsRUFBTyxPQUFRMkosR0FFbkQsSSxJQUFRQyxFQUFnQjVKLEVBQWhCNEosWUFzQlIsRyxHQUE0QkssRUFBQUEsRUFBQUEsYUFwQlosU0FBQ0MsRUFBT0MsR0FDdEIsT0FBUUEsRUFBT2xMLE1BQ2IsS0FBS21MLEVBQUFBLEdBQUFBLFNBQ0gsZ0JBQ0tGLEdBREwsSUFFRUwsS0FBTU0sRUFBT0UsUUFBUVIsS0FDckJFLFdBQVlJLEVBQU9FLFFBQVFOLFdBQzNCQyxXQUFZRyxFQUFPRSxRQUFRTCxhQUUvQixLQUFLSSxFQUFBQSxHQUFBQSxrQkFDSCxnQkFDS0YsR0FETCxJQUVFTCxLQUFNTSxFQUFPRSxRQUFRUixLQUNyQkUsV0FBWUksRUFBT0UsUUFBUU4sYUFFL0IsU0FDRU8sRUFBQUEsRUFBQUEsSUFBd0JYLEdBRTdCLEdBRStDQyxHLEVBQWhELEUsZzBCQUVBLE1BQU8sQ0FBRXhFLFFBRlQsS0FFa0JtRixTQUZsQixLQUdELEVDakNLOUcsR0FBeUIsU0FBQyxHQUsxQixJQUpKcEIsRUFJSSxFQUpKQSxRQUNBbUksRUFHSSxFQUhKQSxXQUNBWixFQUVJLEVBRkpBLFlBQ0FhLEVBQ0ksRUFESkEsZ0JBRU1DLEdBQWtCQyxFQUFBQSxFQUFBQSxRQUFPLE1BRS9CLEVBQThCQyxHQUFrQixDQUFFaEIsWUFBQUEsSUFBMUN4RSxFQUFSLEVBQVFBLFFBQVNtRixFQUFqQixFQUFpQkEsU0FFVE0sRUNoQmdCLFNBQUM3SyxHQUN6QixJQUVNVixFQUFZLENBQ2hCaUwsU0FBVWhMLElBQUFBLEtBQUFBLFdBQ1Z1TCxrQkFBbUJ2TCxJQUFBQSxLQUFBQSxXQUNuQm1MLGdCQUFpQkssRUFBQUEsSUFHbkJ4TCxJQUFBQSxlQUF5QkQsRUFBV1UsRUFBTyxPQVJ6QixxQkFVbEIsSUFDRXVLLEVBR0V2SyxFQUhGdUssU0FDQU8sRUFFRTlLLEVBRkY4SyxrQkFDQUosRUFDRTFLLEVBREYwSyxnQkFrQkYsTUFBTyxDQUFFRyxnQkFmNkJHLEVBQUFBLEdBQUFBLEdBQVMsQ0FDN0NDLFVBQVcsU0FBQ1osR0FDVkUsRUFBUyxDQUNQdEwsS0FBTW1MLEVBQUFBLEdBQUFBLFNBQ05DLFFBQVMsQ0FDUFIsS0FBTVEsRUFBUVIsS0FDZEUsV0FBWU0sRUFBUU4sV0FDcEJDLFdBQVlLLEVBQVFMLGNBSXhCYyxFQUFrQkosRUFDbkIsSUFaS1EsVUFnQlQsQ0RqQjRCQyxDQUFrQixDQUMzQ1osU0FBQUEsRUFDQU8sa0JBQUFBLEVBQUFBLEdBQ0FKLGdCQUFBQSxJQUhNRyxlQU1BTyxFRWxCa0IsU0FBQ3BMLEdBQzNCLElBRU1WLEVBQVksQ0FDaEJpTCxTQUFVaEwsSUFBQUEsS0FBQUEsV0FDVnFLLGFBQWFFLEVBQUFBLEVBQUFBLElBQXVCekUsRUFBQUEsSUFDcEN5RixrQkFBbUJ2TCxJQUFBQSxLQUFBQSxXQUNuQm1MLGdCQUFpQkssRUFBQUEsSUFHbkJ4TCxJQUFBQSxlQUF5QkQsRUFBV1UsRUFBTyxPQVR6Qix1QkFXbEIsSUFDRXVLLEVBSUV2SyxFQUpGdUssU0FDQVgsRUFHRTVKLEVBSEY0SixZQUNBa0IsRUFFRTlLLEVBRkY4SyxrQkFDQUosRUFDRTFLLEVBREYwSyxnQkFpQkYsTUFBTyxDQUFFVSxrQkFkK0JKLEVBQUFBLEdBQUFBLEdBQVMsQ0FDL0NDLFVBQVcsU0FBQ1osR0FDVkUsRUFBUyxDQUNQdEwsS0FBTW1MLEVBQUFBLEdBQUFBLGtCQUNOQyxRQUFTLENBQ1BSLEtBQU1ELEVBQVl5QixPQUFPaEIsRUFBUVIsTUFDakNFLFdBQVlNLEVBQVFOLGNBSXhCZSxFQUFrQkosRUFDbkIsSUFYS1EsVUFlVCxDRmhCOEJJLENBQW9CLENBQy9DZixTQUFBQSxFQUNBWCxZQUFheEUsRUFBUXlFLEtBQ3JCaUIsa0JBQUFBLEVBQUFBLEdBQ0FKLGdCQUFBQSxJQUpNVSxpQkFPRkcsR0FBdUJoRCxFQUFBQSxFQUFBQSxjQUFZLFdBQ3ZDc0MsRUFBZUwsRUFDaEIsR0FBRSxDQUFDSyxFQUFnQkwsSUFFZGdCLEdBQXlCakQsRUFBQUEsRUFBQUEsY0FBWSxXQUN6QyxJQUFNa0QsR0FBa0JDLEVBQUFBLEVBQUFBLElBQWtCdEcsRUFBUTJFLFlBRTlDMEIsRUFBZ0I3SCxRQUNsQndILEVBQWlCSyxFQUVwQixHQUFFLENBQUNMLEVBQWtCaEcsRUFBUTJFLGFBRTlCLE9BQUtVLEdBT0gsaUJBQUtrQixJQUFLakIsRUFBVixXQUNFLFNBQUMsRUFBRCxDQUNFdEYsUUFBU0EsRUFBUXlFLEtBQ2pCdEUsa0JBQW1CSCxFQUFRNEUsV0FDM0J4RSxhQUFjZ0csS0FFaEIsU0FBQyxHQUFELENBQ0VuSixRQUFTQSxFQUNUbUQsYUFBYytGLFFBYmhCLFNBQUMsRUFBRCxHQWlCTCxFQUVEOUgsR0FBdUJuRSxVQUFZLENBQ2pDK0MsUUFBUzlDLElBQUFBLE9BQUFBLFdBQ1RpTCxXQUFZakwsSUFBQUEsT0FBQUEsV0FDWnFLLFlBQWFySyxJQUFBQSxNQUFnQixDQUMzQnNLLE1BQU1DLEVBQUFBLEVBQUFBLElBQXVCekUsRUFBQUEsSUFDN0IwRSxZQUFZRCxFQUFBQSxFQUFBQSxJQUF1QnZLLElBQUFBLE9BQUFBLFlBQ25DeUssWUFBWUYsRUFBQUEsRUFBQUEsSUFBdUJ2SyxJQUFBQSxPQUFBQSxjQUNsQzZCLFdBQ0hxSixnQkFBaUJsTCxJQUFBQSxLQUFBQSxZQUduQixVLDQ4QkdqRUEsSUFBTXFNLEdBQWtCLFNBQUMsR0FBcUIsSUFBbkJDLEVBQW1CLEVBQW5CQSxhQUNuQkMsR0FBV0MsRUFBQUEsRUFBQUEsTUFFWEMsRUFEUyxJQUFJQyxnQkFBZ0JILEVBQVNJLFFBQ2hCQyxJQUFJLE1BQzFCOUosRUFBVXFELFNBQVNzRyxFQUFjLEtBRWxDN0MsRUFBQUEsRUFBQUEsSUFBZTlHLEtBQ2xCK0osRUFBQUEsRUFBQUEsSUFBcUJuRixFQUFBQSxHQUFBQSxtQkFHdkIsSUFBTTFGLEVBQVk4SyxFQUFBQSxHQUFBQSxLQUNaN0IsR0FBYThCLEVBQUFBLEVBQUFBLElBQWNqSyxFQUFTZCxHQUUxQyxNQUEwQndHLEVBQUFBLEVBQUFBLFVBQVMsQ0FBQyxHQUFwQyxHQUFPL0YsRUFBUCxLQUFjdUssRUFBZCxLQUNBLE1BQXdDeEUsRUFBQUEsRUFBQUEsVUFBUyxJQUFqRCxHQUFPekUsRUFBUCxLQUFxQmtKLEVBQXJCLEtBQ0EsTUFBc0N6RSxFQUFBQSxFQUFBQSxVQUFTLENBQUMsR0FBaEQsR0FBTzZCLEVBQVAsS0FBb0I2QyxFQUFwQixLQUVBLEVDekJvQixTQUFDek0sR0FDckIsSUFFTVYsRUFBWSxDQUNoQitDLFFBQVM5QyxJQUFBQSxPQUFBQSxXQUNUZ04sU0FBVWhOLElBQUFBLEtBQUFBLFdBQ1ZzTSxhQUFjdE0sSUFBQUEsS0FBQUEsWUFHaEJBLElBQUFBLGVBQXlCRCxFQUFXVSxFQUFPLE9BUnpCLGlCQVVsQixJQUNFcUMsRUFHRXJDLEVBSEZxQyxRQUNBa0ssRUFFRXZNLEVBRkZ1TSxTQUNBVixFQUNFN0wsRUFERjZMLGFBR0YsR0FHSWIsRUFBQUEsR0FBQUEsR0FBUyxDQUNYMEIsS0FBS0MsRUFBQUEsRUFBQUEsSUFBWXRLLEdBQ2pCdUssVUFBVyxXQUNUZixHQUFhLEVBQ2QsRUFDRFosVUFBVyxTQUFDWixHQUNWLElBQU1ySSxHQUFRNkssRUFBQUEsR0FBQUEsR0FBV3hDLEVBQVFSLEtBQUtpRCxRQUFRLElBQzlDUCxFQUFTdkssR0FDVDZKLEdBQWEsRUFDZCxFQUNEa0IsUUFBUyxXQUNQbEIsR0FBYSxFQUNkLElBR0gsTUFBTyxDQUFFbUIsYUFsQlQsRUFDRUMsUUFpQnFCQyxjQWxCdkIsRUFFRUMsU0FpQkgsQ0RSS0MsQ0FBYyxDQUNoQi9LLFFBQUFBLEVBQ0FrSyxTQUFBQSxFQUNBVixhQUFBQSxJQUxBbUIsRUFERixFQUNFQSxhQUNBRSxFQUZGLEVBRUVBLGNBUUF6QyxFRXJDb0IsU0FBQ3pLLEdBQ3ZCLElBRU1WLEVBQVksQ0FDaEJrTCxXQUFZakwsSUFBQUEsT0FBQUEsV0FDWmtOLGVBQWdCbE4sSUFBQUEsS0FBQUEsWUFHbEJBLElBQUFBLGVBQXlCRCxFQUFXVSxFQUFPLE9BUHpCLG1CQVNsQixJQUNFd0ssRUFFRXhLLEVBRkZ3SyxXQUNBaUMsRUFDRXpNLEVBREZ5TSxlQVlGLE1BQU8sQ0FBRWhDLGlCQVBMTyxFQUFBQSxHQUFBQSxHQUFTLENBQ1gwQixJQUFLbEMsRUFDTFMsVUFBVyxTQUFDWixHQUNWb0MsRUFBZXBDLEVBQ2hCLElBTEQ4QyxTQVNILENGYUtFLENBQWdCLENBQ2xCN0MsV0FBQUEsRUFDQWlDLGVBQUFBLElBSEFoQyxnQkFPQWpILEVHMUN5QixTQUFDeEQsR0FDNUIsSUFFTVYsRUFBWSxDQUNoQitDLFFBQVM5QyxJQUFBQSxPQUFBQSxXQUNUaU4sZ0JBQWlCak4sSUFBQUEsS0FBQUEsWUFHbkJBLElBQUFBLGVBQXlCRCxFQUFXVSxFQUFPLE9BUHpCLHdCQVNsQixJQUNFcUMsRUFFRXJDLEVBRkZxQyxRQUNBbUssRUFDRXhNLEVBREZ3TSxnQkFZRixNQUFPLENBQUVoSixzQkFQTHdILEVBQUFBLEdBQUFBLEdBQVMsQ0FDWDBCLEtBQUtZLEVBQUFBLEVBQUFBLElBQW1CakwsR0FDeEI0SSxVQUFXLFNBQUNaLEdBQ1ZtQyxFQUFnQm5DLEVBQVFSLEtBQUtySSxLQUFJLFNBQUNDLEdBQUQsT0FBVW9MLEVBQUFBLEdBQUFBLEdBQVdwTCxFQUFyQixJQUNsQyxJQUxEMEwsU0FTSCxDSGtCS0ksQ0FBcUIsQ0FDdkJsTCxRQUFBQSxFQUNBbUssZ0JBQUFBLElBSEFoSixxQkFNRixHQUFJd0osR0FBZ0JFLEdBQWlCTSxJQUFReEwsSUFDM0NvSyxFQUFBQSxFQUFBQSxXQUNLLElBQUtjLEVBQ1YsT0FDRSxTQUFDLEVBQUQsQ0FBNEIzTCxVQUFXQSxJQWEzQyxPQUNFLFNBQUMsRUFBRCxDQUNFUyxNQUFPQSxFQUNQVCxVQUFXQSxFQUNYK0IsYUFBY0EsRUFDZEMscUJBQXNCMkosRUFDdEIxSixxQkFBc0JBLEVBQ3RCQyx1QkFoQjJCLGtCQUM3QixTQUFDLEdBQUQsQ0FDRXBCLFFBQVNBLEVBQ1RtSSxXQUFZQSxFQUNaWixZQUFhQSxFQUNiYSxnQkFBaUJBLEdBTFUsR0FtQmhDLEVBRURtQixHQUFnQnRNLFVBQVksQ0FDMUJ1TSxhQUFjdE0sSUFBQUEsS0FBQUEsWUFHaEIsUyIsInNvdXJjZXMiOlsid2VicGFjazovL2FwcC1yZWFjdC8uL3NyYy9jb21wb25lbnRzL2Zvcm1zL2J1dHRvbnMvc3VibWl0L3N1Ym1pdC5qc3giLCJ3ZWJwYWNrOi8vYXBwLXJlYWN0Ly4vc3JjL2NvbXBvbmVudHMvZm9ybXMvY29tbW9uL2Vycm9yLWFsZXJ0L2Vycm9yLWFsZXJ0LmpzeCIsIndlYnBhY2s6Ly9hcHAtcmVhY3QvLi9zcmMvY29tcG9uZW50cy9mb3Jtcy9jdXN0b20tZWxlbWVudHMvYWxlcnQvYWxlcnQuanN4Iiwid2VicGFjazovL2FwcC1yZWFjdC8uL3NyYy9jb21wb25lbnRzL2Zvcm1zL2N1c3RvbS1lbGVtZW50cy9lcnJvci9lcnJvci5qc3giLCJ3ZWJwYWNrOi8vYXBwLXJlYWN0Ly4vc3JjL2NvbXBvbmVudHMvZm9ybXMvY3VzdG9tLWVsZW1lbnRzL2ZpZWxkL2ZpZWxkLmpzeCIsIndlYnBhY2s6Ly9hcHAtcmVhY3QvLi9zcmMvY29tcG9uZW50cy9wcm9wZXJ0eS9mZWF0dXJlcy9mZWF0dXJlcy5qc3giLCJ3ZWJwYWNrOi8vYXBwLXJlYWN0Ly4vc3JjL2NvbXBvbmVudHMvcHJvcGVydHkvZ2FsbGVyeS9nYWxsZXJ5LmpzeCIsIndlYnBhY2s6Ly9hcHAtcmVhY3QvLi9zcmMvY29tcG9uZW50cy9wcm9wZXJ0eS9jb250ZW50L2NvbnRlbnQuanN4Iiwid2VicGFjazovL2FwcC1yZWFjdC8uL3NyYy9jb21wb25lbnRzL3Byb3BlcnR5L25lYXJieS9uZWFyYnkuanN4Iiwid2VicGFjazovL2FwcC1yZWFjdC8uL3NyYy9wYWdlcy9yb29tL2NvbnRlbnQvY29udGVudC5qc3giLCJ3ZWJwYWNrOi8vYXBwLXJlYWN0Ly4vc3JjL2NvbXBvbmVudHMvcHJvcGVydHkvZmVhdHVyZXMtcGxhY2Vob2xkZXIvZmVhdHVyZXMtcGxhY2Vob2xkZXIuanN4Iiwid2VicGFjazovL2FwcC1yZWFjdC8uL3NyYy9jb21wb25lbnRzL3Byb3BlcnR5L2dhbGxlcnktcGxhY2Vob2xkZXIvZ2FsbGVyeS1wbGFjZWhvbGRlci5qc3giLCJ3ZWJwYWNrOi8vYXBwLXJlYWN0Ly4vc3JjL2NvbXBvbmVudHMvcmF0aW5nL3N0YXJzLXBsYWNlaG9sZGVyL3N0YXJzLXBsYWNlaG9sZGVyLmpzeCIsIndlYnBhY2s6Ly9hcHAtcmVhY3QvLi9zcmMvY29tcG9uZW50cy9wcm9wZXJ0eS9jb250ZW50LXBsYWNlaG9sZGVyL2NvbnRlbnQtcGxhY2Vob2xkZXIuanN4Iiwid2VicGFjazovL2FwcC1yZWFjdC8uL3NyYy9wYWdlcy9yb29tL2NvbnRlbnQtcGxhY2Vob2xkZXIvY29udGVudC1wbGFjZWhvbGRlci5qc3giLCJ3ZWJwYWNrOi8vYXBwLXJlYWN0Ly4vc3JjL2NvbXBvbmVudHMvcmV2aWV3L2l0ZW0vaXRlbS5qc3giLCJ3ZWJwYWNrOi8vYXBwLXJlYWN0Ly4vc3JjL2NvbXBvbmVudHMvcmV2aWV3L2xpc3QvbGlzdC5qc3giLCJ3ZWJwYWNrOi8vYXBwLXJlYWN0Ly4vc3JjL2NvbXBvbmVudHMvcHJvcGVydHkvcmV2aWV3cy9yZXZpZXdzLmpzeCIsIndlYnBhY2s6Ly9hcHAtcmVhY3QvLi9zcmMvY29tcG9uZW50cy9wcm9wZXJ0eS9yZXZpZXdzLXBsYWNlaG9sZGVyL3Jldmlld3MtcGxhY2Vob2xkZXIuanN4Iiwid2VicGFjazovL2FwcC1yZWFjdC8uL3NyYy9jb21wb25lbnRzL2Zvcm1zL2ZpZWxkcy9wcm9wZXJ0eS1yZXZpZXcvcHJvcGVydHktcmV2aWV3LmpzeCIsIndlYnBhY2s6Ly9hcHAtcmVhY3QvLi9zcmMvaWNvbnMvc3Rhci9zdGFyLmpzeCIsIndlYnBhY2s6Ly9hcHAtcmVhY3QvLi9zcmMvY29tcG9uZW50cy9mb3Jtcy9yZXZpZXcvcmF0aW5nL3JhdGluZy5qc3giLCJ3ZWJwYWNrOi8vYXBwLXJlYWN0Ly4vc3JjL2NvbXBvbmVudHMvZm9ybXMvcmV2aWV3L3N1Ym1pdC9zdWJtaXQuanN4Iiwid2VicGFjazovL2FwcC1yZWFjdC8uL3NyYy9jb21wb25lbnRzL2Zvcm1zL3Jldmlldy9zdWNjZXNzL3N1Y2Nlc3MuanN4Iiwid2VicGFjazovL2FwcC1yZWFjdC8uL3NyYy9jb21wb25lbnRzL2Zvcm1zL3Jldmlldy92YWxpZGF0aW9uLmpzIiwid2VicGFjazovL2FwcC1yZWFjdC8uL3NyYy9jb21wb25lbnRzL2Zvcm1zL3Jldmlldy93cmFwcGVyL3dyYXBwZXIuanN4Iiwid2VicGFjazovL2FwcC1yZWFjdC8uL3NyYy9jb21wb25lbnRzL3Jldmlldy9mb3JtLWNvbnRhaW5lci9mb3JtLWNvbnRhaW5lci5qc3giLCJ3ZWJwYWNrOi8vYXBwLXJlYWN0Ly4vc3JjL2NvbXBvbmVudHMvcHJvcGVydHkvcmV2aWV3cy13cmFwcGVyL3VzZS1yZXZpZXdzLXJlZHVjZXIuanMiLCJ3ZWJwYWNrOi8vYXBwLXJlYWN0Ly4vc3JjL2NvbXBvbmVudHMvcHJvcGVydHkvcmV2aWV3cy13cmFwcGVyL3Jldmlld3Mtd3JhcHBlci5qc3giLCJ3ZWJwYWNrOi8vYXBwLXJlYWN0Ly4vc3JjL2NvbXBvbmVudHMvcHJvcGVydHkvcmV2aWV3cy13cmFwcGVyL3VzZS1yZWZldGNoLXJldmlld3MuanMiLCJ3ZWJwYWNrOi8vYXBwLXJlYWN0Ly4vc3JjL2NvbXBvbmVudHMvcHJvcGVydHkvcmV2aWV3cy13cmFwcGVyL3VzZS1mZXRjaC1tb3JlLXJldmlld3MuanMiLCJ3ZWJwYWNrOi8vYXBwLXJlYWN0Ly4vc3JjL3BhZ2VzL3Jvb20vd3JhcHBlci93cmFwcGVyLmpzeCIsIndlYnBhY2s6Ly9hcHAtcmVhY3QvLi9zcmMvcGFnZXMvcm9vbS93cmFwcGVyL3VzZS1mZXRjaC1vZmZlci5qcyIsIndlYnBhY2s6Ly9hcHAtcmVhY3QvLi9zcmMvcGFnZXMvcm9vbS93cmFwcGVyL3VzZS1mZXRjaC1yZXZpZXdzLmpzIiwid2VicGFjazovL2FwcC1yZWFjdC8uL3NyYy9wYWdlcy9yb29tL3dyYXBwZXIvdXNlLWZldGNoLW9mZmVycy1uZWFyYnkuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFNwaW5uZXIgZnJvbSAncmVhY3QtYm9vdHN0cmFwL1NwaW5uZXInO1xuXG5jb25zdCBGb3JtQnV0dG9uU3VibWl0ID0gKHtcbiAgYWRkaXRpb25hbENsYXNzLFxuICBpc0xvYWRpbmcsXG4gIHRpdGxlLFxufSkgPT4ge1xuICByZXR1cm4gKFxuICAgIDxidXR0b25cbiAgICAgIGNsYXNzTmFtZT17XG4gICAgICAgIGNsc3goJ2J0biBidG4tcHJpbWFyeScsIGFkZGl0aW9uYWxDbGFzcylcbiAgICAgIH1cbiAgICAgIGRpc2FibGVkPXtpc0xvYWRpbmd9XG4gICAgICB0eXBlPVwic3VibWl0XCJcbiAgICA+XG4gICAgICB7aXNMb2FkaW5nICYmIChcbiAgICAgICAgPD5cbiAgICAgICAgICA8U3Bpbm5lclxuICAgICAgICAgICAgYXM9XCJzcGFuXCJcbiAgICAgICAgICAgIGFuaW1hdGlvbj1cImJvcmRlclwiXG4gICAgICAgICAgICBzaXplPVwic21cIlxuICAgICAgICAgICAgcm9sZT1cInN0YXR1c1wiXG4gICAgICAgICAgICBhcmlhLWhpZGRlbj1cInRydWVcIlxuICAgICAgICAgIC8+XG4gICAgICAgICAgJm5ic3A7XG4gICAgICAgIDwvPlxuICAgICAgKX1cbiAgICAgIHt0aXRsZX1cbiAgICA8L2J1dHRvbj5cbiAgKTtcbn07XG5cbkZvcm1CdXR0b25TdWJtaXQucHJvcFR5cGVzID0ge1xuICBhZGRpdGlvbmFsQ2xhc3M6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgaXNMb2FkaW5nOiBQcm9wVHlwZXMuYm9vbC5pc1JlcXVpcmVkLFxuICB0aXRsZTogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgRm9ybUJ1dHRvblN1Ym1pdDtcbiIsImltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBDdXN0b21BbGVydCBmcm9tICcuLi8uLi9jdXN0b20tZWxlbWVudHMvYWxlcnQvYWxlcnQnO1xuaW1wb3J0IHsgQnNTdHlsZVR5cGVzIH0gZnJvbSAnfi9jb25zdGFudHMnO1xuXG5jb25zdCBFcnJvckFsZXJ0ID0gKHsgYWxlcnRDbGFzcywgZXJyb3JNc2cgfSkgPT4ge1xuICByZXR1cm4gKFxuICAgIDxDdXN0b21BbGVydFxuICAgICAgYWxlcnRDbGFzcz17Y2xzeChhbGVydENsYXNzKX1cbiAgICAgIGFsZXJ0VHlwZT17QnNTdHlsZVR5cGVzLkRBTkdFUn1cbiAgICA+XG4gICAgICB7ZXJyb3JNc2d9XG4gICAgPC9DdXN0b21BbGVydD5cbiAgKTtcbn07XG5cbkVycm9yQWxlcnQucHJvcFR5cGVzID0ge1xuICBhbGVydENsYXNzOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBlcnJvck1zZzogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgRXJyb3JBbGVydDtcblxuIiwiaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IEJzU3R5bGVUeXBlcyB9IGZyb20gJ34vY29uc3RhbnRzJztcblxuY29uc3QgQ3VzdG9tQWxlcnQgPSAoe1xuICBhbGVydENsYXNzID0gJycsXG4gIGFsZXJ0VHlwZSA9IEJzU3R5bGVUeXBlcy5JTkZPLFxuICBjaGlsZHJlbiA9IG51bGwsXG4gIGNvbnRhaW5lckNsYXNzID0gJycsXG59KSA9PiAoXG4gIDxkaXYgY2xhc3NOYW1lPXtgYXBwLWZvcm0tZ3JvdXAgZm9ybS1ncm91cCAke2NvbnRhaW5lckNsYXNzfWB9PlxuICAgIDxkaXZcbiAgICAgIGNsYXNzTmFtZT17YGFsZXJ0IGFsZXJ0LSR7YWxlcnRUeXBlfSB0ZXh0LWNlbnRlciAke2FsZXJ0Q2xhc3N9YH1cbiAgICAgIHJvbGU9XCJhbGVydFwiXG4gICAgPlxuICAgICAge2NoaWxkcmVufVxuICAgIDwvZGl2PlxuICA8L2Rpdj5cbik7XG5cbkN1c3RvbUFsZXJ0LnByb3BUeXBlcyA9IHtcbiAgYWxlcnRDbGFzczogUHJvcFR5cGVzLnN0cmluZyxcbiAgYWxlcnRUeXBlOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBjaGlsZHJlbjogUHJvcFR5cGVzLm9uZU9mVHlwZShbXG4gICAgUHJvcFR5cGVzLmVsZW1lbnQsXG4gICAgUHJvcFR5cGVzLnN0cmluZyxcbiAgXSksXG4gIGNvbnRhaW5lckNsYXNzOiBQcm9wVHlwZXMuc3RyaW5nLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgQ3VzdG9tQWxlcnQ7XG4iLCJjb25zdCBDdXN0b21FcnJvciA9IChwcm9wcykgPT4gKFxuICA8ZGl2IGNsYXNzTmFtZT1cImFwcC1mb3JtLWNvbnRyb2wtZXJyb3JcIiB7Li4ucHJvcHN9PjwvZGl2PlxuKTtcblxuZXhwb3J0IGRlZmF1bHQgQ3VzdG9tRXJyb3I7XG4iLCJpbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgRXJyb3JNZXNzYWdlLCBGaWVsZCB9IGZyb20gJ2Zvcm1payc7XG5pbXBvcnQgQ3VzdG9tRXJyb3IgZnJvbSAnLi4vZXJyb3IvZXJyb3InO1xuXG5jb25zdCBDdXN0b21GaWVsZCA9ICh7XG4gIGF1dG9Db21wbGV0ZSA9ICcnLFxuICBjaGlsZHJlbiA9IG51bGwsXG4gIGNvbXBvbmVudCA9ICcnLFxuICBjb250YWluZXJDbGFzcyA9ICcnLFxuICBmaWVsZENsYXNzID0gJycsXG4gIGZpZWxkSWQsXG4gIGZpZWxkTmFtZSxcbiAgZmllbGRUeXBlLFxuICBsYWJlbFRpdGxlLFxuICBvbkZvY3VzID0gKCkgPT4gZmFsc2UsXG4gIHBsYWNlaG9sZGVyID0gJycsXG59KSA9PiAoXG4gIDxkaXYgY2xhc3NOYW1lPXtgYXBwLWZvcm0tZ3JvdXAgZm9ybS1ncm91cCAke2NvbnRhaW5lckNsYXNzfWB9PlxuICAgIDxsYWJlbFxuICAgICAgY2xhc3NOYW1lPVwidmlzdWFsbHktaGlkZGVuXCJcbiAgICAgIGh0bWxGb3I9e2ZpZWxkTmFtZX1cbiAgICA+XG4gICAgICB7bGFiZWxUaXRsZX1cbiAgICA8L2xhYmVsPlxuICAgIDxGaWVsZFxuICAgICAgY2xhc3NOYW1lPXtgYXBwLWZvcm0tY29udHJvbCBmb3JtLWNvbnRyb2wgJHtmaWVsZENsYXNzfWB9XG4gICAgICBhdXRvQ29tcGxldGU9e2F1dG9Db21wbGV0ZX1cbiAgICAgIGNvbXBvbmVudD17Y29tcG9uZW50fVxuICAgICAgaWQ9e2ZpZWxkSWR9XG4gICAgICBuYW1lPXtmaWVsZE5hbWV9XG4gICAgICBwbGFjZWhvbGRlcj17cGxhY2Vob2xkZXJ9XG4gICAgICB0eXBlPXtmaWVsZFR5cGV9XG4gICAgICBvbkZvY3VzPXtvbkZvY3VzfVxuICAgID5cbiAgICAgIHtjaGlsZHJlbn1cbiAgICA8L0ZpZWxkPlxuICAgIDxFcnJvck1lc3NhZ2VcbiAgICAgIG5hbWU9e2ZpZWxkTmFtZX1cbiAgICAgIGNvbXBvbmVudD17Q3VzdG9tRXJyb3J9XG4gICAgLz5cbiAgPC9kaXY+XG4pO1xuXG5DdXN0b21GaWVsZC5wcm9wVHlwZXMgPSB7XG4gIGF1dG9Db21wbGV0ZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgY2hpbGRyZW46IFByb3BUeXBlcy5lbGVtZW50LFxuICBjb21wb25lbnQ6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1xuICAgIFByb3BUeXBlcy5lbGVtZW50VHlwZSxcbiAgICBQcm9wVHlwZXMuc3RyaW5nLFxuICBdKSxcbiAgY29udGFpbmVyQ2xhc3M6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGZpZWxkQ2xhc3M6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGZpZWxkSWQ6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgZmllbGROYW1lOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gIGZpZWxkVHlwZTogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICBsYWJlbFRpdGxlOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gIG9uRm9jdXM6IFByb3BUeXBlcy5mdW5jLFxuICBwbGFjZWhvbGRlcjogUHJvcFR5cGVzLnN0cmluZyxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IEN1c3RvbUZpZWxkO1xuIiwiaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IE9mZmVyVGl0bGVzIH0gZnJvbSAnfi9jb25zdGFudHMnO1xuaW1wb3J0IHsgY2FwaXRhbGl6ZUZpcnN0TGV0dGVyIH0gZnJvbSAnfi91dGlscyc7XG5pbXBvcnQgJy4vZmVhdHVyZXMubGVzcyc7XG5cbmNvbnN0IFByb3BlcnR5RmVhdHVyZXMgPSAoeyBmZWF0dXJlcyB9KSA9PiB7XG4gIGNvbnN0IHsgYmVkcm9vbXMsIHR5cGUgfSA9IGZlYXR1cmVzO1xuXG4gIHJldHVybiAoXG4gICAgPHVsIGNsYXNzTmFtZT1cImQtZmxleCBhbGlnbi1pdGVtcy1jZW50ZXIganVzdGlmeS1jb250ZW50LWNlbnRlclxuICAgICAgbGlzdC11bnN0eWxlZCBwcm9wZXJ0eS1mZWF0dXJlc1wiXG4gICAgPlxuICAgICAgPGxpIGNsYXNzTmFtZT1cInByb3BlcnR5LWZlYXR1cmUgcHJvcGVydHktZmVhdHVyZS1lbnRpcmVcIj5cbiAgICAgICAge2NhcGl0YWxpemVGaXJzdExldHRlcih0eXBlKX1cbiAgICAgIDwvbGk+XG4gICAgICA8bGkgY2xhc3NOYW1lPVwicHJvcGVydHktZmVhdHVyZSBwcm9wZXJ0eS1mZWF0dXJlLWJlZHJvb21zXCI+XG4gICAgICAgIHtgJHtiZWRyb29tc30gJHtPZmZlclRpdGxlcy5CRURST09NU31gfVxuICAgICAgPC9saT5cbiAgICA8L3VsPlxuICApO1xufTtcblxuUHJvcGVydHlGZWF0dXJlcy5wcm9wVHlwZXMgPSBQcm9wVHlwZXMuc2hhcGUoe1xuICBiZWRyb29tczogUHJvcFR5cGVzLm51bWJlci5pc1JlcXVpcmVkLFxuICB0eXBlOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG59KS5pc1JlcXVpcmVkO1xuXG5leHBvcnQgZGVmYXVsdCBQcm9wZXJ0eUZlYXR1cmVzO1xuIiwiaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IE9mZmVySW1nU2hhcGVzLCBPZmZlclRpdGxlcyB9IGZyb20gJ34vY29uc3RhbnRzJztcbmltcG9ydCAnLi9nYWxsZXJ5Lmxlc3MnO1xuXG5jb25zdCBQcm9wZXJ0eUdhbGxlcnkgPSAoeyBvZmZlclBob3Rvcywgb2ZmZXJUeXBlIH0pID0+IHtcbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNsYXNzTmFtZT1cImQtZmxleCBmbGV4LXdyYXAganVzdGlmeS1jb250ZW50LWJldHdlZW4gbWItNFxuICAgICAgcHJvcGVydHktZ2FsbGVyeVwiXG4gICAgPlxuICAgICAge29mZmVyUGhvdG9zLm1hcCgoaXRlbSkgPT4gKFxuICAgICAgICA8ZGl2IGtleT17aXRlbX0+XG4gICAgICAgICAgPGltZ1xuICAgICAgICAgICAgY2xhc3NOYW1lPVwicm91bmRlZFwiXG4gICAgICAgICAgICBhbHQ9e09mZmVyVGl0bGVzLlBMQUNFX0lNQUdFfVxuICAgICAgICAgICAgd2lkdGg9e09mZmVySW1nU2hhcGVzW29mZmVyVHlwZV0ud2lkdGh9XG4gICAgICAgICAgICBoZWlnaHQ9e09mZmVySW1nU2hhcGVzW29mZmVyVHlwZV0uaGVpZ2h0fVxuICAgICAgICAgICAgc3JjPXtpdGVtfVxuICAgICAgICAgIC8+XG4gICAgICAgIDwvZGl2PlxuICAgICAgKSl9XG4gICAgPC9kaXY+XG4gICk7XG59O1xuXG5Qcm9wZXJ0eUdhbGxlcnkucHJvcFR5cGVzID0ge1xuICBvZmZlclBob3RvczogUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLnN0cmluZykuaXNSZXF1aXJlZCxcbiAgb2ZmZXJUeXBlOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG59O1xuXG5leHBvcnQgZGVmYXVsdCBQcm9wZXJ0eUdhbGxlcnk7XG4iLCJpbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFByb3BlcnR5RmVhdHVyZXMgZnJvbSAnLi4vZmVhdHVyZXMvZmVhdHVyZXMnO1xuaW1wb3J0IFByb3BlcnR5R2FsbGVyeSBmcm9tICcuLi9nYWxsZXJ5L2dhbGxlcnknO1xuaW1wb3J0IEJ1dHRvbkJvb2ttYXJrIGZyb20gJ34vY29tcG9uZW50cy9idXR0b25zL2Jvb2ttYXJrL2Jvb2ttYXJrJztcbmltcG9ydCBSYXRpbmdTdGFycyBmcm9tICd+L2NvbXBvbmVudHMvcmF0aW5nL3N0YXJzL3N0YXJzJztcbmltcG9ydCB7XG4gIEJvb2ttYXJrQnRuVHlwZXMsXG4gIE9mZmVyVGl0bGVzLFxuICBSYXRpbmdUeXBlcyxcbiAgT0ZGRVJfQ1VSUkVOQ1ksXG4gIE9GRkVSX1BSSUNFX1BFUklPRF9OT19TTEFTSCxcbn0gZnJvbSAnfi9jb25zdGFudHMnO1xuaW1wb3J0IHtcbiAgb2ZmZXJQcm9wVHlwZXMsXG59IGZyb20gJ34vcHJvcC10eXBlcyc7XG5pbXBvcnQgJy4vY29udGVudC5sZXNzJztcblxuY29uc3QgUHJvcGVydHlDb250ZW50ID0gKHsgb2ZmZXIsIG9mZmVyVHlwZSB9KSA9PiB7XG4gIHJldHVybiAoXG4gICAgPD5cbiAgICAgIDxQcm9wZXJ0eUdhbGxlcnlcbiAgICAgICAgb2ZmZXJQaG90b3M9e29mZmVyLnBob3Rvc31cbiAgICAgICAgb2ZmZXJUeXBlPXtvZmZlclR5cGV9XG4gICAgICAvPlxuXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cIm1iLTNcIj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJwb3NpdGlvbi1yZWxhdGl2ZSBkLWZsZXggYWxpZ24taXRlbXMtY2VudGVyXG4gICAgICAgICAganVzdGlmeS1jb250ZW50LWNlbnRlciBtYi0zXCJcbiAgICAgICAgPlxuICAgICAgICAgIDxiIGNsYXNzTmFtZT1cInBvc2l0aW9uLXJlbGF0aXZlIGZzLTIgZnN0LWl0YWxpYyBwcm9wZXJ0eS1wcmljZS12YWx1ZVwiPlxuICAgICAgICAgICAge09GRkVSX0NVUlJFTkNZfSZuYnNwO3tvZmZlci5wcmljZX0mbmJzcDtcbiAgICAgICAgICA8L2I+XG4gICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwiZnMtNSBmc3QtaXRhbGljXCI+XG4gICAgICAgICAgICAmbmJzcDt7T0ZGRVJfUFJJQ0VfUEVSSU9EX05PX1NMQVNIfVxuICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICA8QnV0dG9uQm9va21hcmtcbiAgICAgICAgICAgIG9mZmVySWQ9e29mZmVyLmlkfVxuICAgICAgICAgICAgYm9va21hcmtUeXBlPXtCb29rbWFya0J0blR5cGVzW29mZmVyVHlwZV19XG4gICAgICAgICAgLz5cbiAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgPGgxIGNsYXNzTmFtZT1cIm1iLTMgZnMtMSBhcHAtdGl0bGVcIj5cbiAgICAgICAgICB7b2ZmZXIudGl0bGV9XG4gICAgICAgIDwvaDE+XG5cbiAgICAgICAgPFJhdGluZ1N0YXJzXG4gICAgICAgICAgcmF0aW5nPXtvZmZlci5yYXRpbmd9XG4gICAgICAgICAgcmF0aW5nVHlwZT17UmF0aW5nVHlwZXNbb2ZmZXJUeXBlXX1cbiAgICAgICAgICBzaG93VmFsdWU9e3RydWV9XG4gICAgICAgIC8+XG5cbiAgICAgICAgPFByb3BlcnR5RmVhdHVyZXMgZmVhdHVyZXM9e29mZmVyLmZlYXR1cmVzfSAvPlxuXG4gICAgICAgIHtvZmZlci53aWZpICYmIChcbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm1iLTNcIj5cbiAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cImJhZGdlIGJnLXByaW1hcnkgZnMtNS00IGZ3LWJvbGRcbiAgICAgICAgICAgICAgYXBwLXNrZXdlZC1uZWctMTUgcHJvcGVydHktbWFya1wiXG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIHtPZmZlclRpdGxlcy5GUkVFX1dJX0ZJfVxuICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICApfVxuICAgICAgPC9kaXY+XG4gICAgPC8+XG4gICk7XG59O1xuXG5Qcm9wZXJ0eUNvbnRlbnQucHJvcFR5cGVzID0ge1xuICBvZmZlcjogb2ZmZXJQcm9wVHlwZXMsXG4gIG9mZmVyVHlwZTogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgUHJvcGVydHlDb250ZW50O1xuIiwiaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBPZmZlcnNMaXN0IGZyb20gJ34vY29tcG9uZW50cy9vZmZlci9saXN0L2xpc3QnO1xuaW1wb3J0IHVzZU9mZmVyc0xpc3RIb3ZlciBmcm9tICd+L2hvb2tzL3VzZS1vZmZlcnMtbGlzdC1ob3Zlci91c2Utb2ZmZXJzLWxpc3QtaG92ZXInO1xuaW1wb3J0IHsgUmV2aWV3VGl0bGVzIH0gZnJvbSAnfi9jb25zdGFudHMnO1xuaW1wb3J0IHsgb2ZmZXJzUHJvcFR5cGVzIH0gZnJvbSAnfi9wcm9wLXR5cGVzJztcbmltcG9ydCAnLi9uZWFyYnkubGVzcyc7XG5cbmNvbnN0IFByb3BlcnR5TmVhcmJ5ID0gKHsgb2ZmZXJzLCBvZmZlclR5cGUgfSkgPT4ge1xuICBjb25zdCB7XG4gICAgaGFuZGxlT2ZmZXJDYXJkTW91c2VFbnRlcixcbiAgICBoYW5kbGVPZmZlckNhcmRNb3VzZUxlYXZlLFxuICB9ID0gdXNlT2ZmZXJzTGlzdEhvdmVyKCk7XG5cbiAgcmV0dXJuIChcbiAgICA8c2VjdGlvbj5cbiAgICAgIDxoMiBjbGFzc05hbWU9XCJtdC00IG1iLTQgdGV4dC1jZW50ZXIgYXBwLXN1YnRpdGxlXCI+XG4gICAgICAgIHtSZXZpZXdUaXRsZXMuUExBQ0VTX05FQVJCWX1cbiAgICAgIDwvaDI+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cInB0LTIgbXMtYXV0byBtZS1hdXRvIHByb3BlcnR5LW9mZmVycy1uZWFyYnlcIj5cbiAgICAgICAgPE9mZmVyc0xpc3RcbiAgICAgICAgICBvZmZlcnM9e29mZmVyc31cbiAgICAgICAgICBvZmZlclR5cGU9e29mZmVyVHlwZX1cbiAgICAgICAgICBoYW5kbGVPZmZlckNhcmRNb3VzZUVudGVyPXtoYW5kbGVPZmZlckNhcmRNb3VzZUVudGVyfVxuICAgICAgICAgIGhhbmRsZU9mZmVyQ2FyZE1vdXNlTGVhdmU9e2hhbmRsZU9mZmVyQ2FyZE1vdXNlTGVhdmV9XG4gICAgICAgIC8+XG4gICAgICA8L2Rpdj5cbiAgICA8L3NlY3Rpb24+XG4gICk7XG59O1xuXG5Qcm9wZXJ0eU5lYXJieS5wcm9wVHlwZXMgPSB7XG4gIG9mZmVyczogb2ZmZXJzUHJvcFR5cGVzLFxuICBvZmZlclR5cGU6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFByb3BlcnR5TmVhcmJ5O1xuIiwiaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBPZmZlcnNNYXAgZnJvbSAnfi9jb21wb25lbnRzL29mZmVyL21hcC9tYXAnO1xuaW1wb3J0IFByb3BlcnR5Q29udGVudCBmcm9tICd+L2NvbXBvbmVudHMvcHJvcGVydHkvY29udGVudC9jb250ZW50JztcbmltcG9ydCBQcm9wZXJ0eU5lYXJieSBmcm9tICd+L2NvbXBvbmVudHMvcHJvcGVydHkvbmVhcmJ5L25lYXJieSc7XG5pbXBvcnQgeyBvZmZlclByb3BUeXBlcywgb2ZmZXJzUHJvcFR5cGVzIH0gZnJvbSAnfi9wcm9wLXR5cGVzJztcbmltcG9ydCAnLi9jb250ZW50Lmxlc3MnO1xuXG5jb25zdCBQYWdlUm9vbUNvbnRlbnQgPSAoe1xuICBvZmZlcixcbiAgb2ZmZXJUeXBlLFxuICBvZmZlcnNOZWFyYnksXG4gIGlzQ3VycmVudE9mZmVyTG9hZGVkLFxuICBpc09mZmVyc05lYXJieUxvYWRlZCxcbiAgUHJvcGVydHlSZXZpZXdzV3JhcHBlcixcbn0pID0+IHtcbiAgY29uc3QgY2FuU2hvd09mZmVyc05lYXJieSA9IGlzT2ZmZXJzTmVhcmJ5TG9hZGVkICYmXG4gICAgQm9vbGVhbihvZmZlcnNOZWFyYnkubGVuZ3RoKTtcblxuICByZXR1cm4gKFxuICAgIDw+XG4gICAgICA8c2VjdGlvbiBjbGFzc05hbWU9XCJtdC00IG1zLWF1dG8gbWUtYXV0byBtYi0zIHRleHQtY2VudGVyXG4gICAgICAgIHByb3BlcnR5LWNvbnRhaW5lclwiXG4gICAgICA+XG4gICAgICAgIDxQcm9wZXJ0eUNvbnRlbnRcbiAgICAgICAgICBvZmZlcj17b2ZmZXJ9XG4gICAgICAgICAgb2ZmZXJUeXBlPXtvZmZlclR5cGV9XG4gICAgICAgIC8+XG5cbiAgICAgICAgPFByb3BlcnR5UmV2aWV3c1dyYXBwZXIgLz5cblxuICAgICAgICB7Y2FuU2hvd09mZmVyc05lYXJieSAmJiAoXG4gICAgICAgICAgPFByb3BlcnR5TmVhcmJ5XG4gICAgICAgICAgICBvZmZlcnM9e29mZmVyc05lYXJieX1cbiAgICAgICAgICAgIG9mZmVyVHlwZT17b2ZmZXJUeXBlfVxuICAgICAgICAgIC8+XG4gICAgICAgICl9XG4gICAgICA8L3NlY3Rpb24+XG5cbiAgICAgIHtpc0N1cnJlbnRPZmZlckxvYWRlZCAmJiBjYW5TaG93T2ZmZXJzTmVhcmJ5ICYmIChcbiAgICAgICAgPHNlY3Rpb24gY2xhc3NOYW1lPVwibWItNSBwcm9wZXJ0eS1tYXAtY29udGFpbmVyXCI+XG4gICAgICAgICAgPE9mZmVyc01hcFxuICAgICAgICAgICAgY3VycmVudE9mZmVyPXtvZmZlcn1cbiAgICAgICAgICAgIG9mZmVycz17b2ZmZXJzTmVhcmJ5fVxuICAgICAgICAgIC8+XG4gICAgICAgIDwvc2VjdGlvbj5cbiAgICAgICl9XG4gICAgPC8+XG4gICk7XG59O1xuXG5QYWdlUm9vbUNvbnRlbnQucHJvcFR5cGVzID0ge1xuICBvZmZlcjogb2ZmZXJQcm9wVHlwZXMsXG4gIG9mZmVyVHlwZTogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICBvZmZlcnNOZWFyYnk6IG9mZmVyc1Byb3BUeXBlcyxcbiAgaXNDdXJyZW50T2ZmZXJMb2FkZWQ6IFByb3BUeXBlcy5ib29sLmlzUmVxdWlyZWQsXG4gIGlzT2ZmZXJzTmVhcmJ5TG9hZGVkOiBQcm9wVHlwZXMuYm9vbC5pc1JlcXVpcmVkLFxuICBQcm9wZXJ0eVJldmlld3NXcmFwcGVyOiBQcm9wVHlwZXMuZWxlbWVudFR5cGUuaXNSZXF1aXJlZCxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFBhZ2VSb29tQ29udGVudDtcbiIsImltcG9ydCAnLi4vZmVhdHVyZXMvZmVhdHVyZXMubGVzcyc7XG5cbmNvbnN0IFByb3BlcnR5RmVhdHVyZXNQbGFjZWhvbGRlciA9ICgpID0+IHtcbiAgcmV0dXJuIChcbiAgICA8dWwgY2xhc3NOYW1lPVwiZC1mbGV4IGFsaWduLWl0ZW1zLWNlbnRlciBqdXN0aWZ5LWNvbnRlbnQtY2VudGVyXG4gICAgICBsaXN0LXVuc3R5bGVkIHByb3BlcnR5LWZlYXR1cmVzIHBsYWNlaG9sZGVyLWdsb3dcIlxuICAgID5cbiAgICAgIDxsaSBjbGFzc05hbWU9XCJjb2wtMSBwcm9wZXJ0eS1mZWF0dXJlIHBsYWNlaG9sZGVyXCI+PC9saT5cbiAgICAgIDxsaSBjbGFzc05hbWU9XCJjb2wtMSBwcm9wZXJ0eS1mZWF0dXJlIHBsYWNlaG9sZGVyXCI+PC9saT5cbiAgICA8L3VsPlxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgUHJvcGVydHlGZWF0dXJlc1BsYWNlaG9sZGVyO1xuIiwiaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IFJPT01fTUFYX1BIT1RPU19DT1VOVCwgT2ZmZXJJbWdTaGFwZXMgfSBmcm9tICd+L2NvbnN0YW50cyc7XG5pbXBvcnQgeyBnZXRBcnJheU9mVW5kZWZpbmVkcyB9IGZyb20gJ34vdXRpbHMnO1xuaW1wb3J0ICcuLi9nYWxsZXJ5L2dhbGxlcnkubGVzcyc7XG5cbmNvbnN0IFByb3BlcnR5R2FsbGVyeVBsYWNlaG9sZGVyID0gKHsgb2ZmZXJUeXBlIH0pID0+IHtcbiAgY29uc3QgZGF0YUFycmF5ID0gZ2V0QXJyYXlPZlVuZGVmaW5lZHMoUk9PTV9NQVhfUEhPVE9TX0NPVU5UKTtcblxuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPVwiZC1mbGV4IGZsZXgtd3JhcCBqdXN0aWZ5LWNvbnRlbnQtYmV0d2VlbiBtYi00XG4gICAgICBwcm9wZXJ0eS1nYWxsZXJ5XCJcbiAgICA+XG4gICAgICB7ZGF0YUFycmF5Lm1hcCgoXywgaWR4KSA9PiAoXG4gICAgICAgIDxkaXZcbiAgICAgICAgICBrZXk9e2lkeH1cbiAgICAgICAgICBjbGFzc05hbWU9XCJyb3VuZGVkIHBsYWNlaG9sZGVyXCJcbiAgICAgICAgICBzdHlsZT17e1xuICAgICAgICAgICAgd2lkdGg6IGAke09mZmVySW1nU2hhcGVzW29mZmVyVHlwZV0ud2lkdGh9cHhgLFxuICAgICAgICAgICAgaGVpZ2h0OiBgJHtPZmZlckltZ1NoYXBlc1tvZmZlclR5cGVdLmhlaWdodH1weGAsXG4gICAgICAgICAgfX1cbiAgICAgICAgPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICkpfVxuICAgIDwvZGl2PlxuXG4gICk7XG59O1xuXG5Qcm9wZXJ0eUdhbGxlcnlQbGFjZWhvbGRlci5wcm9wVHlwZXMgPSB7XG4gIG9mZmVyVHlwZTogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgUHJvcGVydHlHYWxsZXJ5UGxhY2Vob2xkZXI7XG4iLCJpbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgUmF0aW5nQ2xhc3NlcyB9IGZyb20gJ34vY29uc3RhbnRzJztcbmltcG9ydCAnLi4vc3RhcnMvc3RhcnMubGVzcyc7XG5cbmNvbnN0IFJhdGluZ1N0YXJzUGxhY2Vob2xkZXIgPSAoeyByYXRpbmdUeXBlLCBzaG93VmFsdWUgPSBmYWxzZSB9KSA9PiB7XG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9e2Ake1JhdGluZ0NsYXNzZXNbcmF0aW5nVHlwZV1bJ3JhdGluZyddfSByYXRpbmdgfT5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPXtgJHtSYXRpbmdDbGFzc2VzW3JhdGluZ1R5cGVdWydzdGFycyddfSByYXRpbmctc3RhcnNgfT48L2Rpdj5cbiAgICAgIHtzaG93VmFsdWUgJiYgKFxuICAgICAgICA8c3BhblxuICAgICAgICAgIGNsYXNzTmFtZT17YCR7UmF0aW5nQ2xhc3Nlc1tyYXRpbmdUeXBlXVsndmFsdWUnXX0gYmctbGlnaHQgcGxhY2Vob2xkZXJgfVxuICAgICAgICA+Jm5ic3A7Jm5ic3A7Jm5ic3A7Jm5ic3A7Jm5ic3A7Jm5ic3A7PC9zcGFuPlxuICAgICAgKX1cbiAgICA8L2Rpdj5cbiAgKTtcbn07XG5cblJhdGluZ1N0YXJzUGxhY2Vob2xkZXIucHJvcFR5cGVzID0ge1xuICByYXRpbmdUeXBlOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gIHNob3dWYWx1ZTogUHJvcFR5cGVzLmJvb2wsXG59O1xuXG5leHBvcnQgZGVmYXVsdCBSYXRpbmdTdGFyc1BsYWNlaG9sZGVyO1xuIiwiaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBQcm9wZXJ0eUZlYXR1cmVzUGxhY2Vob2xkZXIgZnJvbSAnLi4vZmVhdHVyZXMtcGxhY2Vob2xkZXIvZmVhdHVyZXMtcGxhY2Vob2xkZXInO1xuaW1wb3J0IFByb3BlcnR5R2FsbGVyeVBsYWNlaG9sZGVyIGZyb20gJy4uL2dhbGxlcnktcGxhY2Vob2xkZXIvZ2FsbGVyeS1wbGFjZWhvbGRlcic7XG5pbXBvcnQgUmF0aW5nU3RhcnNQbGFjZWhvbGRlciBmcm9tICd+L2NvbXBvbmVudHMvcmF0aW5nL3N0YXJzLXBsYWNlaG9sZGVyL3N0YXJzLXBsYWNlaG9sZGVyJztcbmltcG9ydCB7IFJhdGluZ1R5cGVzIH0gZnJvbSAnfi9jb25zdGFudHMnO1xuXG5jb25zdCBQcm9wZXJ0eUNvbnRlbnRQbGFjZWhvbGRlciA9ICh7IG9mZmVyVHlwZSB9KSA9PiB7XG4gIHJldHVybiAoXG4gICAgPD5cbiAgICAgIDxQcm9wZXJ0eUdhbGxlcnlQbGFjZWhvbGRlciBvZmZlclR5cGU9e29mZmVyVHlwZX0gLz5cblxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJtdC00IG1iLTMgcHktMlwiPlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImQtZmxleCBhbGlnbi1pdGVtcy1jZW50ZXIganVzdGlmeS1jb250ZW50LWNlbnRlciBtYi0zXCI+XG4gICAgICAgICAgPGIgY2xhc3NOYW1lPVwiY29sLTIgZnMtMiBwbGFjZWhvbGRlclwiPjwvYj5cbiAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgPGgxIGNsYXNzTmFtZT1cImNvbC04IG10LTMgbWItMyBmcy0xIGFwcC10aXRsZSBwbGFjZWhvbGRlclwiPjwvaDE+XG5cbiAgICAgICAgPFJhdGluZ1N0YXJzUGxhY2Vob2xkZXJcbiAgICAgICAgICByYXRpbmdUeXBlPXtSYXRpbmdUeXBlcy5ST09NfVxuICAgICAgICAgIHNob3dWYWx1ZT17dHJ1ZX1cbiAgICAgICAgLz5cblxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm10LTNcIj5cbiAgICAgICAgICA8UHJvcGVydHlGZWF0dXJlc1BsYWNlaG9sZGVyIC8+XG4gICAgICAgIDwvZGl2PlxuXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibXQtMyBtYi0zIHB5LTFcIj5cbiAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJjb2wtMyBidG4gYmctcHJpbWFyeSBmcy01LTQgZnctYm9sZCBkaXNhYmxlZFxuICAgICAgICAgICAgYXBwLXNrZXdlZC1uZWctMTUgcHJvcGVydHktbWFyayBwcm9wZXJ0eS1tYXJrLXBsYWNlaG9sZGVyIHBsYWNlaG9sZGVyXCJcbiAgICAgICAgICA+PC9zcGFuPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIDwvPlxuICApO1xufTtcblxuUHJvcGVydHlDb250ZW50UGxhY2Vob2xkZXIucHJvcFR5cGVzID0ge1xuICBvZmZlclR5cGU6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFByb3BlcnR5Q29udGVudFBsYWNlaG9sZGVyO1xuIiwiaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBQcm9wZXJ0eUNvbnRlbnRQbGFjZWhvbGRlciBmcm9tICd+L2NvbXBvbmVudHMvcHJvcGVydHkvY29udGVudC1wbGFjZWhvbGRlci9jb250ZW50LXBsYWNlaG9sZGVyJztcbmltcG9ydCAnLi4vY29udGVudC9jb250ZW50Lmxlc3MnO1xuXG5jb25zdCBQYWdlUm9vbUNvbnRlbnRQbGFjZWhvbGRlciA9ICh7IG9mZmVyVHlwZSB9KSA9PiB7XG4gIHJldHVybiAoXG4gICAgPHNlY3Rpb24gY2xhc3NOYW1lPVwibXQtNCBtcy1hdXRvIG1lLWF1dG8gbWItMyB0ZXh0LWNlbnRlclxuICAgICAgcHJvcGVydHktY29udGFpbmVyIHBsYWNlaG9sZGVyLWdsb3dcIlxuICAgID5cbiAgICAgIDxQcm9wZXJ0eUNvbnRlbnRQbGFjZWhvbGRlciBvZmZlclR5cGU9e29mZmVyVHlwZX0gLz5cbiAgICA8L3NlY3Rpb24+XG4gICk7XG59O1xuXG5QYWdlUm9vbUNvbnRlbnRQbGFjZWhvbGRlci5wcm9wVHlwZXMgPSB7XG4gIG9mZmVyVHlwZTogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgUGFnZVJvb21Db250ZW50UGxhY2Vob2xkZXI7XG4iLCJpbXBvcnQgUmF0aW5nU3RhcnMgZnJvbSAnfi9jb21wb25lbnRzL3JhdGluZy9zdGFycy9zdGFycyc7XG5pbXBvcnQge1xuICBSRVZJRVdfQVZBVEFSX0FMVCxcbiAgUmV2aWV3SW1nU2hhcGVzLFxuICBSYXRpbmdUeXBlcyxcbn0gZnJvbSAnfi9jb25zdGFudHMnO1xuaW1wb3J0IHsgcmV2aWV3UHJvcFR5cGVzIH0gZnJvbSAnfi9wcm9wLXR5cGVzJztcbmltcG9ydCB7IGdldFJldmlld0RhdGUgfSBmcm9tICd+L3V0aWxzJztcblxuY29uc3QgUmV2aWV3SXRlbSA9ICh7IHJldmlldyB9KSA9PiB7XG4gIHJldHVybiAoXG4gICAgPGxpIGNsYXNzTmFtZT1cImQtZmxleCBtYi0zXCI+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImQtZmxleCBmbGV4LWNvbHVtblwiPlxuICAgICAgICA8ZGl2PlxuICAgICAgICAgIDxpbWdcbiAgICAgICAgICAgIHNyYz17cmV2aWV3LmF2YXRhcn1cbiAgICAgICAgICAgIHdpZHRoPXtSZXZpZXdJbWdTaGFwZXMuQVZBVEFSLndpZHRofVxuICAgICAgICAgICAgaGVpZ2h0PXtSZXZpZXdJbWdTaGFwZXMuQVZBVEFSLmhlaWdodH1cbiAgICAgICAgICAgIGFsdD17UkVWSUVXX0FWQVRBUl9BTFR9XG4gICAgICAgICAgLz5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cIm10LTEgZnMtNi0xXCI+e3Jldmlldy5uYW1lfTwvc3Bhbj5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJweC00IHRleHQtc3RhcnRcIj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJtYi0yXCI+XG4gICAgICAgICAgPFJhdGluZ1N0YXJzXG4gICAgICAgICAgICByYXRpbmc9e3Jldmlldy5yYXRpbmd9XG4gICAgICAgICAgICByYXRpbmdUeXBlPXtSYXRpbmdUeXBlcy5SRVZJRVd9XG4gICAgICAgICAgLz5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxwIGNsYXNzTmFtZT1cIm1iLTIgbGgtbWRcIj57cmV2aWV3LmNvbW1lbnR9PC9wPlxuICAgICAgICA8dGltZVxuICAgICAgICAgIGNsYXNzTmFtZT1cImQtYmxvY2sgdGV4dC1tdXRlZCBmcy02LTJcIlxuICAgICAgICAgIGRhdGVUaW1lPXtyZXZpZXcuZGF0ZX1cbiAgICAgICAgPlxuICAgICAgICAgIHtnZXRSZXZpZXdEYXRlKHJldmlldy5kYXRlKX1cbiAgICAgICAgPC90aW1lPlxuICAgICAgPC9kaXY+XG4gICAgPC9saT5cbiAgKTtcbn07XG5cblJldmlld0l0ZW0ucHJvcFR5cGVzID0ge1xuICByZXZpZXc6IHJldmlld1Byb3BUeXBlcyxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFJldmlld0l0ZW07XG4iLCJpbXBvcnQgUmV2aWV3SXRlbSBmcm9tICcuLi9pdGVtL2l0ZW0nO1xuaW1wb3J0IHsgcmV2aWV3c1Byb3BUeXBlcyB9IGZyb20gJ34vcHJvcC10eXBlcyc7XG5cbmNvbnN0IFJldmlld3NMaXN0ID0gKHsgcmV2aWV3cyB9KSA9PiB7XG4gIHJldHVybiAoXG4gICAgPHVsIGNsYXNzTmFtZT1cImxpc3QtdW5zdHlsZWRcIj5cbiAgICAgIHtyZXZpZXdzLm1hcCgoaXRlbSkgPT4gKFxuICAgICAgICA8UmV2aWV3SXRlbVxuICAgICAgICAgIGtleT17aXRlbS5pZH1cbiAgICAgICAgICByZXZpZXc9e2l0ZW19XG4gICAgICAgIC8+XG4gICAgICApKX1cbiAgICA8L3VsPlxuICApO1xufTtcblxuUmV2aWV3c0xpc3QucHJvcFR5cGVzID0ge1xuICByZXZpZXdzOiByZXZpZXdzUHJvcFR5cGVzLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgUmV2aWV3c0xpc3Q7XG4iLCJpbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJldmlld3NMaXN0IGZyb20gJ34vY29tcG9uZW50cy9yZXZpZXcvbGlzdC9saXN0JztcbmltcG9ydCB7IEFwcFRpdGxlcywgUmV2aWV3VGl0bGVzIH0gZnJvbSAnfi9jb25zdGFudHMnO1xuaW1wb3J0IHsgcmV2aWV3c1Byb3BUeXBlcyB9IGZyb20gJ34vcHJvcC10eXBlcyc7XG5cbmNvbnN0IFByb3BlcnR5UmV2aWV3cyA9ICh7XG4gIHJldmlld3MsXG4gIHJldmlld3NUb3RhbENvdW50LFxuICBmZXRjaFJldmlld3MsXG59KSA9PiB7XG4gIGNvbnN0IGNhblNob3dMb2FkTW9yZUJ0biA9IHJldmlld3MubGVuZ3RoIDwgcGFyc2VJbnQocmV2aWV3c1RvdGFsQ291bnQsIDEwKTtcblxuICBjb25zdCBvbkxvYWRNb3JlQnRuQ2xpY2sgPSAoKSA9PiB7XG4gICAgaWYgKGNhblNob3dMb2FkTW9yZUJ0bikge1xuICAgICAgZmV0Y2hSZXZpZXdzKCk7XG4gICAgfVxuICB9O1xuXG4gIGlmIChyZXZpZXdzLmxlbmd0aCkge1xuICAgIHJldHVybiAoXG4gICAgICA8PlxuICAgICAgICA8aDIgY2xhc3NOYW1lPVwiYXBwLXN1YnRpdGxlIG1iLTRcIj5cbiAgICAgICAgICB7QXBwVGl0bGVzLlJFVklFV1N9XG4gICAgICAgICAgJm5ic3A7Jm1pZGRvdDsmbmJzcDtcbiAgICAgICAgICA8c3Bhbj57cmV2aWV3c1RvdGFsQ291bnR9PC9zcGFuPlxuICAgICAgICA8L2gyPlxuICAgICAgICA8UmV2aWV3c0xpc3QgcmV2aWV3cz17cmV2aWV3c30gLz5cbiAgICAgICAge2NhblNob3dMb2FkTW9yZUJ0biAmJiAoXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJtYi0zXCI+XG4gICAgICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICAgIGNsYXNzTmFtZT1cImJ0biBidG4tcHJpbWFyeVwiXG4gICAgICAgICAgICAgIHR5cGU9XCJidXR0b25cIlxuICAgICAgICAgICAgICBvbkNsaWNrPXtvbkxvYWRNb3JlQnRuQ2xpY2t9XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIHtBcHBUaXRsZXMuTE9BRF9NT1JFfVxuICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICl9XG4gICAgICA8Lz5cbiAgICApO1xuICB9XG5cbiAgcmV0dXJuIChcbiAgICA8aDIgY2xhc3NOYW1lPVwibWItMyBmcy0zIGFwcC1zdWJ0aXRsZVwiPlxuICAgICAge1Jldmlld1RpdGxlcy5OT19SRVZJRVdTfVxuICAgIDwvaDI+XG4gICk7XG59O1xuXG5Qcm9wZXJ0eVJldmlld3MucHJvcFR5cGVzID0ge1xuICByZXZpZXdzOiByZXZpZXdzUHJvcFR5cGVzLFxuICByZXZpZXdzVG90YWxDb3VudDogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICBmZXRjaFJldmlld3M6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG59O1xuXG5leHBvcnQgZGVmYXVsdCBQcm9wZXJ0eVJldmlld3M7XG4iLCJpbXBvcnQgJy4vcmV2aWV3cy1wbGFjZWhvbGRlci5sZXNzJztcblxuY29uc3QgUHJvcGVydHlSZXZpZXdzUGxhY2Vob2xkZXIgPSAoKSA9PiB7XG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9XCJwcm9wZXJ0eS1yZXZpZXdzLXBsYWNlaG9sZGVyXCI+PC9kaXY+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBQcm9wZXJ0eVJldmlld3NQbGFjZWhvbGRlcjtcbiIsImltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgQ3VzdG9tRmllbGQgZnJvbSAnfi9jb21wb25lbnRzL2Zvcm1zL2N1c3RvbS1lbGVtZW50cy9maWVsZC9maWVsZCc7XG5pbXBvcnQgeyBSZXZpZXdUaXRsZXMsIFJldmlld1NSVGl0bGVzIH0gZnJvbSAnfi9jb25zdGFudHMnO1xuXG5jb25zdCBGaWVsZFByb3BlcnR5UmV2aWV3ID0gKHtcbiAgb25Gb2N1cyA9ICgpID0+IGZhbHNlLFxufSkgPT4gKFxuICA8Q3VzdG9tRmllbGRcbiAgICBjb21wb25lbnQ9XCJ0ZXh0YXJlYVwiXG4gICAgZmllbGRDbGFzcz1cIm10LTMgbWItMiBweC0zIHB5LTMgZm9ybS1yYXRpbmctdGV4dGFyZWFcIlxuICAgIGZpZWxkSWQ9XCJjb21tZW50XCJcbiAgICBmaWVsZE5hbWU9XCJjb21tZW50XCJcbiAgICBmaWVsZFR5cGU9XCJ0ZXh0YXJlYVwiXG4gICAgb25Gb2N1cz17b25Gb2N1c31cbiAgICBsYWJlbFRpdGxlPXtSZXZpZXdTUlRpdGxlcy5SRVZJRVd9XG4gICAgcGxhY2Vob2xkZXI9e1Jldmlld1RpdGxlcy5SRVZJRVdfUExBQ0VIT0xERVJ9XG4gIC8+XG4pO1xuXG5GaWVsZFByb3BlcnR5UmV2aWV3LnByb3BUeXBlcyA9IHtcbiAgb25Gb2N1czogUHJvcFR5cGVzLmZ1bmMsXG59O1xuXG5leHBvcnQgZGVmYXVsdCBGaWVsZFByb3BlcnR5UmV2aWV3O1xuIiwiaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcblxuY29uc3QgSWNvblN0YXIgPSAoeyBjbGFzc05hbWUsIHdpZHRoLCBoZWlnaHQgfSkgPT4ge1xuICByZXR1cm4gKFxuICAgIDxzdmdcbiAgICAgIGNsYXNzTmFtZT17Y2xhc3NOYW1lfVxuICAgICAgd2lkdGg9e3dpZHRofVxuICAgICAgaGVpZ2h0PXtoZWlnaHR9XG4gICAgICB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCJcbiAgICAgIHhtbG5zWGxpbms9XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCJcbiAgICA+XG4gICAgICA8c3ltYm9sIGlkPVwiaWNvbi1zdGFyXCIgdmlld0JveD1cIjAgMCAxMyAxMlwiPlxuICAgICAgICA8cGF0aCBmaWxsUnVsZT1cImV2ZW5vZGRcIiBjbGlwUnVsZT1cImV2ZW5vZGRcIlxuICAgICAgICAgIGQ9XCJNNi41IDkuNjQ0TDEwLjUxNyAxMiA5LjQ1MSA3LjU2IDEzIDQuNTczbC00LjY3NC0uMzg2TDYuNSAwIDQuNjczIDQuMTg3IDAgNC41NzMgMy41NDkgNy41NiAyLjQ4MyAxMiA2LjUgOS42NDR6XCI+XG4gICAgICAgIDwvcGF0aD5cbiAgICAgIDwvc3ltYm9sPlxuICAgICAgPHVzZSBocmVmPVwiI2ljb24tc3RhclwiIC8+XG4gICAgPC9zdmc+XG4gICk7XG59O1xuXG5JY29uU3Rhci5wcm9wVHlwZXMgPSB7XG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgd2lkdGg6IFByb3BUeXBlcy5udW1iZXIsXG4gIGhlaWdodDogUHJvcFR5cGVzLm51bWJlcixcbn07XG5cbmV4cG9ydCBkZWZhdWx0IEljb25TdGFyO1xuIiwiaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IEZyYWdtZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgRXJyb3JNZXNzYWdlLCBGaWVsZCB9IGZyb20gJ2Zvcm1payc7XG5pbXBvcnQgQ3VzdG9tRXJyb3IgZnJvbSAnLi4vLi4vY3VzdG9tLWVsZW1lbnRzL2Vycm9yL2Vycm9yJztcbmltcG9ydCBJY29uU3RhciBmcm9tICd+L2ljb25zL3N0YXIvc3Rhcic7XG5pbXBvcnQgeyBSZXZpZXdGb3JtUmF0aW5ncywgUmV2aWV3SW1nU2hhcGVzIH0gZnJvbSAnfi9jb25zdGFudHMnO1xuaW1wb3J0ICcuLi9yZXZpZXcubGVzcyc7XG5cbmNvbnN0IEZvcm1SZXZpZXdSYXRpbmcgPSAoeyByYXRpbmcgfSkgPT4ge1xuICByZXR1cm4gKFxuICAgIDw+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cInBvc2l0aW9uLXJlbGF0aXZlIGQtZmxleCBmbGV4LXJvdy1yZXZlcnNlXG4gICAgICAgIGp1c3RpZnktY29udGVudC1lbmQgYWxpZ24taXRlbXMtY2VudGVyIG1iLTFcIiByb2xlPVwiZ3JvdXBcIlxuICAgICAgPlxuICAgICAgICB7UmV2aWV3Rm9ybVJhdGluZ3MubWFwKCh7IG1hcmssIHRpdGxlIH0pID0+IChcbiAgICAgICAgICA8RnJhZ21lbnQga2V5PXt0aXRsZX0+XG4gICAgICAgICAgICA8RmllbGRcbiAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiZm9ybS1yYXRpbmctaW5wdXQgdmlzdWFsbHktaGlkZGVuXCJcbiAgICAgICAgICAgICAgY2hlY2tlZD17bWFyayA9PT0gcmF0aW5nfVxuICAgICAgICAgICAgICBpZD17dGl0bGV9XG4gICAgICAgICAgICAgIG5hbWU9XCJyYXRpbmdcIlxuICAgICAgICAgICAgICB0eXBlPVwicmFkaW9cIlxuICAgICAgICAgICAgICB2YWx1ZT17bWFya31cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8bGFiZWxcbiAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiZm9ybS1yYXRpbmctbGFiZWwgbWUtMVwiXG4gICAgICAgICAgICAgIGh0bWxGb3I9e3RpdGxlfVxuICAgICAgICAgICAgICB0aXRsZT17dGl0bGV9XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIDxJY29uU3RhclxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImZvcm0tcmF0aW5nLXN0YXItaW1hZ2VcIlxuICAgICAgICAgICAgICAgIHdpZHRoPXtSZXZpZXdJbWdTaGFwZXMuRk9STV9TVEFSLndpZHRofVxuICAgICAgICAgICAgICAgIGhlaWdodD17UmV2aWV3SW1nU2hhcGVzLkZPUk1fU1RBUi5oZWlnaHR9XG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8L2xhYmVsPlxuICAgICAgICAgIDwvRnJhZ21lbnQ+XG4gICAgICAgICkpfVxuICAgICAgPC9kaXY+XG4gICAgICA8RXJyb3JNZXNzYWdlXG4gICAgICAgIG5hbWU9XCJyYXRpbmdcIlxuICAgICAgICBjb21wb25lbnQ9e0N1c3RvbUVycm9yfVxuICAgICAgLz5cbiAgICA8Lz5cbiAgKTtcbn07XG5cbkZvcm1SZXZpZXdSYXRpbmcucHJvcFR5cGVzID0ge1xuICByYXRpbmc6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IEZvcm1SZXZpZXdSYXRpbmc7XG5cbiIsImltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgRm9ybUJ1dHRvblN1Ym1pdCBmcm9tICcuLi8uLi9idXR0b25zL3N1Ym1pdC9zdWJtaXQnO1xuaW1wb3J0IEljb25TdGFyIGZyb20gJ34vaWNvbnMvc3Rhci9zdGFyJztcbmltcG9ydCB7IEFwcFRpdGxlcywgUmV2aWV3SW1nU2hhcGVzLCBSZXZpZXdUaXRsZXMgfSBmcm9tICd+L2NvbnN0YW50cyc7XG5pbXBvcnQgJy4uL3Jldmlldy5sZXNzJztcblxuY29uc3QgRm9ybVJldmlld1N1Ym1pdCA9ICh7IGlzU3VibWl0dGluZyB9KSA9PiB7XG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9XCJkLWZsZXggYWxpZ24taXRlbXMtc3RhcnQganVzdGlmeS1jb250ZW50LWJldHdlZW5cIj5cbiAgICAgIDxwIGNsYXNzTmFtZT1cIm10LTEgZnMtNi01XCI+XG4gICAgICAgIHtSZXZpZXdUaXRsZXMuVE9fU1VCTUlUX1JFVklFV31cbiAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwiZC1pbmxpbmUgYWxpZ24tdGV4dC1ib3R0b20gZm9ybS1yYXRpbmctc3Rhci1oZWxwXCI+XG4gICAgICAgICAgPEljb25TdGFyXG4gICAgICAgICAgICBjbGFzc05hbWU9XCJmb3JtLXJhdGluZy1zdGFyLWltYWdlXCJcbiAgICAgICAgICAgIHdpZHRoPXtSZXZpZXdJbWdTaGFwZXMuSEVMUF9TVEFSLndpZHRofVxuICAgICAgICAgICAgaGVpZ2h0PXtSZXZpZXdJbWdTaGFwZXMuSEVMUF9TVEFSLmhlaWdodH1cbiAgICAgICAgICAvPlxuICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cInZpc3VhbGx5LWhpZGRlblwiPnN0YXI8L3NwYW4+XG4gICAgICAgIDwvc3Bhbj5cbiAgICAgICAge1Jldmlld1RpdGxlcy5ERVNDUklCRV9ZT1VSX1NUQVl9XG4gICAgICAgIDxiPntSZXZpZXdUaXRsZXMuVEVYVF9BTU9VTlR9PC9iPlxuICAgICAgPC9wPlxuICAgICAgPEZvcm1CdXR0b25TdWJtaXRcbiAgICAgICAgYWRkaXRpb25hbENsYXNzPVwiZm9ybS1yYXRpbmctc3VibWl0IGZvcm0tc3VibWl0XCJcbiAgICAgICAgaXNMb2FkaW5nPXtpc1N1Ym1pdHRpbmd9XG4gICAgICAgIHRpdGxlPXtBcHBUaXRsZXMuU1VCTUlUfVxuICAgICAgLz5cbiAgICA8L2Rpdj5cbiAgKTtcbn07XG5cbkZvcm1SZXZpZXdTdWJtaXQucHJvcFR5cGVzID0ge1xuICBpc1N1Ym1pdHRpbmc6IFByb3BUeXBlcy5ib29sLmlzUmVxdWlyZWQsXG59O1xuXG5leHBvcnQgZGVmYXVsdCBGb3JtUmV2aWV3U3VibWl0O1xuXG4iLCJpbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IEN1c3RvbUFsZXJ0IGZyb20gJy4uLy4uL2N1c3RvbS1lbGVtZW50cy9hbGVydC9hbGVydCc7XG5pbXBvcnQgeyBBcHBNZXNzYWdlcywgQnNTdHlsZVR5cGVzIH0gZnJvbSAnfi9jb25zdGFudHMnO1xuXG5jb25zdCBGb3JtUmV2aWV3U3VjY2VzcyA9ICh7IGhhbmRsZUNsb3NlQnRuQ2xpY2sgfSkgPT4ge1xuICByZXR1cm4gKFxuICAgIDxDdXN0b21BbGVydFxuICAgICAgYWxlcnRDbGFzcz1cImQtZmxleCBtdC0zXCJcbiAgICAgIGFsZXJ0VHlwZT17QnNTdHlsZVR5cGVzLlNVQ0NFU1N9XG4gICAgPlxuICAgICAgPD5cbiAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwibXMtYXV0b1wiPlxuICAgICAgICAgIHtBcHBNZXNzYWdlcy5SRVZJRVdfUE9TVElOR19TVUNDRVNTfVxuICAgICAgICA8L3NwYW4+XG4gICAgICAgIDxidXR0b25cbiAgICAgICAgICBjbGFzc05hbWU9XCJtcy1hdXRvIGJ0bi1jbG9zZVwiXG4gICAgICAgICAgYXJpYS1sYWJlbD1cIkNsb3NlXCJcbiAgICAgICAgICB0eXBlPVwiYnV0dG9uXCJcbiAgICAgICAgICBvbkNsaWNrPXtoYW5kbGVDbG9zZUJ0bkNsaWNrfVxuICAgICAgICA+PC9idXR0b24+XG4gICAgICA8Lz5cbiAgICA8L0N1c3RvbUFsZXJ0PlxuICApO1xufTtcblxuRm9ybVJldmlld1N1Y2Nlc3MucHJvcFR5cGVzID0ge1xuICBoYW5kbGVDbG9zZUJ0bkNsaWNrOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgRm9ybVJldmlld1N1Y2Nlc3M7XG5cbiIsImltcG9ydCAqIGFzIHl1cCBmcm9tICd5dXAnO1xuaW1wb3J0IHtcbiAgUkVWSUVXX0NPTU1FTlRfTEVOR1RILFxuICBGb3JtVmFsaWRhdGlvbk1lc3NhZ2VzLFxuICBSZXZpZXdGb3JtUmF0aW5ncyxcbn0gZnJvbSAnfi9jb25zdGFudHMnO1xuaW1wb3J0IHsgY29tbW9uRmllbGRSdWxlIH0gZnJvbSAnfi91dGlscyc7XG5cbmNvbnN0IG1hcmtzID0gQXJyYXkuZnJvbShSZXZpZXdGb3JtUmF0aW5ncywgKGl0ZW0pID0+IGl0ZW0ubWFyayk7XG5cbmV4cG9ydCBjb25zdCByZXZpZXdTY2hlbWEgPSB5dXAub2JqZWN0KCkuc2hhcGUoe1xuICByYXRpbmc6IGNvbW1vbkZpZWxkUnVsZVxuICAgIC5vbmVPZihtYXJrcywgRm9ybVZhbGlkYXRpb25NZXNzYWdlcy5SQVRJTkdfU1RBUlNfSU5WQUxJRClcbiAgICAucmVxdWlyZWQoRm9ybVZhbGlkYXRpb25NZXNzYWdlcy5SQVRJTkdfU1RBUlNfUkVRVUlSRUQpLFxuICBjb21tZW50OiBjb21tb25GaWVsZFJ1bGVcbiAgICAubWluKFJFVklFV19DT01NRU5UX0xFTkdUSCwgRm9ybVZhbGlkYXRpb25NZXNzYWdlcy5DT01NRU5UX0xFTkdUSCksXG59KTtcbiIsImltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyB1c2VDYWxsYmFjaywgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyB1c2VTZWxlY3RvciB9IGZyb20gJ3JlYWN0LXJlZHV4JztcbmltcG9ydCB7IEZvcm1paywgRm9ybSB9IGZyb20gJ2Zvcm1payc7XG5pbXBvcnQgRXJyb3JBbGVydCBmcm9tICcuLi8uLi9jb21tb24vZXJyb3ItYWxlcnQvZXJyb3ItYWxlcnQnO1xuaW1wb3J0IEZpZWxkUHJvcGVydHlSZXZpZXcgZnJvbSAnLi4vLi4vZmllbGRzL3Byb3BlcnR5LXJldmlldy9wcm9wZXJ0eS1yZXZpZXcnO1xuaW1wb3J0IEZvcm1SZXZpZXdSYXRpbmcgZnJvbSAnLi4vcmF0aW5nL3JhdGluZyc7XG5pbXBvcnQgRm9ybVJldmlld1N1Ym1pdCBmcm9tICcuLi9zdWJtaXQvc3VibWl0JztcbmltcG9ydCBGb3JtUmV2aWV3U3VjY2VzcyBmcm9tICcuLi9zdWNjZXNzL3N1Y2Nlc3MnO1xuaW1wb3J0IHsgZ2V0QXV0aFRva2VuIH0gZnJvbSAnfi9tb2R1bGVzL3VzZXInO1xuaW1wb3J0IHsgc2VuZEZvcm1SZXF1ZXN0IH0gZnJvbSAnfi9zZXJ2aWNlcyc7XG5pbXBvcnQgeyByZXZpZXdTY2hlbWEgfSBmcm9tICcuLi92YWxpZGF0aW9uJztcbmltcG9ydCB7XG4gIEFQSVJvdXRlcyxcbiAgQXBwTWVzc2FnZXMsXG4gIFJlc3BvbnNlU3RhdHVzVGV4dHMsXG4gIEZPUk1fSU5JVElBTF9FUlJPUixcbiAgRk9STV9JTklUSUFMX1NVQ0NFU1MsXG59IGZyb20gJ34vY29uc3RhbnRzJztcbmltcG9ydCB7XG4gIGdldEF1dGhIZWFkZXIsXG4gIGlzT2ZmZXJJZFZhbGlkLFxufSBmcm9tICd+L3V0aWxzJztcbmltcG9ydCAnLi4vcmV2aWV3Lmxlc3MnO1xuXG5jb25zdCBGb3JtUmV2aWV3V3JhcHBlciA9ICh7IG9mZmVySWQsIGZldGNoUmV2aWV3cyB9KSA9PiB7XG4gIGNvbnN0IGF1dGhUb2tlbiA9IHVzZVNlbGVjdG9yKGdldEF1dGhUb2tlbik7XG4gIGNvbnN0IFtyZXZpZXdFcnJvciwgc2V0UmV2aWV3RXJyb3JdID0gdXNlU3RhdGUoRk9STV9JTklUSUFMX0VSUk9SKTtcbiAgY29uc3QgW3Jldmlld1N1Y2Nlc3MsIHNldFJldmlld1N1Y2Nlc3NdID0gdXNlU3RhdGUoRk9STV9JTklUSUFMX1NVQ0NFU1MpO1xuXG4gIGNvbnN0IGluaXRpYWxWYWx1ZXMgPSB7XG4gICAgcmF0aW5nOiAnJyxcbiAgICBjb21tZW50OiAnJyxcbiAgfTtcblxuICBjb25zdCBvblRleHRhcmVhRm9jdXMgPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgc2V0UmV2aWV3RXJyb3IoRk9STV9JTklUSUFMX0VSUk9SKTtcbiAgfSwgW10pO1xuXG4gIGNvbnN0IG9uQ2xvc2VCdG5DbGljayA9IHVzZUNhbGxiYWNrKChldnQpID0+IHtcbiAgICBldnQucHJldmVudERlZmF1bHQoKTtcblxuICAgIHNldFJldmlld1N1Y2Nlc3MoRk9STV9JTklUSUFMX0VSUk9SKTtcbiAgICBzZXRSZXZpZXdFcnJvcihGT1JNX0lOSVRJQUxfRVJST1IpO1xuICAgIGZldGNoUmV2aWV3cygpO1xuICB9LCBbZmV0Y2hSZXZpZXdzXSk7XG5cbiAgY29uc3Qgb25TdWJtaXQgPSAodmFsdWVzLCB7IHJlc2V0Rm9ybSwgc2V0U3VibWl0dGluZyB9KSA9PiB7XG4gICAgY29uc3QgeyByYXRpbmcsIGNvbW1lbnQgfSA9IHZhbHVlcztcbiAgICBjb25zdCBwYXJzZWRPZmZlcklkID0gcGFyc2VJbnQob2ZmZXJJZCwgMTApO1xuICAgIGNvbnN0IHBhcnNlZFJhdGluZyA9IHBhcnNlSW50KHJhdGluZywgMTApO1xuXG4gICAgaWYgKCFpc09mZmVySWRWYWxpZChwYXJzZWRPZmZlcklkKSkge1xuICAgICAgc2V0UmV2aWV3RXJyb3IoQXBwTWVzc2FnZXMuSU5DT1JSRUNUX09GRkVSSUQpO1xuICAgICAgc2V0U3VibWl0dGluZyhmYWxzZSk7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoQXBwTWVzc2FnZXMuSU5DT1JSRUNUX09GRkVSSUQpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyAqKiogZm9yIGRlbW8gb25seVxuICAgICAgYWxlcnQoYHJldmlldyBwb3N0IGluZm9cXG5jb21tZW50OiAke2NvbW1lbnR9XFxub2ZmZXJJZDogJHtwYXJzZWRPZmZlcklkfVxcbnJhdGluZzogJHtwYXJzZWRSYXRpbmd9XFxuYCk7XG4gICAgICBzZXRSZXZpZXdTdWNjZXNzKHRydWUpO1xuICAgICAgLy8gKioqIGZvciBkZW1vIG9ubHlcblxuICAgICAgLy8gc2VuZEZvcm1SZXF1ZXN0KHtcbiAgICAgIC8vICAgY29uZmlnOiBnZXRBdXRoSGVhZGVyKGF1dGhUb2tlbiksXG4gICAgICAvLyAgIGRhdGE6IHtcbiAgICAgIC8vICAgICBjb21tZW50LFxuICAgICAgLy8gICAgIG9mZmVySWQ6IHBhcnNlZE9mZmVySWQsXG4gICAgICAvLyAgICAgcmF0aW5nOiBwYXJzZWRSYXRpbmcsXG4gICAgICAvLyAgIH0sXG4gICAgICAvLyAgIHJlc2V0Rm9ybSxcbiAgICAgIC8vICAgc2V0RXJyb3I6IHNldFJldmlld0Vycm9yLFxuICAgICAgLy8gICBzZXRTdWJtaXR0aW5nLFxuICAgICAgLy8gICBzZXRTdWNjZXNzOiBzZXRSZXZpZXdTdWNjZXNzLFxuICAgICAgLy8gICByZXNwb25zZVN0YXR1c1RleHQ6IFJlc3BvbnNlU3RhdHVzVGV4dHMuQ1JFQVRFRCxcbiAgICAgIC8vICAgdXJsOiBBUElSb3V0ZXMuUkVWSUVXUyxcbiAgICAgIC8vIH0pO1xuICAgIH1cbiAgfTtcblxuICBpZiAocmV2aWV3U3VjY2Vzcykge1xuICAgIHJldHVybiAoXG4gICAgICA8Rm9ybVJldmlld1N1Y2Nlc3MgaGFuZGxlQ2xvc2VCdG5DbGljaz17b25DbG9zZUJ0bkNsaWNrfSAvPlxuICAgICk7XG4gIH1cblxuICByZXR1cm4gKFxuICAgIDxGb3JtaWtcbiAgICAgIGluaXRpYWxWYWx1ZXM9e2luaXRpYWxWYWx1ZXN9XG4gICAgICB2YWxpZGF0aW9uU2NoZW1hPXtyZXZpZXdTY2hlbWF9XG4gICAgICBvblN1Ym1pdD17b25TdWJtaXR9XG4gICAgPlxuICAgICAgeyh7IGlzU3VibWl0dGluZywgdmFsdWVzIH0pID0+IChcbiAgICAgICAgPEZvcm0+XG4gICAgICAgICAgPEZvcm1SZXZpZXdSYXRpbmcgcmF0aW5nPXt2YWx1ZXMucmF0aW5nfSAvPlxuICAgICAgICAgIDxGaWVsZFByb3BlcnR5UmV2aWV3IG9uRm9jdXM9e29uVGV4dGFyZWFGb2N1c30gLz5cbiAgICAgICAgICA8Rm9ybVJldmlld1N1Ym1pdCBpc1N1Ym1pdHRpbmc9e2lzU3VibWl0dGluZ30gLz5cbiAgICAgICAgICB7cmV2aWV3RXJyb3IgJiYgKFxuICAgICAgICAgICAgPEVycm9yQWxlcnQgYWxlcnRDbGFzcz1cIm10LTNcIiBlcnJvck1zZz17cmV2aWV3RXJyb3J9IC8+XG4gICAgICAgICAgKX1cbiAgICAgICAgPC9Gb3JtPlxuICAgICAgKX1cbiAgICA8L0Zvcm1paz5cbiAgKTtcbn07XG5cbkZvcm1SZXZpZXdXcmFwcGVyLnByb3BUeXBlcyA9IHtcbiAgb2ZmZXJJZDogUHJvcFR5cGVzLm51bWJlci5pc1JlcXVpcmVkLFxuICBmZXRjaFJldmlld3M6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG59O1xuXG5leHBvcnQgZGVmYXVsdCBGb3JtUmV2aWV3V3JhcHBlcjtcbiIsImltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyB1c2VTZWxlY3RvciB9IGZyb20gJ3JlYWN0LXJlZHV4JztcbmltcG9ydCBNb2RhbHNMaW5rIGZyb20gJ34vY29tcG9uZW50cy9tb2RhbHMvbGluay9saW5rJztcbmltcG9ydCBGb3JtUmV2aWV3V3JhcHBlciBmcm9tICd+L2NvbXBvbmVudHMvZm9ybXMvcmV2aWV3L3dyYXBwZXIvd3JhcHBlcic7XG5pbXBvcnQgeyBnZXRJc0F1dGggfSBmcm9tICd+L21vZHVsZXMvdXNlcic7XG5pbXBvcnQgeyBSZXZpZXdUaXRsZXMgfSBmcm9tICd+L2NvbnN0YW50cyc7XG5cbmNvbnN0IFJldmlld0Zvcm1Db250YWluZXIgPSAoeyBvZmZlcklkLCBmZXRjaFJldmlld3MgfSkgPT4ge1xuICBjb25zdCBpc0F1dGggPSB1c2VTZWxlY3RvcihnZXRJc0F1dGgpO1xuXG4gIGlmIChpc0F1dGgpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPD5cbiAgICAgICAgPHAgY2xhc3NOYW1lPVwidGV4dC1zdGFydCBmdy1ib2xkIGZzdC1pdGFsaWNcIj5cbiAgICAgICAgICB7UmV2aWV3VGl0bGVzLllPVVJfUkVWSUVXfVxuICAgICAgICA8L3A+XG4gICAgICAgIDxGb3JtUmV2aWV3V3JhcHBlclxuICAgICAgICAgIG9mZmVySWQ9e29mZmVySWR9XG4gICAgICAgICAgZmV0Y2hSZXZpZXdzPXtmZXRjaFJldmlld3N9XG4gICAgICAgIC8+XG4gICAgICA8Lz5cbiAgICApO1xuICB9XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNsYXNzTmFtZT1cImFsZXJ0IGFsZXJ0LXByaW1hcnlcIiByb2xlPVwiYWxlcnRcIj5cbiAgICAgIHtSZXZpZXdUaXRsZXMuVE9fV1JJVEVfUkVWSUVXfVxuICAgICAgPE1vZGFsc0xpbmtcbiAgICAgICAgbGlua0NsYXNzPXsnYWxlcnQtbGluayd9XG4gICAgICAgIGlzTG93ZXJDYXNlPXt0cnVlfVxuICAgICAgICBwcm9wc0NvbnN0PXsnTE9HSU4nfVxuICAgICAgLz5cbiAgICA8L2Rpdj5cbiAgKTtcbn07XG5cblJldmlld0Zvcm1Db250YWluZXIucHJvcFR5cGVzID0ge1xuICBvZmZlcklkOiBQcm9wVHlwZXMubnVtYmVyLmlzUmVxdWlyZWQsXG4gIGZldGNoUmV2aWV3czogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFJldmlld0Zvcm1Db250YWluZXI7XG4iLCJpbXBvcnQgeyB1c2VSZWR1Y2VyIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IEFwcEFjdGlvblR5cGVzIH0gZnJvbSAnfi9jb25zdGFudHMnO1xuaW1wb3J0IHsgZ2V0SXRlbU9yTnVsbFByb3BUeXBlcywgcmV2aWV3c1Byb3BUeXBlcyB9IGZyb20gJ34vcHJvcC10eXBlcyc7XG5pbXBvcnQgeyB0aHJvd1Vua25vd25BY3Rpb25FcnJvciB9IGZyb20gJ34vdXRpbHMnO1xuXG5jb25zdCB1c2VSZXZpZXdzUmVkdWNlciA9IChwcm9wcykgPT4ge1xuICBjb25zdCBIT09LX05BTUUgPSAndXNlUmV2aWV3c1JlZHVjZXInO1xuXG4gIGNvbnN0IHByb3BUeXBlcyA9IHtcbiAgICByZXZpZXdzRGF0YTogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICAgIGRhdGE6IGdldEl0ZW1Pck51bGxQcm9wVHlwZXMocmV2aWV3c1Byb3BUeXBlcyksXG4gICAgICBoZWFkZXJMaW5rOiBnZXRJdGVtT3JOdWxsUHJvcFR5cGVzKFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCksXG4gICAgICB0b3RhbENvdW50OiBnZXRJdGVtT3JOdWxsUHJvcFR5cGVzKFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCksXG4gICAgfSkuaXNSZXF1aXJlZCxcbiAgfTtcblxuICBQcm9wVHlwZXMuY2hlY2tQcm9wVHlwZXMocHJvcFR5cGVzLCBwcm9wcywgJ3Byb3AnLCBIT09LX05BTUUpO1xuXG4gIGNvbnN0IHsgcmV2aWV3c0RhdGEgfSA9IHByb3BzO1xuXG4gIGNvbnN0IHJlZHVjZXIgPSAoc3RhdGUsIGFjdGlvbikgPT4ge1xuICAgIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgICAgIGNhc2UgQXBwQWN0aW9uVHlwZXMuU0VUX0RBVEE6XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgICAgZGF0YTogYWN0aW9uLnBheWxvYWQuZGF0YSxcbiAgICAgICAgICBoZWFkZXJMaW5rOiBhY3Rpb24ucGF5bG9hZC5oZWFkZXJMaW5rLFxuICAgICAgICAgIHRvdGFsQ291bnQ6IGFjdGlvbi5wYXlsb2FkLnRvdGFsQ291bnQsXG4gICAgICAgIH07XG4gICAgICBjYXNlIEFwcEFjdGlvblR5cGVzLlNFVF9TQ1JPTExFRF9EQVRBOlxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIC4uLnN0YXRlLFxuICAgICAgICAgIGRhdGE6IGFjdGlvbi5wYXlsb2FkLmRhdGEsXG4gICAgICAgICAgaGVhZGVyTGluazogYWN0aW9uLnBheWxvYWQuaGVhZGVyTGluayxcbiAgICAgICAgfTtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRocm93VW5rbm93bkFjdGlvbkVycm9yKEhPT0tfTkFNRSk7XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IFtyZXZpZXdzLCBkaXNwYXRjaF0gPSB1c2VSZWR1Y2VyKHJlZHVjZXIsIHJldmlld3NEYXRhKTtcblxuICByZXR1cm4geyByZXZpZXdzLCBkaXNwYXRjaCB9O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgdXNlUmV2aWV3c1JlZHVjZXI7XG4iLCJpbXBvcnQgeyB1c2VDYWxsYmFjaywgdXNlUmVmIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBQcm9wZXJ0eVJldmlld3MgZnJvbSAnfi9jb21wb25lbnRzL3Byb3BlcnR5L3Jldmlld3MvcmV2aWV3cyc7XG5pbXBvcnQgUHJvcGVydHlSZXZpZXdzUGxhY2Vob2xkZXIgZnJvbSAnfi9jb21wb25lbnRzL3Byb3BlcnR5L3Jldmlld3MtcGxhY2Vob2xkZXIvcmV2aWV3cy1wbGFjZWhvbGRlcic7XG5pbXBvcnQgUmV2aWV3Rm9ybUNvbnRhaW5lciBmcm9tICd+L2NvbXBvbmVudHMvcmV2aWV3L2Zvcm0tY29udGFpbmVyL2Zvcm0tY29udGFpbmVyJztcbmltcG9ydCB7IGdldEl0ZW1Pck51bGxQcm9wVHlwZXMsIHJldmlld3NQcm9wVHlwZXMgfSBmcm9tICd+L3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgYXBwU2Nyb2xsSW50b1ZpZXcsIGdldEhlYWRlckxpbmtOZXh0IH0gZnJvbSAnfi91dGlscyc7XG5pbXBvcnQgdXNlUmVGZXRjaFJldmlld3MgZnJvbSAnLi91c2UtcmVmZXRjaC1yZXZpZXdzJztcbmltcG9ydCB1c2VGZXRjaE1vcmVSZXZpZXdzIGZyb20gJy4vdXNlLWZldGNoLW1vcmUtcmV2aWV3cyc7XG5pbXBvcnQgdXNlUmV2aWV3c1JlZHVjZXIgZnJvbSAnLi91c2UtcmV2aWV3cy1yZWR1Y2VyJztcblxuY29uc3QgUHJvcGVydHlSZXZpZXdzV3JhcHBlciA9ICh7XG4gIG9mZmVySWQsXG4gIHJldmlld3NVcmwsXG4gIHJldmlld3NEYXRhLFxuICBpc1Jldmlld3NMb2FkZWQsXG59KSA9PiB7XG4gIGNvbnN0IHNjcm9sbENvbnRhaW5lciA9IHVzZVJlZihudWxsKTtcblxuICBjb25zdCB7IHJldmlld3MsIGRpc3BhdGNoIH0gPSB1c2VSZXZpZXdzUmVkdWNlcih7IHJldmlld3NEYXRhIH0pO1xuXG4gIGNvbnN0IHsgcmVGZXRjaFJldmlld3MgfSA9IHVzZVJlRmV0Y2hSZXZpZXdzKHtcbiAgICBkaXNwYXRjaCxcbiAgICBhcHBTY3JvbGxJbnRvVmlldyxcbiAgICBzY3JvbGxDb250YWluZXIsXG4gIH0pO1xuXG4gIGNvbnN0IHsgZmV0Y2hNb3JlUmV2aWV3cyB9ID0gdXNlRmV0Y2hNb3JlUmV2aWV3cyh7XG4gICAgZGlzcGF0Y2gsXG4gICAgcmV2aWV3c0RhdGE6IHJldmlld3MuZGF0YSxcbiAgICBhcHBTY3JvbGxJbnRvVmlldyxcbiAgICBzY3JvbGxDb250YWluZXIsXG4gIH0pO1xuXG4gIGNvbnN0IGhhbmRsZVJlRmV0Y2hSZXZpZXdzID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgIHJlRmV0Y2hSZXZpZXdzKHJldmlld3NVcmwpO1xuICB9LCBbcmVGZXRjaFJldmlld3MsIHJldmlld3NVcmxdKTtcblxuICBjb25zdCBoYW5kbGVGZXRjaE1vcmVSZXZpZXdzID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgIGNvbnN0IHJldmlld3NMaW5rTmV4dCA9IGdldEhlYWRlckxpbmtOZXh0KHJldmlld3MuaGVhZGVyTGluayk7XG5cbiAgICBpZiAocmV2aWV3c0xpbmtOZXh0Lmxlbmd0aCkge1xuICAgICAgZmV0Y2hNb3JlUmV2aWV3cyhyZXZpZXdzTGlua05leHQpO1xuICAgIH1cbiAgfSwgW2ZldGNoTW9yZVJldmlld3MsIHJldmlld3MuaGVhZGVyTGlua10pO1xuXG4gIGlmICghaXNSZXZpZXdzTG9hZGVkKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxQcm9wZXJ0eVJldmlld3NQbGFjZWhvbGRlciAvPlxuICAgICk7XG4gIH1cblxuICByZXR1cm4gKFxuICAgIDxkaXYgcmVmPXtzY3JvbGxDb250YWluZXJ9PlxuICAgICAgPFByb3BlcnR5UmV2aWV3c1xuICAgICAgICByZXZpZXdzPXtyZXZpZXdzLmRhdGF9XG4gICAgICAgIHJldmlld3NUb3RhbENvdW50PXtyZXZpZXdzLnRvdGFsQ291bnR9XG4gICAgICAgIGZldGNoUmV2aWV3cz17aGFuZGxlRmV0Y2hNb3JlUmV2aWV3c31cbiAgICAgIC8+XG4gICAgICA8UmV2aWV3Rm9ybUNvbnRhaW5lclxuICAgICAgICBvZmZlcklkPXtvZmZlcklkfVxuICAgICAgICBmZXRjaFJldmlld3M9e2hhbmRsZVJlRmV0Y2hSZXZpZXdzfVxuICAgICAgLz5cbiAgICA8L2Rpdj5cbiAgKTtcbn07XG5cblByb3BlcnR5UmV2aWV3c1dyYXBwZXIucHJvcFR5cGVzID0ge1xuICBvZmZlcklkOiBQcm9wVHlwZXMubnVtYmVyLmlzUmVxdWlyZWQsXG4gIHJldmlld3NVcmw6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgcmV2aWV3c0RhdGE6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgZGF0YTogZ2V0SXRlbU9yTnVsbFByb3BUeXBlcyhyZXZpZXdzUHJvcFR5cGVzKSxcbiAgICBoZWFkZXJMaW5rOiBnZXRJdGVtT3JOdWxsUHJvcFR5cGVzKFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCksXG4gICAgdG90YWxDb3VudDogZ2V0SXRlbU9yTnVsbFByb3BUeXBlcyhQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQpLFxuICB9KS5pc1JlcXVpcmVkLFxuICBpc1Jldmlld3NMb2FkZWQ6IFByb3BUeXBlcy5ib29sLmlzUmVxdWlyZWQsXG59O1xuXG5leHBvcnQgZGVmYXVsdCBQcm9wZXJ0eVJldmlld3NXcmFwcGVyO1xuIiwiaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB1c2VGZXRjaCBmcm9tICd+L2hvb2tzL3VzZS1mZXRjaC91c2UtZmV0Y2gnO1xuaW1wb3J0IHsgQXBwQWN0aW9uVHlwZXMgfSBmcm9tICd+L2NvbnN0YW50cyc7XG5pbXBvcnQgeyByZWZQcm9wVHlwZXMgfSBmcm9tICd+L3Byb3AtdHlwZXMnO1xuXG5jb25zdCB1c2VSZUZldGNoUmV2aWV3cyA9IChwcm9wcykgPT4ge1xuICBjb25zdCBIT09LX05BTUUgPSAndXNlUmVGZXRjaFJldmlld3MnO1xuXG4gIGNvbnN0IHByb3BUeXBlcyA9IHtcbiAgICBkaXNwYXRjaDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBhcHBTY3JvbGxJbnRvVmlldzogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBzY3JvbGxDb250YWluZXI6IHJlZlByb3BUeXBlcyxcbiAgfTtcblxuICBQcm9wVHlwZXMuY2hlY2tQcm9wVHlwZXMocHJvcFR5cGVzLCBwcm9wcywgJ3Byb3AnLCBIT09LX05BTUUpO1xuXG4gIGNvbnN0IHtcbiAgICBkaXNwYXRjaCxcbiAgICBhcHBTY3JvbGxJbnRvVmlldyxcbiAgICBzY3JvbGxDb250YWluZXIsXG4gIH0gPSBwcm9wcztcblxuICBjb25zdCB7IGZldGNoRGF0YTogcmVGZXRjaFJldmlld3MgfSA9IHVzZUZldGNoKHtcbiAgICBvblN1Y2Nlc3M6IChwYXlsb2FkKSA9PiB7XG4gICAgICBkaXNwYXRjaCh7XG4gICAgICAgIHR5cGU6IEFwcEFjdGlvblR5cGVzLlNFVF9EQVRBLFxuICAgICAgICBwYXlsb2FkOiB7XG4gICAgICAgICAgZGF0YTogcGF5bG9hZC5kYXRhLFxuICAgICAgICAgIGhlYWRlckxpbms6IHBheWxvYWQuaGVhZGVyTGluayxcbiAgICAgICAgICB0b3RhbENvdW50OiBwYXlsb2FkLnRvdGFsQ291bnQsXG4gICAgICAgIH0sXG4gICAgICB9KTtcblxuICAgICAgYXBwU2Nyb2xsSW50b1ZpZXcoc2Nyb2xsQ29udGFpbmVyKTtcbiAgICB9LFxuICB9KTtcblxuICByZXR1cm4geyByZUZldGNoUmV2aWV3cyB9O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgdXNlUmVGZXRjaFJldmlld3M7XG4iLCJpbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHVzZUZldGNoIGZyb20gJ34vaG9va3MvdXNlLWZldGNoL3VzZS1mZXRjaCc7XG5pbXBvcnQgeyBBcHBBY3Rpb25UeXBlcyB9IGZyb20gJ34vY29uc3RhbnRzJztcbmltcG9ydCB7XG4gIGdldEl0ZW1Pck51bGxQcm9wVHlwZXMsXG4gIHJlZlByb3BUeXBlcyxcbiAgcmV2aWV3c1Byb3BUeXBlcyxcbn0gZnJvbSAnfi9wcm9wLXR5cGVzJztcblxuY29uc3QgdXNlRmV0Y2hNb3JlUmV2aWV3cyA9IChwcm9wcykgPT4ge1xuICBjb25zdCBIT09LX05BTUUgPSAndXNlRmV0Y2hNb3JlUmV2aWV3cyc7XG5cbiAgY29uc3QgcHJvcFR5cGVzID0ge1xuICAgIGRpc3BhdGNoOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIHJldmlld3NEYXRhOiBnZXRJdGVtT3JOdWxsUHJvcFR5cGVzKHJldmlld3NQcm9wVHlwZXMpLFxuICAgIGFwcFNjcm9sbEludG9WaWV3OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIHNjcm9sbENvbnRhaW5lcjogcmVmUHJvcFR5cGVzLFxuICB9O1xuXG4gIFByb3BUeXBlcy5jaGVja1Byb3BUeXBlcyhwcm9wVHlwZXMsIHByb3BzLCAncHJvcCcsIEhPT0tfTkFNRSk7XG5cbiAgY29uc3Qge1xuICAgIGRpc3BhdGNoLFxuICAgIHJldmlld3NEYXRhLFxuICAgIGFwcFNjcm9sbEludG9WaWV3LFxuICAgIHNjcm9sbENvbnRhaW5lcixcbiAgfSA9IHByb3BzO1xuXG4gIGNvbnN0IHsgZmV0Y2hEYXRhOiBmZXRjaE1vcmVSZXZpZXdzIH0gPSB1c2VGZXRjaCh7XG4gICAgb25TdWNjZXNzOiAocGF5bG9hZCkgPT4ge1xuICAgICAgZGlzcGF0Y2goe1xuICAgICAgICB0eXBlOiBBcHBBY3Rpb25UeXBlcy5TRVRfU0NST0xMRURfREFUQSxcbiAgICAgICAgcGF5bG9hZDoge1xuICAgICAgICAgIGRhdGE6IHJldmlld3NEYXRhLmNvbmNhdChwYXlsb2FkLmRhdGEpLFxuICAgICAgICAgIGhlYWRlckxpbms6IHBheWxvYWQuaGVhZGVyTGluayxcbiAgICAgICAgfSxcbiAgICAgIH0pO1xuXG4gICAgICBhcHBTY3JvbGxJbnRvVmlldyhzY3JvbGxDb250YWluZXIpO1xuICAgIH0sXG4gIH0pO1xuXG4gIHJldHVybiB7IGZldGNoTW9yZVJldmlld3MgfTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHVzZUZldGNoTW9yZVJldmlld3M7XG4iLCJpbXBvcnQgaXNFbXB0eSBmcm9tICdsb2Rhc2gvaXNFbXB0eSc7XG5pbXBvcnQgeyB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHVzZUxvY2F0aW9uIH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFBhZ2VSb29tQ29udGVudCBmcm9tICcuLi9jb250ZW50L2NvbnRlbnQnO1xuaW1wb3J0IFBhZ2VSb29tQ29udGVudFBsYWNlaG9sZGVyIGZyb20gJy4uL2NvbnRlbnQtcGxhY2Vob2xkZXIvY29udGVudC1wbGFjZWhvbGRlcic7XG5pbXBvcnQgUHJvcGVydHlSZXZpZXdzV3JhcHBlciBmcm9tICd+L2NvbXBvbmVudHMvcHJvcGVydHkvcmV2aWV3cy13cmFwcGVyL3Jldmlld3Mtd3JhcHBlcic7XG5pbXBvcnQgeyBBcHBNZXNzYWdlcywgT2ZmZXJUeXBlcyB9IGZyb20gJ34vY29uc3RhbnRzJztcbmltcG9ydCB7IGdldFJldmlld3NVUkwsIGlzT2ZmZXJJZFZhbGlkLCB0aHJvd0Vycm9yVG9Cb3VuZGFyeSB9IGZyb20gJ34vdXRpbHMnO1xuaW1wb3J0IHVzZUZldGNoT2ZmZXIgZnJvbSAnLi91c2UtZmV0Y2gtb2ZmZXInO1xuaW1wb3J0IHVzZUZldGNoUmV2aWV3cyBmcm9tICcuL3VzZS1mZXRjaC1yZXZpZXdzJztcbmltcG9ydCB1c2VGZXRjaE9mZmVyc05lYXJieSBmcm9tICcuL3VzZS1mZXRjaC1vZmZlcnMtbmVhcmJ5JztcblxuY29uc3QgUGFnZVJvb21XcmFwcGVyID0gKHsgc2V0SXNMb2FkaW5nIH0pID0+IHtcbiAgY29uc3QgbG9jYXRpb24gPSB1c2VMb2NhdGlvbigpO1xuICBjb25zdCBwYXJhbXMgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKGxvY2F0aW9uLnNlYXJjaCk7XG4gIGNvbnN0IG9mZmVySWRQYXJhbSA9IHBhcmFtcy5nZXQoJ2lkJyk7XG4gIGNvbnN0IG9mZmVySWQgPSBwYXJzZUludChvZmZlcklkUGFyYW0sIDEwKTtcblxuICBpZiAoIWlzT2ZmZXJJZFZhbGlkKG9mZmVySWQpKSB7XG4gICAgdGhyb3dFcnJvclRvQm91bmRhcnkoQXBwTWVzc2FnZXMuSU5DT1JSRUNUX09GRkVSSUQpO1xuICB9XG5cbiAgY29uc3Qgb2ZmZXJUeXBlID0gT2ZmZXJUeXBlcy5ST09NO1xuICBjb25zdCByZXZpZXdzVXJsID0gZ2V0UmV2aWV3c1VSTChvZmZlcklkLCBvZmZlclR5cGUpO1xuXG4gIGNvbnN0IFtvZmZlciwgc2V0T2ZmZXJdID0gdXNlU3RhdGUoe30pO1xuICBjb25zdCBbb2ZmZXJzTmVhcmJ5LCBzZXRPZmZlcnNOZWFyYnldID0gdXNlU3RhdGUoW10pO1xuICBjb25zdCBbcmV2aWV3c0RhdGEsIHNldFJldmlld3NEYXRhXSA9IHVzZVN0YXRlKHt9KTtcblxuICBjb25zdCB7XG4gICAgaXNPZmZlckVycm9yLFxuICAgIGlzT2ZmZXJMb2FkZWQsXG4gIH0gPSB1c2VGZXRjaE9mZmVyKHtcbiAgICBvZmZlcklkLFxuICAgIHNldE9mZmVyLFxuICAgIHNldElzTG9hZGluZyxcbiAgfSk7XG5cbiAgY29uc3Qge1xuICAgIGlzUmV2aWV3c0xvYWRlZCxcbiAgfSA9IHVzZUZldGNoUmV2aWV3cyh7XG4gICAgcmV2aWV3c1VybCxcbiAgICBzZXRSZXZpZXdzRGF0YSxcbiAgfSk7XG5cbiAgY29uc3Qge1xuICAgIGlzT2ZmZXJzTmVhcmJ5TG9hZGVkLFxuICB9ID0gdXNlRmV0Y2hPZmZlcnNOZWFyYnkoe1xuICAgIG9mZmVySWQsXG4gICAgc2V0T2ZmZXJzTmVhcmJ5LFxuICB9KTtcblxuICBpZiAoaXNPZmZlckVycm9yIHx8IGlzT2ZmZXJMb2FkZWQgJiYgaXNFbXB0eShvZmZlcikpIHtcbiAgICB0aHJvd0Vycm9yVG9Cb3VuZGFyeSgpO1xuICB9IGVsc2UgaWYgKCFpc09mZmVyTG9hZGVkKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxQYWdlUm9vbUNvbnRlbnRQbGFjZWhvbGRlciBvZmZlclR5cGU9e29mZmVyVHlwZX0gLz5cbiAgICApO1xuICB9XG5cbiAgY29uc3QgUHJvcGVydHlSZXZpZXdzV3JhcHBlZCA9ICgpID0+IChcbiAgICA8UHJvcGVydHlSZXZpZXdzV3JhcHBlclxuICAgICAgb2ZmZXJJZD17b2ZmZXJJZH1cbiAgICAgIHJldmlld3NVcmw9e3Jldmlld3NVcmx9XG4gICAgICByZXZpZXdzRGF0YT17cmV2aWV3c0RhdGF9XG4gICAgICBpc1Jldmlld3NMb2FkZWQ9e2lzUmV2aWV3c0xvYWRlZH1cbiAgICAvPlxuICApO1xuXG4gIHJldHVybiAoXG4gICAgPFBhZ2VSb29tQ29udGVudFxuICAgICAgb2ZmZXI9e29mZmVyfVxuICAgICAgb2ZmZXJUeXBlPXtvZmZlclR5cGV9XG4gICAgICBvZmZlcnNOZWFyYnk9e29mZmVyc05lYXJieX1cbiAgICAgIGlzQ3VycmVudE9mZmVyTG9hZGVkPXtpc09mZmVyTG9hZGVkfVxuICAgICAgaXNPZmZlcnNOZWFyYnlMb2FkZWQ9e2lzT2ZmZXJzTmVhcmJ5TG9hZGVkfVxuICAgICAgUHJvcGVydHlSZXZpZXdzV3JhcHBlcj17UHJvcGVydHlSZXZpZXdzV3JhcHBlZH1cbiAgICAvPlxuICApO1xufTtcblxuUGFnZVJvb21XcmFwcGVyLnByb3BUeXBlcyA9IHtcbiAgc2V0SXNMb2FkaW5nOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgUGFnZVJvb21XcmFwcGVyO1xuIiwiaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB1c2VGZXRjaCBmcm9tICd+L2hvb2tzL3VzZS1mZXRjaC91c2UtZmV0Y2gnO1xuaW1wb3J0IHsgZ2V0T2ZmZXJVUkwgfSBmcm9tICd+L3V0aWxzJztcbmltcG9ydCB7IGFkYXB0T2ZmZXIgfSBmcm9tICd+L2FkYXB0ZXJzL29mZmVyJztcblxuY29uc3QgdXNlRmV0Y2hPZmZlciA9IChwcm9wcykgPT4ge1xuICBjb25zdCBIT09LX05BTUUgPSAndXNlRmV0Y2hPZmZlcic7XG5cbiAgY29uc3QgcHJvcFR5cGVzID0ge1xuICAgIG9mZmVySWQ6IFByb3BUeXBlcy5udW1iZXIuaXNSZXF1aXJlZCxcbiAgICBzZXRPZmZlcjogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBzZXRJc0xvYWRpbmc6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIH07XG5cbiAgUHJvcFR5cGVzLmNoZWNrUHJvcFR5cGVzKHByb3BUeXBlcywgcHJvcHMsICdwcm9wJywgSE9PS19OQU1FKTtcblxuICBjb25zdCB7XG4gICAgb2ZmZXJJZCxcbiAgICBzZXRPZmZlcixcbiAgICBzZXRJc0xvYWRpbmcsXG4gIH0gPSBwcm9wcztcblxuICBjb25zdCB7XG4gICAgaXNFcnJvcjogaXNPZmZlckVycm9yLFxuICAgIGlzTG9hZGVkOiBpc09mZmVyTG9hZGVkLFxuICB9ID0gdXNlRmV0Y2goe1xuICAgIHVybDogZ2V0T2ZmZXJVUkwob2ZmZXJJZCksXG4gICAgb25SZXF1ZXN0OiAoKSA9PiB7XG4gICAgICBzZXRJc0xvYWRpbmcodHJ1ZSk7XG4gICAgfSxcbiAgICBvblN1Y2Nlc3M6IChwYXlsb2FkKSA9PiB7XG4gICAgICBjb25zdCBvZmZlciA9IGFkYXB0T2ZmZXIocGF5bG9hZC5kYXRhLnNsaWNlKClbMF0pO1xuICAgICAgc2V0T2ZmZXIob2ZmZXIpO1xuICAgICAgc2V0SXNMb2FkaW5nKGZhbHNlKTtcbiAgICB9LFxuICAgIG9uRXJyb3I6ICgpID0+IHtcbiAgICAgIHNldElzTG9hZGluZyhmYWxzZSk7XG4gICAgfSxcbiAgfSk7XG5cbiAgcmV0dXJuIHsgaXNPZmZlckVycm9yLCBpc09mZmVyTG9hZGVkIH07XG59O1xuXG5leHBvcnQgZGVmYXVsdCB1c2VGZXRjaE9mZmVyO1xuIiwiaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB1c2VGZXRjaCBmcm9tICd+L2hvb2tzL3VzZS1mZXRjaC91c2UtZmV0Y2gnO1xuXG5jb25zdCB1c2VGZXRjaFJldmlld3MgPSAocHJvcHMpID0+IHtcbiAgY29uc3QgSE9PS19OQU1FID0gJ3VzZUZldGNoUmV2aWV3cyc7XG5cbiAgY29uc3QgcHJvcFR5cGVzID0ge1xuICAgIHJldmlld3NVcmw6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgICBzZXRSZXZpZXdzRGF0YTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgfTtcblxuICBQcm9wVHlwZXMuY2hlY2tQcm9wVHlwZXMocHJvcFR5cGVzLCBwcm9wcywgJ3Byb3AnLCBIT09LX05BTUUpO1xuXG4gIGNvbnN0IHtcbiAgICByZXZpZXdzVXJsLFxuICAgIHNldFJldmlld3NEYXRhLFxuICB9ID0gcHJvcHM7XG5cbiAgY29uc3Qge1xuICAgIGlzTG9hZGVkOiBpc1Jldmlld3NMb2FkZWQsXG4gIH0gPSB1c2VGZXRjaCh7XG4gICAgdXJsOiByZXZpZXdzVXJsLFxuICAgIG9uU3VjY2VzczogKHBheWxvYWQpID0+IHtcbiAgICAgIHNldFJldmlld3NEYXRhKHBheWxvYWQpO1xuICAgIH0sXG4gIH0pO1xuXG4gIHJldHVybiB7IGlzUmV2aWV3c0xvYWRlZCB9O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgdXNlRmV0Y2hSZXZpZXdzO1xuIiwiaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB1c2VGZXRjaCBmcm9tICd+L2hvb2tzL3VzZS1mZXRjaC91c2UtZmV0Y2gnO1xuaW1wb3J0IHsgZ2V0T2ZmZXJzTmVhcmJ5VVJMIH0gZnJvbSAnfi91dGlscyc7XG5pbXBvcnQgeyBhZGFwdE9mZmVyIH0gZnJvbSAnfi9hZGFwdGVycy9vZmZlcic7XG5cbmNvbnN0IHVzZUZldGNoT2ZmZXJzTmVhcmJ5ID0gKHByb3BzKSA9PiB7XG4gIGNvbnN0IEhPT0tfTkFNRSA9ICd1c2VGZXRjaE9mZmVyc05lYXJieSc7XG5cbiAgY29uc3QgcHJvcFR5cGVzID0ge1xuICAgIG9mZmVySWQ6IFByb3BUeXBlcy5udW1iZXIuaXNSZXF1aXJlZCxcbiAgICBzZXRPZmZlcnNOZWFyYnk6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIH07XG5cbiAgUHJvcFR5cGVzLmNoZWNrUHJvcFR5cGVzKHByb3BUeXBlcywgcHJvcHMsICdwcm9wJywgSE9PS19OQU1FKTtcblxuICBjb25zdCB7XG4gICAgb2ZmZXJJZCxcbiAgICBzZXRPZmZlcnNOZWFyYnksXG4gIH0gPSBwcm9wcztcblxuICBjb25zdCB7XG4gICAgaXNMb2FkZWQ6IGlzT2ZmZXJzTmVhcmJ5TG9hZGVkLFxuICB9ID0gdXNlRmV0Y2goe1xuICAgIHVybDogZ2V0T2ZmZXJzTmVhcmJ5VVJMKG9mZmVySWQpLFxuICAgIG9uU3VjY2VzczogKHBheWxvYWQpID0+IHtcbiAgICAgIHNldE9mZmVyc05lYXJieShwYXlsb2FkLmRhdGEubWFwKChpdGVtKSA9PiBhZGFwdE9mZmVyKGl0ZW0pKSk7XG4gICAgfSxcbiAgfSk7XG5cbiAgcmV0dXJuIHsgaXNPZmZlcnNOZWFyYnlMb2FkZWQgfTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHVzZUZldGNoT2ZmZXJzTmVhcmJ5O1xuIl0sIm5hbWVzIjpbIkZvcm1CdXR0b25TdWJtaXQiLCJhZGRpdGlvbmFsQ2xhc3MiLCJpc0xvYWRpbmciLCJ0aXRsZSIsImNsYXNzTmFtZSIsImNsc3giLCJkaXNhYmxlZCIsInR5cGUiLCJhcyIsImFuaW1hdGlvbiIsInNpemUiLCJyb2xlIiwicHJvcFR5cGVzIiwiUHJvcFR5cGVzIiwiRXJyb3JBbGVydCIsImFsZXJ0Q2xhc3MiLCJlcnJvck1zZyIsImFsZXJ0VHlwZSIsIkJzU3R5bGVUeXBlcyIsIkN1c3RvbUFsZXJ0IiwiY2hpbGRyZW4iLCJjb250YWluZXJDbGFzcyIsInByb3BzIiwiQ3VzdG9tRmllbGQiLCJhdXRvQ29tcGxldGUiLCJjb21wb25lbnQiLCJmaWVsZENsYXNzIiwiZmllbGRJZCIsImZpZWxkTmFtZSIsImZpZWxkVHlwZSIsImxhYmVsVGl0bGUiLCJvbkZvY3VzIiwicGxhY2Vob2xkZXIiLCJodG1sRm9yIiwiaWQiLCJuYW1lIiwiQ3VzdG9tRXJyb3IiLCJQcm9wZXJ0eUZlYXR1cmVzIiwiZmVhdHVyZXMiLCJiZWRyb29tcyIsImNhcGl0YWxpemVGaXJzdExldHRlciIsIk9mZmVyVGl0bGVzIiwiaXNSZXF1aXJlZCIsIlByb3BlcnR5R2FsbGVyeSIsIm9mZmVyUGhvdG9zIiwib2ZmZXJUeXBlIiwibWFwIiwiaXRlbSIsImFsdCIsIndpZHRoIiwiT2ZmZXJJbWdTaGFwZXMiLCJoZWlnaHQiLCJzcmMiLCJQcm9wZXJ0eUNvbnRlbnQiLCJvZmZlciIsInBob3RvcyIsIk9GRkVSX0NVUlJFTkNZIiwicHJpY2UiLCJPRkZFUl9QUklDRV9QRVJJT0RfTk9fU0xBU0giLCJvZmZlcklkIiwiYm9va21hcmtUeXBlIiwiQm9va21hcmtCdG5UeXBlcyIsInJhdGluZyIsInJhdGluZ1R5cGUiLCJSYXRpbmdUeXBlcyIsInNob3dWYWx1ZSIsIndpZmkiLCJvZmZlclByb3BUeXBlcyIsIlByb3BlcnR5TmVhcmJ5Iiwib2ZmZXJzIiwidXNlT2ZmZXJzTGlzdEhvdmVyIiwiaGFuZGxlT2ZmZXJDYXJkTW91c2VFbnRlciIsImhhbmRsZU9mZmVyQ2FyZE1vdXNlTGVhdmUiLCJSZXZpZXdUaXRsZXMiLCJvZmZlcnNQcm9wVHlwZXMiLCJQYWdlUm9vbUNvbnRlbnQiLCJvZmZlcnNOZWFyYnkiLCJpc0N1cnJlbnRPZmZlckxvYWRlZCIsImlzT2ZmZXJzTmVhcmJ5TG9hZGVkIiwiUHJvcGVydHlSZXZpZXdzV3JhcHBlciIsImNhblNob3dPZmZlcnNOZWFyYnkiLCJCb29sZWFuIiwibGVuZ3RoIiwiY3VycmVudE9mZmVyIiwiUHJvcGVydHlHYWxsZXJ5UGxhY2Vob2xkZXIiLCJkYXRhQXJyYXkiLCJnZXRBcnJheU9mVW5kZWZpbmVkcyIsIlJPT01fTUFYX1BIT1RPU19DT1VOVCIsIl8iLCJpZHgiLCJzdHlsZSIsIlJhdGluZ1N0YXJzUGxhY2Vob2xkZXIiLCJSYXRpbmdDbGFzc2VzIiwiUHJvcGVydHlDb250ZW50UGxhY2Vob2xkZXIiLCJQYWdlUm9vbUNvbnRlbnRQbGFjZWhvbGRlciIsIlJldmlld0l0ZW0iLCJyZXZpZXciLCJhdmF0YXIiLCJSZXZpZXdJbWdTaGFwZXMiLCJSRVZJRVdfQVZBVEFSX0FMVCIsImNvbW1lbnQiLCJkYXRlVGltZSIsImRhdGUiLCJnZXRSZXZpZXdEYXRlIiwicmV2aWV3UHJvcFR5cGVzIiwiUmV2aWV3c0xpc3QiLCJyZXZpZXdzIiwicmV2aWV3c1Byb3BUeXBlcyIsIlByb3BlcnR5UmV2aWV3cyIsInJldmlld3NUb3RhbENvdW50IiwiZmV0Y2hSZXZpZXdzIiwiY2FuU2hvd0xvYWRNb3JlQnRuIiwicGFyc2VJbnQiLCJBcHBUaXRsZXMiLCJvbkNsaWNrIiwiRmllbGRQcm9wZXJ0eVJldmlldyIsIlJldmlld1NSVGl0bGVzIiwiSWNvblN0YXIiLCJ4bWxucyIsInhtbG5zWGxpbmsiLCJ2aWV3Qm94IiwiZmlsbFJ1bGUiLCJjbGlwUnVsZSIsImQiLCJocmVmIiwiRm9ybVJldmlld1JhdGluZyIsIlJldmlld0Zvcm1SYXRpbmdzIiwibWFyayIsIkZyYWdtZW50IiwiY2hlY2tlZCIsInZhbHVlIiwiRm9ybVJldmlld1N1Ym1pdCIsImlzU3VibWl0dGluZyIsIkZvcm1SZXZpZXdTdWNjZXNzIiwiaGFuZGxlQ2xvc2VCdG5DbGljayIsIkFwcE1lc3NhZ2VzIiwibWFya3MiLCJBcnJheSIsImZyb20iLCJyZXZpZXdTY2hlbWEiLCJ5dXAiLCJzaGFwZSIsImNvbW1vbkZpZWxkUnVsZSIsIkZvcm1WYWxpZGF0aW9uTWVzc2FnZXMiLCJyZXF1aXJlZCIsIlJFVklFV19DT01NRU5UX0xFTkdUSCIsIkZvcm1SZXZpZXdXcmFwcGVyIiwidXNlU2VsZWN0b3IiLCJnZXRBdXRoVG9rZW4iLCJ1c2VTdGF0ZSIsIkZPUk1fSU5JVElBTF9FUlJPUiIsInJldmlld0Vycm9yIiwic2V0UmV2aWV3RXJyb3IiLCJGT1JNX0lOSVRJQUxfU1VDQ0VTUyIsInJldmlld1N1Y2Nlc3MiLCJzZXRSZXZpZXdTdWNjZXNzIiwib25UZXh0YXJlYUZvY3VzIiwidXNlQ2FsbGJhY2siLCJvbkNsb3NlQnRuQ2xpY2siLCJldnQiLCJwcmV2ZW50RGVmYXVsdCIsImluaXRpYWxWYWx1ZXMiLCJ2YWxpZGF0aW9uU2NoZW1hIiwib25TdWJtaXQiLCJ2YWx1ZXMiLCJyZXNldEZvcm0iLCJzZXRTdWJtaXR0aW5nIiwicGFyc2VkT2ZmZXJJZCIsInBhcnNlZFJhdGluZyIsImlzT2ZmZXJJZFZhbGlkIiwiRXJyb3IiLCJhbGVydCIsIlJldmlld0Zvcm1Db250YWluZXIiLCJnZXRJc0F1dGgiLCJsaW5rQ2xhc3MiLCJpc0xvd2VyQ2FzZSIsInByb3BzQ29uc3QiLCJIT09LX05BTUUiLCJyZXZpZXdzRGF0YSIsImRhdGEiLCJnZXRJdGVtT3JOdWxsUHJvcFR5cGVzIiwiaGVhZGVyTGluayIsInRvdGFsQ291bnQiLCJ1c2VSZWR1Y2VyIiwic3RhdGUiLCJhY3Rpb24iLCJBcHBBY3Rpb25UeXBlcyIsInBheWxvYWQiLCJ0aHJvd1Vua25vd25BY3Rpb25FcnJvciIsImRpc3BhdGNoIiwicmV2aWV3c1VybCIsImlzUmV2aWV3c0xvYWRlZCIsInNjcm9sbENvbnRhaW5lciIsInVzZVJlZiIsInVzZVJldmlld3NSZWR1Y2VyIiwicmVGZXRjaFJldmlld3MiLCJhcHBTY3JvbGxJbnRvVmlldyIsInJlZlByb3BUeXBlcyIsInVzZUZldGNoIiwib25TdWNjZXNzIiwiZmV0Y2hEYXRhIiwidXNlUmVGZXRjaFJldmlld3MiLCJmZXRjaE1vcmVSZXZpZXdzIiwiY29uY2F0IiwidXNlRmV0Y2hNb3JlUmV2aWV3cyIsImhhbmRsZVJlRmV0Y2hSZXZpZXdzIiwiaGFuZGxlRmV0Y2hNb3JlUmV2aWV3cyIsInJldmlld3NMaW5rTmV4dCIsImdldEhlYWRlckxpbmtOZXh0IiwicmVmIiwiUGFnZVJvb21XcmFwcGVyIiwic2V0SXNMb2FkaW5nIiwibG9jYXRpb24iLCJ1c2VMb2NhdGlvbiIsIm9mZmVySWRQYXJhbSIsIlVSTFNlYXJjaFBhcmFtcyIsInNlYXJjaCIsImdldCIsInRocm93RXJyb3JUb0JvdW5kYXJ5IiwiT2ZmZXJUeXBlcyIsImdldFJldmlld3NVUkwiLCJzZXRPZmZlciIsInNldE9mZmVyc05lYXJieSIsInNldFJldmlld3NEYXRhIiwidXJsIiwiZ2V0T2ZmZXJVUkwiLCJvblJlcXVlc3QiLCJhZGFwdE9mZmVyIiwic2xpY2UiLCJvbkVycm9yIiwiaXNPZmZlckVycm9yIiwiaXNFcnJvciIsImlzT2ZmZXJMb2FkZWQiLCJpc0xvYWRlZCIsInVzZUZldGNoT2ZmZXIiLCJ1c2VGZXRjaFJldmlld3MiLCJnZXRPZmZlcnNOZWFyYnlVUkwiLCJ1c2VGZXRjaE9mZmVyc05lYXJieSIsImlzRW1wdHkiXSwic291cmNlUm9vdCI6IiJ9