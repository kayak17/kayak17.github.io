(self.webpackChunkapp_react=self.webpackChunkapp_react||[]).push([[72],{5004:function(e,t,n){"use strict";var r=n(6010),s=n(5697),a=n.n(s),o=n(6968),i=n(5893),l=function(e){var t=e.additionalClass,n=e.isLoading,s=e.title;return(0,i.jsxs)("button",{className:(0,r.Z)("btn btn-primary",t),disabled:n,type:"submit",children:[n&&(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(o.Z,{as:"span",animation:"border",size:"sm",role:"status","aria-hidden":"true"}),"Â "]}),s]})};l.propTypes={additionalClass:a().string.isRequired,isLoading:a().bool.isRequired,title:a().string.isRequired},t.Z=l},9139:function(e,t,n){"use strict";var r=n(6010),s=n(5697),a=n.n(s),o=n(7951),i=n(8404),l=n(5893),c=function(e){var t=e.alertClass,n=e.errorMsg;return(0,l.jsx)(o.Z,{alertClass:(0,r.Z)(t),alertType:i.vB.DANGER,children:n})};c.propTypes={alertClass:a().string,errorMsg:a().string.isRequired},t.Z=c},7951:function(e,t,n){"use strict";var r=n(5697),s=n.n(r),a=n(8404),o=n(5893),i=function(e){var t=e.alertClass,n=void 0===t?"":t,r=e.alertType,s=void 0===r?a.vB.INFO:r,i=e.children,l=void 0===i?null:i,c=e.containerClass,u=void 0===c?"":c;return(0,o.jsx)("div",{className:"app-form-group form-group ".concat(u),children:(0,o.jsx)("div",{className:"alert alert-".concat(s," text-center ").concat(n),role:"alert",children:l})})};i.propTypes={alertClass:s().string,alertType:s().string,children:s().oneOfType([s().element,s().string]),containerClass:s().string},t.Z=i},1302:function(e,t,n){"use strict";var r=n(5893);function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}t.Z=function(e){return(0,r.jsx)("div",function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({className:"app-form-control-error"},e))}},9792:function(e,t,n){"use strict";var r=n(5697),s=n.n(r),a=n(4649),o=n(1302),i=n(5893),l=function(e){var t=e.autoComplete,n=void 0===t?"":t,r=e.children,s=void 0===r?null:r,l=e.component,c=void 0===l?"":l,u=e.containerClass,d=void 0===u?"":u,m=e.fieldClass,p=void 0===m?"":m,f=e.fieldId,h=e.fieldName,g=e.fieldType,v=e.labelTitle,y=e.onFocus,b=void 0===y?function(){return!1}:y,j=e.placeholder,x=void 0===j?"":j;return(0,i.jsxs)("div",{className:"app-form-group form-group ".concat(d),children:[(0,i.jsx)("label",{className:"visually-hidden",htmlFor:h,children:v}),(0,i.jsx)(a.gN,{className:"app-form-control form-control ".concat(p),autoComplete:n,component:c,id:f,name:h,placeholder:x,type:g,onFocus:b,children:s}),(0,i.jsx)(a.Bc,{name:h,component:o.Z})]})};l.propTypes={autoComplete:s().string,children:s().element,component:s().oneOfType([s().elementType,s().string]),containerClass:s().string,fieldClass:s().string,fieldId:s().string.isRequired,fieldName:s().string.isRequired,fieldType:s().string.isRequired,labelTitle:s().string.isRequired,onFocus:s().func,placeholder:s().string},t.Z=l},2637:function(e,t,n){"use strict";var r=n(5697),s=n.n(r),a=n(9792),o=n(8404),i=n(5893),l=function(e){var t=e.onFocus,n=void 0===t?function(){return!1}:t;return(0,i.jsx)(a.Z,{autoComplete:"email",fieldId:"email",fieldName:"email",fieldType:"email",onFocus:n,labelTitle:o.ge.EMAIL,placeholder:o.nK.EMAIL})};l.propTypes={onFocus:s().func},t.Z=l},1153:function(e,t,n){"use strict";var r=n(5697),s=n.n(r),a=n(9792),o=n(8404),i=n(5893),l=function(e){var t=e.onFocus,n=void 0===t?function(){return!1}:t;return(0,i.jsx)(a.Z,{autoComplete:"current-password",fieldId:"password",fieldName:"password",fieldType:"password",onFocus:n,labelTitle:o.ge.PASSWORD,placeholder:o.nK.PASSWORD})};l.propTypes={onFocus:s().func},t.Z=l},5072:function(e,t,n){"use strict";n.d(t,{Z:function(){return $}});var r=n(8446),s=n.n(r),a=n(5697),o=n.n(a),i=n(7294),l=n(3942),c=n(4649),u=n(5004),d=n(9139),m=n(2637),p=n(9792),f=n(8404),h=n(5893),g=function(e){var t=e.onFocus,n=void 0===t?function(){return!1}:t;return(0,h.jsx)(p.Z,{autoComplete:"username",fieldId:"name",fieldName:"name",fieldType:"name",onFocus:n,labelTitle:f.ge.NAME,placeholder:f.nK.NAME})};g.propTypes={onFocus:o().func};var v=g,y=n(1153),b=function(e){var t=e.onFocus,n=void 0===t?function(){return!1}:t;return(0,h.jsx)(p.Z,{autoComplete:"new-password",fieldId:"passwordConfirm",fieldName:"passwordConfirm",fieldType:"password",onFocus:n,labelTitle:f.ge.PASSWORD_CONFIRM,placeholder:f.nK.PASSWORD_CONFIRM})};b.propTypes={onFocus:o().func};var j=b,x=n(9711),S=n(4384),w=n(7951),C=function(e){var t=e.isModal;return(0,h.jsx)(w.Z,{alertType:f.vB.SUCCESS,children:(0,h.jsxs)(h.Fragment,{children:[(0,h.jsx)("div",{children:f.h7.SIGNUP_SUCCESS}),(0,h.jsx)("div",{children:t?(0,h.jsx)(S.Z,{linkClass:"alert-link",propsConst:"LOGIN"}):(0,h.jsx)(x.rU,{className:"alert-link",to:f.$w.LOGIN,children:(0,h.jsx)("span",{children:f.yP.LOGIN})})})]})})};C.propTypes={isModal:o().bool.isRequired};var O=C,N=n(7561),T=n(9620),M=n(6948);T(N);var F=N.object().shape({name:M.aV,email:M.wM,password:M.aV.password(f.m$.PASSWORD_INVALID).min(6).minNumbers(1).minSymbols(0).minUppercase(0),passwordConfirm:M.aV.oneOf([N.ref("password")],f.m$.PASSWORDS_DO_NOT_MATCH).required(f.m$.PASSWORD_CONFIRM_REQUIRED)}),R=n(5506);function A(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,s,a=[],o=!0,i=!1;try{for(n=n.call(e);!(o=(r=n.next()).done)&&(a.push(r.value),!t||a.length!==t);o=!0);}catch(e){i=!0,s=e}finally{try{o||null==n.return||n.return()}finally{if(i)throw s}}return a}}(e,t)||I(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function I(e,t){if(e){if("string"==typeof e)return Z(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Z(e,t):void 0}}function Z(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}n(8195);var P=function(e){var t=e.isModal,n=(0,l.I0)(),r=(0,l.v9)(R.Rf,s()),a=A((0,i.useState)(f.dc),2),o=a[0],p=a[1],g=A((0,i.useState)(f._Y),2),b=g[0],x=g[1],S=(0,i.useCallback)((function(){p(f.dc)}),[]);return b?(0,h.jsx)(O,{isModal:t}):(0,h.jsx)(c.J9,{initialValues:{name:"",email:"",password:"",passwordConfirm:""},validationSchema:F,onSubmit:function(e,t){var s=t.resetForm,a=t.setSubmitting;p(f.dc);var o,i=r.filter((function(t){return t.name===e.name||t.email===e.email}));if(i.length||"admin@admin.com"===e.email)p("Such user already exists");else{var l=[].concat(function(e){if(Array.isArray(e))return Z(e)}(o=r)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(o)||I(o)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}(),[{id:Date.now(),avatar:"img/icon-avatar.svg",name:e.name,email:e.email,password:e.password,token:"fake-jwt-token"}]);n((0,R.HM)(l)),x(!0),s()}a(!1)},children:function(e){var t=e.isSubmitting;return(0,h.jsxs)(c.l0,{children:[(0,h.jsx)(v,{onFocus:S}),(0,h.jsx)(m.Z,{onFocus:S}),(0,h.jsx)(y.Z,{onFocus:S}),(0,h.jsx)(j,{onFocus:S}),(0,h.jsx)("div",{className:"app-form-group form-group",children:(0,h.jsx)(u.Z,{additionalClass:"app-form-submit",isLoading:t,title:f.yP.SIGNUP})}),o&&(0,h.jsx)(d.Z,{errorMsg:o})]})}})};P.propTypes={isModal:o().bool};var $=P},8446:function(e,t,n){var r=n(939);e.exports=function(e,t){return r(e,t)}},9620:function(e){"use strict";const t=function(e,t){return 1===t?e:`${e}s`},n=function(e){return null==e};function r(e=1,r){const s=r||"${path} must contain at least ${length} lowercase "+t("letter",e);return this.test({name:"minLowercase",exclusive:!0,message:s,params:{length:e},test:t=>n(t)||(t.match(/[a-z]/g)||[]).length>=e})}function s(e=1,r){const s=r||"${path} must contain at least ${length} uppercase "+t("letter",e);return this.test({name:"minUppercase",exclusive:!0,message:s,params:{length:e},test:t=>n(t)||(t.match(/[A-Z]/g)||[]).length>=e})}function a(e=1,r){const s=r||"${path} must contain at least ${length} "+t("number",e);return this.test({name:"minNumber",exclusive:!0,message:s,params:{length:e},test:t=>n(t)||(t.match(/[0-9]/g)||[]).length>=e})}function o(e=1,r){const s=r||"${path} must contain at least ${length} "+t("symbol",e);return this.test({name:"minSymbol",exclusive:!0,message:s,params:{length:e},test:t=>n(t)||(t.match(/[^a-zA-Z0-9\s]/g)||[]).length>=e})}function i(e=2,r){const s=r||"${path} must not contain sequences of more than ${length} repeated "+t("character",e);return this.test({name:"minRepeating",exclusive:!0,message:s,params:{length:e},test:t=>n(t)||!new RegExp(`(.)\\1{${e},}`).test(t)})}function l(e=2,r){const s=r||"${path} must contain at least ${length} "+t("word",e),a=new RegExp("[a-zA-Z0-9]");return this.test({name:"minWords",exclusive:!0,message:s,params:{length:e},test:t=>n(t)||t.split(" ").filter((e=>!!e&&a.test(e))).length>=e})}function c(){return this.min(8).max(250).minLowercase(1).minUppercase(1).minNumbers(1).minSymbols(1)}e.exports=function(e){e.addMethod(e.string,"minLowercase",r),e.addMethod(e.string,"minUppercase",s),e.addMethod(e.string,"minNumber",a),e.addMethod(e.string,"minNumbers",a),e.addMethod(e.string,"minSymbol",o),e.addMethod(e.string,"minSymbols",o),e.addMethod(e.string,"minRepeating",i),e.addMethod(e.string,"minWords",l),e.addMethod(e.string,"password",c)}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,